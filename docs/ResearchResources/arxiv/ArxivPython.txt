If there are any errors
please Abort, and run `arxiv_required` for required package installation, and start again
Please wait while we phrase the requested information from global arxiv[arxiv.org] servers 
------------>
---------------------------->
------------------------------------------------------>
 
An Initial Step Towards Organ Transplantation Based on GitHub Repository (Shangwen Wang - 10 October, 2018)
Implementing our transplantation strategy for different kinds of organs, we manually extract 30 organs in three different programming languages, namely Java, Python, and C, and make unit tests for them utilizing four testing tools (two for Java, one for Python, and one for C). All the 30 organs extracted by our strategy possess good performances in unit test with the highest passing rate reaching 97% and the lowest one still passing 80% and the three Java organs work well in the new system, providing three new functionalities for the host
Link: https://arxiv.org/abs/1810.04825
====================================================
Smtlink 2.0 (Yan Peng - 9 October, 2018)
The final transliteration from ACL2 to Z3's Python interface requires a trusted clause processor. Smtlink 2.0 provides support for FTY defprod, deflist, defalist, and defoption types by using Z3's arrays and user-defined data types
Link: https://arxiv.org/abs/1810.04317
====================================================
A Comparison between Background Modelling Methods for Vehicle Segmentation in Highway Traffic Videos (L. A. Marcomini - 5 October, 2018)
All algorithms are available in OpenCV and were all coded in Python. We analyzed seven videos, totaling 2 hours of recording. To compare the algorithms, we created 35 ground-truth images, five from each video, and we used three different metrics: accuracy rate, precision rate, and processing time. Results indicate that all three algorithms had more than 90% of precision rate, while obtaining an average of 80% on accuracy. The algorithm with the lowest impact on processing time allowed the computation of 60 frames per second.
Link: https://arxiv.org/abs/1810.02835
====================================================
AI Fairness 360: An Extensible Toolkit for Detecting, Understanding, and Mitigating Unwanted Algorithmic Bias (Rachel K. E. Bellamy - 3 October, 2018)
This paper introduces a new open source Python toolkit for algorithmic fairness, AI Fairness 360 (AIF360), released under an Apache v2.0 license {https://github.com/ibm/aif360)
Link: https://arxiv.org/abs/1810.01943
====================================================
Multiscale finite element calculations in Python using SfePy (Robert Cimrman - 1 October, 2018)
Its source code is mostly (85\%) Python and relies on fast vectorized operations provided by the NumPy package
Link: https://arxiv.org/abs/1810.00674
====================================================
Hands-on Experience with Gaussian Processes (GPs): Implementing GPs in Python - I (Kshitij Tiwari - 6 September, 2018)
Several open source libraries spanning from Matlab [1], Python [2], R [3] etc., are already available for simple plug-and-use
Link: https://arxiv.org/abs/1809.01913
====================================================
A Developer-Friendly Library for Smart Home IoT Privacy-Preserving Traffic Obfuscation (Trisha Datta - 22 August, 2018)
Here, we present a Python library for IoT developers to easily integrate privacy-preserving traffic shaping into their products. Our library successfully preserves user privacy and requires approximately 4 KB/s overhead bandwidth for IoT devices with low send rates or high latency tolerances
Link: https://arxiv.org/abs/1808.07432
====================================================
SentencePiece: A simple and language independent subword tokenizer and detokenizer for Neural Text Processing (Taku Kudo - 19 August, 2018)
It provides open-source C++ and Python implementations for subword units. SentencePiece is available under the Apache 2 license at https://github.com/google/sentencepiece.
Link: https://arxiv.org/abs/1808.06226
====================================================
MARVIN: An Open Machine Learning Corpus and Environment for Automated Machine Learning Primitive Annotation and Execution (Chris A. Mattmann - 11 August, 2018)
MARVIN is a web-based application and associated back-end interface written in Python that enables composition of ML pipelines from hundreds of primitives from the world of Scikit-Learn, Keras, DL4J and other widely used libraries. MARVIN currently contains over 400 datasets and challenge problems from a wide array of ML domains including routine classification and regression to advanced video/image classification and remote sensing.
Link: https://arxiv.org/abs/1808.03753
====================================================
Sourcerer's Apprentice and the study of code snippet migration (Stephen Romansky - 31 July, 2018)
In this paper we put the Apprentice to work on empirical studies that demonstrate there is much sharing between StackOverflow code and Python modules and Python documentation that violates the licensing of the original Python modules and documentation: software snippets shared through StackOverflow are often being relicensed improperly to CC-BY-SA 3.0 without maintaining the appropriate attribution
Link: https://arxiv.org/abs/1808.00106
====================================================
PaPaS: A Portable, Lightweight, and Generic Framework for Parallel Parameter Studies (Eduardo Ponce - 25 July, 2018)
PaPaS is being developed in Python 3 with support for distributed parallelization using SSH, batch systems, and C++ MPI
Link: https://arxiv.org/abs/1807.09632
====================================================
Convolutional Recurrent Neural Networks for Glucose Prediction (Kezhi Li - 16 August, 2018)
The prediction algorithm is implemented on an Android mobile phone, with an execution time of $6$ms on a phone compared to an execution time of $780$ms on a laptop in Python.
Link: https://arxiv.org/abs/1807.03043
====================================================
Transparent, Efficient, and Robust Word Embedding Access with WOMBAT (Mark-Christoph MÃ¼ller - 2 July, 2018)
Code that uses WOMBAT for accessing word embeddings is not only cleaner, more readable, and easier to reuse, but also much more efficient than code using standard in-memory methods: a Python script using WOMBAT for evaluating seven large word embedding collections (8.7M embedding vectors in total) on a simple SemEval sentence similarity task involving 250 raw sentence pairs completes in under ten seconds end-to-end on a standard notebook computer.
Link: https://arxiv.org/abs/1807.00717
====================================================
On the Worst-Case Complexity of TimSort (Nicolas Auger - 31 May, 2018)
TimSort is an intriguing sorting algorithm designed in 2002 for Python, whose worst-case complexity was announced, but not proved until our recent preprint
Link: https://arxiv.org/abs/1805.08612
====================================================
StaQC: A Systematically Mined Question-Code Dataset from Stack Overflow (Ziyu Yao - 25 March, 2018)
On two manually annotated datasets in Python and SQL domain, our framework substantially outperforms heuristic methods with at least 15% higher F1 and accuracy
Link: https://arxiv.org/abs/1803.09371
====================================================
Sentiment Analysis of Comments on Rohingya Movement with Support Vector Machine (Hemayet Ahmed Chowdhury - 22 March, 2018)
The code is implemented in python and uses scikit-learn library. A dataset on Rohingya analysis is not currently available so we had to use our own data set of 2500 positive and 2500 negative comments
Link: https://arxiv.org/abs/1803.08790
====================================================
Evaluation of Dense 3D Reconstruction from 2D Face Images in the Wild (Zhen-Hua Feng - 20 April, 2018)
In addition to the dataset, we provide a standard protocol as well as a Python script for the evaluation. The competition is organised along with the 2018 13th IEEE Conference on Automatic Face & Gesture Recognition.
Link: https://arxiv.org/abs/1803.05536
====================================================
Vectorized Calculation of Short Circuit Currents Considering Distributed Generation - An Open Source Implementation of IEC 60909 (Leon Thurner - 5 February, 2018)
The method is implemented in the python based open source tool pandapower and validated against commercial software and examples from literature. The implementation presented in this paper is the first comprehensive implementation of the IEC 60909 standard which is available under an open source license
Link: https://arxiv.org/abs/1802.01502
====================================================
End2You -- The Imperial Toolkit for Multimodal Profiling by End-to-End Learning (Panagiotis Tzirakis - 4 February, 2018)
End2You is an open-source toolkit implemented in Python and is based on Tensorflow. To test our toolkit, we utilise the RECOLA database as was used in the AVEC 2016 challenge
Link: https://arxiv.org/abs/1802.01115
====================================================
Detecting Zones and Threat on 3D Body for Security in Airports using Deep Machine Learning (Abel Ag Rb Guimaraes - 9 February, 2018)
Using Python as a principal language, the preprocessed of the dataset images extracted features from 200 bodies using: intensity, intensity differences and local neighbourhood to detect, to produce segmentation regions and label those regions to be used as a truth in a training and test dataset. The regions are subsequently give to a CNN deep learning classifier to predict 17 classes (that represents the body zones): zone1, zone2, ... zone17 and zones with threat in a total of 34 zones. The analysis showed the results of the classifier an accuracy of 98.2863% and a loss of 0.091319, as well as an average of 100% for recall and precision.
Link: https://arxiv.org/abs/1802.00565
====================================================
In-RDBMS Hardware Acceleration of Advanced Analytics (Divya Mahajan - 18 September, 2018)
The accelerator implementation is generated for a User Defined Function (UDF), expressed as a part of an SQL query using a Python-embedded Domain-Specific Language (DSL). Results show that DAnA-enhanced PostgreSQL provides, on average, 8.3x end-to-end speedup for real datasets, with a maximum of 28.2x. Moreover, DAnA-enhanced PostgreSQL is, on average, 4.0x faster than the multi-threaded Apache MADLib running on Greenplum
Link: https://arxiv.org/abs/1801.06027
====================================================
Design and Performance Characterization of RADICAL-Pilot on Titan (Andre Merzky - 5 January, 2018)
We introduce RADICAL-Pilot (RP) as a portable, modular and extensible Python-based Pilot system. Specifically, we investigate RP's weak (strong) scaling properties up to 131K (65K) cores and 4096 (16384) 32 core tasks
Link: https://arxiv.org/abs/1801.01843
====================================================
Sockeye: A Toolkit for Neural Machine Translation (Felix Hieber - 1 June, 2018)
Written in Python and built on MXNet, the toolkit offers scalable training and inference for the three most prominent encoder-decoder architectures: attentional recurrent neural networks, self-attentional transformers, and fully convolutional networks. In this paper, we highlight Sockeye's features and benchmark it against other NMT toolkits on two language arcs from the 2017 Conference on Machine Translation (WMT): English-German and Latvian-English. The Sockeye toolkit is free software released under the Apache 2.0 license.
Link: https://arxiv.org/abs/1712.05690
====================================================
A critical analysis of string APIs: The case of Pharo (Damien Pollet - 29 November, 2017)
In this article, we first analyse the Pharo 4 String library, then contrast it with its Haskell, Java, Python, Ruby, and Rust counterparts
Link: https://arxiv.org/abs/1711.10713
====================================================
IKBT: solving closed-form Inverse Kinematics with Behavior Tree (Dianmu Zhang - 7 December, 2017)
The system successfully solved, generated a LaTex report, and generated a Python code template for 18 out of 19 example robots of 4-6 DOF
Link: https://arxiv.org/abs/1711.05412
====================================================
The implementation of a Deep Recurrent Neural Network Language Model on a Xilinx FPGA (Yufeng Hao - 16 November, 2017)
We design the DRNN language model with Python and Theano, train the model on a CPU platform, and deploy the model on a PYNQ board to validate the model with Jupyter notebook. Finally, we have found that the DRNN language model can be deployed on the embedded system smoothly and the Overlay accelerator with AXI Stream interface performs at 20 GOPS processing throughput, which constitutes a 70.5X and 2.75X speed up compared to the work in Ref.30 and Ref.31 respectively.
Link: https://arxiv.org/abs/1710.10296
====================================================
MEDOC: a Python wrapper to load MEDLINE into a local MySQL database (Emeric Dynomant - 18 October, 2017)
MEDOC (MEdline DOwnloading Contrivance) is a Python program designed to download data on an FTP and to load all extracted information into a local MySQL database. It took MEDOC 4 days and 17 hours to load the 26 million documents available on this server onto a standard computer
Link: https://arxiv.org/abs/1710.06590
====================================================
pandapower - an Open Source Python Tool for Convenient Modeling, Analysis and Optimization of Electric Power Systems (Leon Thurner - 18 April, 2018)
pandapower is a Python based, BSD-licensed power system analysis tool aimed at automation of static and quasi-static analysis and optimization of balanced power systems. It provides power flow, optimal power flow, state estimation, topological graph searches and short circuit calculations according to IEC 60909
Link: https://arxiv.org/abs/1709.06743
====================================================
Data-driven Job Search Engine Using Skills and Company Attribute Filters (Rohit Muthyala - 15 September, 2017)
However, they have severely limited filters relating to skill sets such as C++, Python, and Java and company related attributes such as employee size, revenue, technographics and micro-industries. The high level implementation of the framework is described as follows: 1) Collect job postings data in the United States, 2) Extract meaningful tokens from the postings data using ETL pipelines, 3) Normalize the data set to link company names to their specific company websites, 4) Extract and ranking the skill sets, 5) Link the company names and websites to their respective company level attributes with the EVERSTRING Company API, 6) Run user-specific search queries on the database to identify relevant job postings and 7) Rank the job search results
Link: https://arxiv.org/abs/1709.05050
====================================================
Streaming Graph Challenge: Stochastic Block Partition (Edward Kao - 25 August, 2017)
This paper describes various aspects of the challenge including: (1) the data sets and streaming graph generator, (2) the baseline partition algorithm with pseudocode, (3) an argument for the correctness of parallelizing the Bayesian inference, (4) different parallel computation strategies such as node-based parallelism and matrix-based parallelism, (5) evaluation metrics for partition correctness and computational requirements, (6) preliminary timing of a Python-based demonstration code and the open source C++ code, and (7) considerations for partitioning the graph in streaming fashion
Link: https://arxiv.org/abs/1708.07883
====================================================
Preconditioned Spectral Clustering for Stochastic Block Partition Streaming Graph Challenge (David Zhuzhunashvili - 21 August, 2017)
For static graph partitioning, 10-20 iterations of LOBPCG without preconditioning result in ~10x error reduction, enough to achieve 100% correctness for all Challenge datasets with known truth partitions, e.g., for graphs with 5K/.1M (50K/1M) Vertices/Edges in 2 (7) seconds, compared to over 5,000 (30,000) seconds needed by the baseline Python code. Our Python code 100% correctly determines 98 (160) clusters from the Challenge static graphs with 0.5M (2M) vertices in 270 (1,700) seconds using 10GB (50GB) of memory. Nevertheless, in 10-stage streaming comparison with the base code for the 5K graph, the quality of our clusters is similar or better starting at stage 4 (7) for emerging edging (snowballing) streaming, while the computations are over 100-1000 faster.
Link: https://arxiv.org/abs/1708.07481
====================================================
TensorFlow Enabled Genetic Programming (Kai Staats - 10 August, 2017)
The open source, Python Karoo GP is employed for a series of 190 tests across 6 platforms, with real-world datasets ranging from 18 to 5.5M data points. A dataset composed of 90,000 data points demonstrates a single vector/TensorFlow CPU core performing 875x better than 40 scalar/Sympy CPU cores. And a dataset containing 5.5M data points sees GPU configurations out-performing CPU configurations on average by 1.3x.
Link: https://arxiv.org/abs/1708.03157
====================================================
TensorLayer: A Versatile Library for Efficient Deep Learning Development (Hao Dong - 3 August, 2017)
TensorLayer is a versatile Python library that aims at helping researchers and engineers efficiently develop deep learning systems. TensorLayer was released in September 2016 on GitHub, and has helped people from academia and industry develop real-world applications of deep learning.
Link: https://arxiv.org/abs/1707.08551
====================================================
Adaptive Modular Exponentiation Methods v.s. Python's Power Function (Shiyu Ji - 6 July, 2017)
Evaluation results show that compared to the industry-standard efficient implementations of modular power function in CPython and Pypy, our algorithms can reduce 1-5% computing time for exponents with more than 3072 bits.
Link: https://arxiv.org/abs/1707.01898
====================================================
Function Assistant: A Tool for NL Querying of APIs (Kyle Richardson - 15 September, 2017)
To explore this last feature, we perform new experiments on 27 well-known Python projects hosted on Github.
Link: https://arxiv.org/abs/1706.00468
====================================================
NMTPY: A Flexible Toolkit for Advanced Neural Machine Translation Systems (Ozan Caglayan - 1 June, 2017)
In this paper, we present nmtpy, a flexible Python toolkit based on Theano for training Neural Machine Translation and other neural sequence-to-sequence architectures. nmtpy has been used for LIUM's top-ranked submissions to WMT Multimodal Machine Translation and News Translation tasks in 2016 and 2017.
Link: https://arxiv.org/abs/1706.00457
====================================================
Recognizing Handwritten Source Code (Qiyu Zhi - 31 May, 2017)
We collect and make publicly available a dataset of handwritten Python code samples from 15 participants and we characterize the typical recognition errors for this handwritten Python source code when using a state-of-the-art handwriting recognition tool. Our experiment on the collected dataset shows an 8.6% word error rate and a 3.6% character error rate which outperforms standard handwriting recognition systems and compares favorably to typing source code on virtual keyboards.
Link: https://arxiv.org/abs/1706.00069
====================================================
ParlAI: A Dialog Research Software Platform (Alexander H. Miller - 8 March, 2018)
We introduce ParlAI (pronounced "par-lay"), an open-source software platform for dialog research implemented in Python, available at http://parl.ai. Over 20 tasks are supported in the first release, including popular datasets such as SQuAD, bAbI tasks, MCTest, WikiQA, QACNN, QADailyMail, CBT, bAbI Dialog, Ubuntu, OpenSubtitles and VQA
Link: https://arxiv.org/abs/1705.06476
====================================================
A Finite State and Rule-based Akshara to Prosodeme (A2P) Converter in Hindi (Somnath Roy - 4 May, 2017)
A software module is implemented in Python. The testing of the software for syllabification, syllable labeling, schwa deletion and prosodic labeling yield an accuracy of more than 99% on a lexicon of size 28664 words.
Link: https://arxiv.org/abs/1705.01833
====================================================
HiFrames: High Performance Data Frames in a Scripting Language (Ehsan Totoni - 7 April, 2017)
However, existing data frame solutions are either not distributed (e.g., Pandas in Python) and therefore have limited scalability, or they are not tightly integrated with array computations (e.g., Spark SQL). HiFrames is 3.6x to 70x faster than Spark SQL for basic relational operations, and can be up to 20,000x faster for advanced analytics operations, such as weighted moving averages (WMA), that the map-reduce paradigm cannot handle effectively. HiFrames is also 5x faster than Spark SQL for TPCx-BB Q26 on 64 nodes of Cori supercomputer.
Link: https://arxiv.org/abs/1704.02341
====================================================
Transition Watchpoints: Teaching Old Debuggers New Tricks (Kapil Arya - 31 March, 2017)
The validity of this approach was tested by developing four personalities (for GDB, MATLAB, Perl, and Python), with each personality typically requiring just 100 lines of code.
Link: https://arxiv.org/abs/1703.10864
====================================================
The NLTK FrameNet API: Designing for Discoverability with a Rich Linguistic Resource (Nathan Schneider - 22 July, 2017)
A new Python API, integrated within the NLTK suite, offers access to the FrameNet 1.7 lexical database
Link: https://arxiv.org/abs/1703.07438
====================================================
Learning Python Code Suggestion with a Sparse Pointer Network (Avishkar Bhoopchand - 24 November, 2016)
We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.
Link: https://arxiv.org/abs/1611.08307
====================================================
Benchmarking Web-testing - Selenium versus Watir and the Choice of Programming Language and Browser (Miikka Kuutila - 2 November, 2016)
We studied 5 programming language bindings (C#, Java, Python, and Ruby for Selenium, while Watir supports Ruby only) and 4 browsers (Google Chrome, Internet Explorer, Mozilla Firefox and Opera). The effect size of the difference between the slowest and fastest configuration was very high (Cohens d=41.5, 91% increase in execution time)
Link: https://arxiv.org/abs/1611.00578
====================================================
An Analysis of Introductory Programming Courses at UK Universities (Ellen Murphy - 31 March, 2017)
Knowledge: The results in this first UK survey indicate a dominance of Java at a time when universities are still generally teaching students who are new to programming (and computer science), despite the fact that Python is perceived, by the same respondents, to be both easier to teach as well as to learn. Grounding: We compare the results of this survey with a related survey conducted since 2010 (as well as earlier surveys from 2001 and 2003) in Australia and New Zealand
Link: https://arxiv.org/abs/1609.06622
====================================================
Imbalanced-learn: A Python Toolbox to Tackle the Curse of Imbalanced Datasets in Machine Learning (Guillaume Lemaitre - 21 September, 2016)
Imbalanced-learn is an open-source python toolbox aiming at providing a wide range of methods to cope with the problem of imbalanced dataset frequently encountered in machine learning and pattern recognition. The implemented state-of-the-art methods can be categorized into 4 groups: (i) under-sampling, (ii) over-sampling, (iii) combination of over- and under-sampling, and (iv) ensemble learning methods
Link: https://arxiv.org/abs/1609.06570
====================================================
Forward-Mode Automatic Differentiation in Julia (Jarrett Revels - 26 July, 2016)
In our numerical experiments, we demonstrate that for nontrivially large dimensions, ForwardDiff's gradient computations can be faster than a reverse-mode implementation from the Python-based autograd package. According to our usage statistics, 41 unique repositories on GitHub depend on ForwardDiff, with users from diverse fields such as astronomy, optimization, finite element analysis, and statistics.
Link: https://arxiv.org/abs/1607.07892
====================================================
8th European Conference on Python in Science (EuroSciPy 2015) (Nelle Varoquaux - 13 July, 2016)
The 8th edition of the European Conference on Python in Science, EuroSciPy was held for the second time in the beautiful city of Cambridge, UK from August, 26th to 29th, 2014. More than 200 participants, both from academia and industry, attended the conference.
Link: https://arxiv.org/abs/1607.03971
====================================================
Massively parallel implementation in Python of a pseudo-spectral DNS code for turbulent flows (Mikael Mortensen - 1 July, 2016)
In this work a \textasciitilde{}100 line standard scientific Python DNS code is described that nearly matches the performance of pure C for thousands of processors and billions of unknowns
Link: https://arxiv.org/abs/1607.00850
====================================================
Using the pyMIC Offload Module in PyFR (Michael Klemm - 1 July, 2016)
In this paper we will describe how the Python Offload Infrastructure for the Intel Many Integrated Core Architecture (pyMIC) was used to enable PyFR to run with near native performance on the Intel Xeon Phi coprocessor. Benchmark results show that for a standard cylinder flow problem PyFR with pyMIC is able achieve 240 GFLOP/s of sustained double precision floating point performance; for a 1.85 times improvement over PyFR with C/OpenMP on a 12 core Intel Xeon E5-2697 v2 CPU.
Link: https://arxiv.org/abs/1607.00844
====================================================
PSDVec: a Toolbox for Incremental and Scalable Word Embedding (Shaohua Li - 10 June, 2016)
PSDVec is a Python/Perl toolbox that learns word embeddings, i.e. On 9 word similarity/analogy benchmark sets and 2 Natural Language Processing (NLP) tasks, PSDVec produces embeddings that has the best average performance among popular word embedding tools
Link: https://arxiv.org/abs/1606.03192
====================================================
Theano: A Python framework for fast computation of mathematical expressions ( The Theano Development Team - 9 May, 2016)
Theano is a Python library that allows to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. Theano is being actively and continuously developed since 2008, multiple frameworks have been built on top of it and it has been used to produce many state-of-the-art machine learning models.
Link: https://arxiv.org/abs/1605.02688
====================================================
Science Concierge: A fast content-based recommendation system for scientific publications (Titipat Achakulvisut - 11 May, 2016)
Here, we develop an algorithm, and an accompanying Python library, that implements a recommendation system based on the content of articles. We tested the library on 15K posters from the Society of Neuroscience Conference 2015
Link: https://arxiv.org/abs/1604.01070
====================================================
Classification-based Financial Markets Prediction using Deep Neural Networks (Matthew Dixon - 13 June, 2017)
All results in this paper are generated using a C++ implementation on the Intel Xeon Phi co-processor which is 11.4x faster than the serial version and a Python strategy backtesting environment both of which are available as open source code written by the authors.
Link: https://arxiv.org/abs/1603.08604
====================================================
Big Data Spark Solution for Functional Magnetic Resonance Imaging (Saman Sarraf - 22 March, 2016)
The final results revealed our Spark (PySpark) based solution improved the performance (in terms of processing time) around 4 times on a single compared to the previous work developed in Python.
Link: https://arxiv.org/abs/1603.07064
====================================================
megaman: Manifold Learning with Millions of points (James McQueen - 8 March, 2016)
Here we present a Python package that implements a variety of manifold learning algorithms in a modular and scalable fashion, using fast approximate neighbors searches and fast sparse eigendecompositions. In benchmarks, even on a single-core desktop computer, our code embeds millions of data points in minutes, and takes just 200 minutes to embed the main sample of galaxy spectra from the Sloan Digital Sky Survey --- consisting of 0.6 million samples in 3750-dimensions --- a task which has not previously been possible.
Link: https://arxiv.org/abs/1603.02763
====================================================
Oasis: a high-level/high-performance open source Navier-Stokes solver (Mikael Mortensen - 11 February, 2016)
Through the high-level Python interface the user is placed in complete control of every aspect of the solver. Fluids, vol 11(4), p. 964]
Link: https://arxiv.org/abs/1602.03643
====================================================
Using Pilot Systems to Execute Many Task Workloads on Supercomputers (Andre Merzky - 30 July, 2018)
RADICAL-Pilot (RP) is a modular and extensible Python-based pilot system. RP is capable of spawning more than 100 tasks/second and supports the steady-state execution of up to 16K concurrent tasks
Link: https://arxiv.org/abs/1512.08194
====================================================
Probabilistic Programming with Gaussian Process Memoization (Ulrich Schaechtle - 5 January, 2016)
All applications share a single 50-line Python library and require fewer than 20 lines of probabilistic code each.
Link: https://arxiv.org/abs/1512.05665
====================================================
Recognition of Brain Waves of Left and Right Hand Movement Imagery with Portable Electroencephalographs (Zhen Li - 28 September, 2015)
Finally, we design a plane program in Python where a plane can be controlled to go left or right when users imagine their left or right hand to move. 8 subjects are tested and all of them can control the plane flexibly which reveals that our model can be applied to control hardware which is useful for disabled individuals and normal people.
Link: https://arxiv.org/abs/1509.08257
====================================================
Prediction of Brain States of Concentration and Relaxation in Real Time with Portable Electroencephalographs (Zhen Li - 25 September, 2015)
Finally, we design a plane program in Python where a plane can be controlled to go up or down when users concentrate or relax. The SVM model and the Feedforward Neural Network model have both been tested by 12 subjects and they give an evaluation ranging from 1 to 10 points. The former gets 7.58 points while the latter gets 8.83, which proves that the time delay problem is improved once more.
Link: https://arxiv.org/abs/1509.07642
====================================================
Teaching Python programming with automatic assessment and feedback provision (Hans Fangohr - 11 September, 2015)
We describe a method of automatic feedback provision for students learning programming and computational methods in Python. We have implemented, used and refined this system since 2009 for growing student numbers, and summarise the design and experience of using it. We include an evaluation of the system and data from using it in a class of 425 students.
Link: https://arxiv.org/abs/1509.03556
====================================================
Measuring an Artificial Intelligence System's Performance on a Verbal IQ Test For Young Children (Stellan Ohlsson - 11 September, 2015)
The test questions (e.g., "Why do we shake hands?") were translated into ConceptNet 4 inputs using a combination of the simple natural language processing tools that come with ConceptNet together with short Python programs that we wrote. The ConceptNet system scored a WPPSI-III VIQ that is average for a four-year-old child, but below average for 5 to 7 year-olds
Link: https://arxiv.org/abs/1509.03390
====================================================
Precise, Dynamic Information Flow for Database-Backed Applications (Jean Yang - 23 April, 2016)
We implement these ideas in Jacqueline, a Python web framework, and demonstrate feasibility through three application case studies: a course manager, a health record system, and a conference management system used to run an academic workshop. We show that in comparison to traditional applications with hand-coded policy checks, Jacqueline applications have 1) a smaller trusted computing base, 2) fewer lines of policy code, and 2) reasonable, often negligible, additional overheads.
Link: https://arxiv.org/abs/1507.03513
====================================================
Speech Controlled Quadruped (Devashish Kulkarni - 24 June, 2015)
The interface between a human and the robot is generated through Python programming and Eclipse software and it is implemented by using Bluetooth module HC 06.
Link: https://arxiv.org/abs/1506.07413
====================================================
Does Gaming Help Improve Cognitive Skills? (Mohnish Chakravarti - 6 April, 2015)
For this experiment, a few games that tested the logical reasoning and critical analysis skills under a given time constraint were coded in Python using Pygame and were played by a group of 7th grade students. In the group of students that played the games, an average improvement of 62.19% was seen (p < 0.0001). The group that did not play the games only improved their performance by an average of 18.51% (p = 0.0882).
Link: https://arxiv.org/abs/1504.01665
====================================================
Fine-grained Language Composition: A Case Study (Edd Barrett - 11 July, 2016)
In this paper we introduce a novel fine-grained syntactic composition of PHP and Python which allows users to embed each language inside the other, including referencing variables across languages. We show that good solutions can be found to the design challenges; and that the resulting implementation imposes an acceptable performance overhead of, at most, 2.6x.
Link: https://arxiv.org/abs/1503.08623
====================================================
Proceedings of the 7th European Conference on Python in Science (EuroSciPy 2014) (Pierre de Buyl - 22 December, 2014)
These are the proceedings of the 7th European Conference on Python in Science, EuroSciPy 2014, that was held in Cambridge, UK (27-30 August 2014).
Link: https://arxiv.org/abs/1412.7030
====================================================
SClib, a hack for straightforward embedded C functions in Python (Esteban Fuentes - 19 December, 2014)
In the first set of applications we use SClib to write a port to Python of a SchrÃ¶dinger equation solver that has been extensively used the literature, the resulting script presents a speed-up of about 150x with respect to the original one
Link: https://arxiv.org/abs/1412.6395
====================================================
SPySort: Neuronal Spike Sorting with Python (Christophe Pouzat - 19 December, 2014)
Surprisingly enough - or sadly enough, depending on one's view point -, recoding our now 15 years old procedure into Python was the occasion of major methodological improvements.
Link: https://arxiv.org/abs/1412.6383
====================================================
An Abstract Interpretation-based Model of Tracing Just-In-Time Compilation (Stefano Dissegna - 28 October, 2015)
Tracing just-in-time compilation is a popular compilation technique for the efficient implementation of dynamic languages, which is commonly used for JavaScript, Python and PHP. We show that our framework is more general than the model of tracing compilation introduced by Guo and Palsberg [2011] based on operational bisimulations.
Link: https://arxiv.org/abs/1411.7839
====================================================
Approaches to Interpreter Composition (Edd Barrett - 19 May, 2015)
In this paper, we compose six different Python and Prolog VMs into 4 pairwise compositions: one using C interpreters; one running on the JVM; one using meta-tracing interpreters; and one using a C interpreter and a meta-tracing interpreter
Link: https://arxiv.org/abs/1409.0757
====================================================
A Comparative Study of Programming Languages in Rosetta Code (Sebastian Nanz - 22 January, 2015)
Our study is based on 7087 solution programs corresponding to 745 tasks in 8 widely used languages representing the major programming paradigms (procedural: C and Go; object-oriented: C# and Java; functional: F# and Haskell; scripting: Python and Ruby)
Link: https://arxiv.org/abs/1409.0252
====================================================
Caffe: Convolutional Architecture for Fast Feature Embedding (Yangqing Jia - 20 June, 2014)
The framework is a BSD-licensed C++ library with Python and MATLAB bindings for training and deploying general-purpose convolutional neural networks and other deep models efficiently on commodity architectures. Caffe fits industry and internet-scale media needs by CUDA GPU computation, processing over 40 million images a day on a single K40 or Titan GPU ($\approx$ 2.5 ms per image)
Link: https://arxiv.org/abs/1408.5093
====================================================
Clingo = ASP + Control: Preliminary Report (Martin Gebser - 14 May, 2014)
clingo 4 accomplishes this by complementing ASP's declarative input language by control capacities expressed via the embedded scripting languages lua and python. On the declarative side, clingo 4 offers a new directive that allows for structuring logic programs into named and parameterizable subprograms. By strictly separating logic and control programs, clingo 4 also abolishes the need for dedicated systems for incremental and reactive reasoning, like iclingo and oclingo, respectively, and its flexibility goes well beyond the advanced yet still rigid solving processes of the latter.
Link: https://arxiv.org/abs/1405.3694
====================================================
Proceedings of the 6th European Conference on Python in Science (EuroSciPy 2013) (Pierre de Buyl - 1 May, 2014)
These are the proceedings of the 6th European Conference on Python in Science, EuroSciPy 2013, that was held in Brussels (21-25 August 2013).
Link: https://arxiv.org/abs/1405.0166
====================================================
Performance of Python runtimes on a non-numeric scientific code (Riccardo Murri - 29 April, 2014)
The purpose of this experiment was to assess the maturity of alternative Python runtimes, in terms of: compatibility with the language as implemented in CPython 2.7, and performance speedup. This paper compares the results and experiences from running FatGHol with different Python runtimes: CPython 2.7.5, PyPy 2.1, Cython 0.19, Numba 0.11, Nuitka 0.4.4 and Falcon.
Link: https://arxiv.org/abs/1404.6388
====================================================
Integrated Data Acquisition, Storage, Retrieval and Processing Using the COMPASS DataBase (CDB) (J. Urban - 31 March, 2014)
CDB is implemented in Python language; bindings for Java, C/C++, IDL and Matlab are provided. Independent data acquisitions systems as well as nodes managed by FireSignal [2] are all integrated using CDB
Link: https://arxiv.org/abs/1403.7928
====================================================
SNSAPI: A Cross-Platform Middleware for Rapid Deployment of Decentralized Social Networks (Pili Hu - 18 March, 2014)
In this paper, we present the design, implementation and our year-long maintenance experience of SNSAPI, a Python-based middleware which unifies the interfaces and data structures of heterogeneous Social Networking Services (SNS). Via 20 parameterized experiments on PlanetLab, we have found that the empirical measurement results match reasonably with the performance predicted by our analytical model.
Link: https://arxiv.org/abs/1403.4482
====================================================
Computing Scalable Multivariate Glocal Invariants of Large (Brain-) Graphs (Disa Mhembere - 16 December, 2013)
Our custom open-source Python package serves as a back-end to a Web-service that we have created to enable researchers to upload graphs, and download the corresponding invariants in a number of different formats. As a demonstration, we run our code on 120 brain-graphs, each with approximately 16M vertices and up to 90M edges.
Link: https://arxiv.org/abs/1312.4318
====================================================
Distributed Multiscale Computing with MUSCLE 2, the Multiscale Coupling Library and Environment (Joris Borgdorff - 22 November, 2013)
This multiscale component-based execution environment has a simple to use Java, C++, C, Python and Fortran API, compatible with MPI, OpenMP and threading codes. We demonstrate its local and distributed computing capabilities and compare its performance to MUSCLE 1, file copy, MPI, MPWide, and GridFTP. The local throughput of MPI is about two times higher, so very tightly coupled code should use MPI as a single submodel of MUSCLE 2; the distributed performance of GridFTP is lower, especially for small messages. We test the performance of a canal system model with MUSCLE 2, where it introduces an overhead as small as 5% compared to MPI.
Link: https://arxiv.org/abs/1311.5740
====================================================
B(eo)W(u)LF: Facilitating recurrence analysis on multi-level language (A. Paxton - 12 August, 2013)
While we do not necessarily claim to be the first to use methods along these lines, we have created a series of tools utilizing Python and MATLAB to enable such discourse analyses and demonstrate them using 319 lines of the Old English epic poem, Beowulf, translated into modern English.
Link: https://arxiv.org/abs/1308.2696
====================================================
mlpy: Machine Learning Python (Davide Albanese - 1 March, 2012)
mlpy is multiplatform, it works with Python 2 and 3 and it is distributed under GPL3 at the website http://mlpy.fbk.eu.
Link: https://arxiv.org/abs/1202.6548
====================================================
Managing Communication Latency-Hiding at Runtime for Parallel Programming Languages and Libraries (Mads Ruben Burgdorff Kristensen - 18 January, 2012)
We implement a heuristic of this model in DistNumPy, an auto-parallelizing version of numerical Python that allows sequential NumPy programs to run on distributed memory architectures. The results shows that our model reduces the time spent on waiting for communication as much as 27 times, from a maximum of 54% to only 2% of the total execution time, in a stencil application.
Link: https://arxiv.org/abs/1201.3804
====================================================
Scikit-learn: Machine Learning in Python (Fabian Pedregosa - 5 June, 2018)
Scikit-learn is a Python module integrating a wide range of state-of-the-art machine learning algorithms for medium-scale supervised and unsupervised problems
Link: https://arxiv.org/abs/1201.0490
====================================================
A Multiple-Choice Test Recognition System based on the Gamera Framework (Andrea Spadaccini - 19 May, 2011)
JECT-OMR was implemented using the Python programming language, and leverages the power of the Gamera framework in order to accomplish its task. The system exhibits an accuracy of over 99% in the recognition of marked and non-marked squares representing answers, thus making it suitable for real world applications
Link: https://arxiv.org/abs/1105.3834
====================================================
Use of Python and Phoenix-M Interface in Robotics (Shubham Chakraborty - 31 December, 2010)
In this paper I will show how to use Python programming with a computer interface such as Phoenix-M 1 to drive simple robots
Link: https://arxiv.org/abs/1101.0245
====================================================
How applicable is Python as first computer language for teaching programming in a pre-university educational environment, from a teacher's point of view? (Fotis Georgatos - 9 September, 2008)
This is done by examining computer language evolution history, related scientific background work, the existing educational research on computer languages and Python's experimental application in higher secondary education in Greece, during first half of year 2002
Link: https://arxiv.org/abs/0809.1437
====================================================
Plat_Forms -- a contest: The web development platform comparison (Lutz Prechelt - 6 May, 2008)
"Plat_Forms" is a competition in which top-class teams of three programmers compete to implement the same requirements for a web-based system within 30 hours, each team using a different technology platform (Java EE, .NET, PHP, Perl, Python, or Ruby on Rails)
Link: https://arxiv.org/abs/0805.0650
====================================================
DMTCP: Transparent Checkpointing for Cluster Computations and the Desktop (Jason Ansel - 24 February, 2009)
Checkpointing and restart is demonstrated for a wide range of over 20 well known applications, including MATLAB, Python, TightVNC, MPICH2, OpenMPI, and runCMS. RunCMS runs as a 680 MB image in memory that includes 540 dynamic libraries, and is used for the CMS experiment of the Large Hadron Collider at CERN. On 128 distributed cores (32 nodes), checkpoint and restart times are typically 2 seconds, with negligible run-time overhead. Typical checkpoint times are reduced to 0.2 seconds when using forked checkpointing
Link: https://arxiv.org/abs/cs/0701037
====================================================
An Anthological Review of Research Utilizing MontyLingua, a Python-Based End-to-End Text Processor (Maurice HT Ling - 21 November, 2006)
MontyLingua, an integral part of ConceptNet which is currently the largest commonsense knowledge base, is an English text processor developed using Python programming language in MIT Media Lab. This paper aims to review the use of and roles played by MontyLingua and its components in research work published in 19 articles between October 2004 and August 2006
Link: https://arxiv.org/abs/cs/0611113
====================================================
DIRAC - Distributed Infrastructure with Remote Agent Control (N. Brook - 12 June, 2003)
Locally installed software agents implemented in Python monitor the local batch queue, interrogate the production database for any outstanding production requests using the XML-RPC protocol and initiate the job submission. DIRAC has been successfully installed at 18 collaborating institutes, including the DataGRID, and has been used in recent Physics Data Challenges
Link: https://arxiv.org/abs/cs/0306060
====================================================
Modernising the ESRF control system with GNU/Linux (A. Gotz - 9 November, 2001)
The new control system will be based on compact PCI, 100 MHz Ethernet, Linux, Windows, Solaris, CORBA/IIOP, C++, Java and Python
Link: https://arxiv.org/abs/cs/0111033
====================================================
GPdoemd: a python package for design of experiments for model discrimination (Simon Olofsson - 5 October, 2018)
GPdoemd is an open-source python package for design of experiments for model discrimination that uses Gaussian process surrogate models to approximate and maximise the divergence between marginal predictive distributions of rival mechanistic models
Link: https://arxiv.org/abs/1810.02561
====================================================
Computational and informatics advances for reproducible data analysis in neuroimaging (Russell A. Poldrack - 24 September, 2018)
We outline how the open-source Python language has provided the basis for a data science platform that enables reproducible data analysis and visualization
Link: https://arxiv.org/abs/1809.10024
====================================================
Tangent: Automatic differentiation using source-code transformation for dynamically typed array programming (Bart van MerriÃ«nboer - 26 September, 2018)
The need to efficiently calculate first- and higher-order derivatives of increasingly complex models expressed in Python has stressed or exceeded the capabilities of available tools. We implement and demonstrate these ideas in the Tangent software library for Python, the first AD framework for a dynamic language that uses SCT.
Link: https://arxiv.org/abs/1809.09569
====================================================
SCOPE: C3SR Systems Characterization and Benchmarking Framework (Carl Pearson - 18 September, 2018)
The Scope project aims to lower the barrier to entry for developing performance benchmarks by providing a software architecture that allows benchmarks to be developed independently, by providing useful C/C++ abstractions and utilities, and by providing a Python package for generating publication-quality plots of resulting measurements.
Link: https://arxiv.org/abs/1809.08311
====================================================
DPPy: Sampling Determinantal Point Processes with Python (Guillaume Gautier - 19 September, 2018)
Sampling from DPPs is a challenge and therefore we present DPPy, a Python toolbox that gathers known exact and approximate sampling algorithms
Link: https://arxiv.org/abs/1809.07258
====================================================
Random problems with R (Kellie Ottoboni - 19 September, 2018)
That is the strategy taken in Python's numpy.random.randint() function, among others. Example source code in Python is available at https://github.com/statlab/cryptorandom/blob/master/cryptorandom/cryptorandom.py (see functions getrandbits() and randbelow_from_randbits()).
Link: https://arxiv.org/abs/1809.06520
====================================================
Real Time System for Facial Analysis (Janne Tommola - 14 September, 2018)
The python code for executing the system uses common libraries--keras/tensorflow, opencv and dlib--and is available for download.
Link: https://arxiv.org/abs/1809.05474
====================================================
Leabra7: a Python package for modeling recurrent, biologically-realistic neural networks (C. Daniel Greenidge - 19 September, 2018)
We present Leabra7, a complementary Python library that implements these same algorithms. Leabra7 is developed and distributed using modern software development principles, and integrates tightly with Python's scientific stack
Link: https://arxiv.org/abs/1809.04166
====================================================
URBAN-i: From urban scenes to mapping slums, transport modes, and pedestrians in cities using deep learning and computer vision (Mohamed R. Ibrahim - 10 September, 2018)
The algorithms of the URBAN-i model are fully-coded in Python programming with the pre-trained deep learning models to be used as a tool for mapping and city modelling in the various corner of the globe, including informal settlements and slum regions.
Link: https://arxiv.org/abs/1809.03609
====================================================
Language Interoperability in Control Network Programming (Kostadin Kratchanov - 28 August, 2018)
Most popular and interesting programming languages have been addressed: Python, Java, and C
Link: https://arxiv.org/abs/1809.00976
====================================================
Performing energy modelling exercises in a transparent way the issue of data quality in power plant databases (Fabian Gotzens - 29 August, 2018)
Here, we introduce the python-based "powerplantmatching" (PPM), an open source toolset for cleaning, standardizing and combining multiple power plant databases
Link: https://arxiv.org/abs/1809.00974
====================================================
Improve Blockchain Performance using Graph Data Structure and Parallel Mining (Jia Kan - 31 August, 2018)
Researchers simulated blockchain with graph structure and parallel mining through python, and suggested the conceptual new graph model which can improve both capacity and performance.
Link: https://arxiv.org/abs/1808.10810
====================================================
PythonRobotics: a Python code collection of robotics algorithms (Atsushi Sakai - 7 September, 2018)
This is a collection of robotics algorithms implemented in the Python programming language. Each sample code is written in Python3 and only depends on some standard modules for readability and ease of use
Link: https://arxiv.org/abs/1808.10703
====================================================
APES: a Python toolbox for simulating reinforcement learning environments (Aqeel Labash - 31 August, 2018)
To ease the design and simulation of such environments this work introduces $\texttt{APES}$, a highly customizable and open source package in Python to create 2D grid-world environments for reinforcement learning problems
Link: https://arxiv.org/abs/1808.10692
====================================================
PyDraw: a GUI drawing generator based on Tkinter and its design concept (Jinwei Lin - 27 August, 2018)
Python, as a popular programming language in recent years, has not been realized in GUI design. Tkinter has the advantage of native support for Python, but there are too few visual GUI generators supporting Tkinter
Link: https://arxiv.org/abs/1808.09094
====================================================
Dr. Tux: A Question Answering System for Ubuntu users (Bijil Abraham Philip - 25 August, 2018)
The prototype was implemented in Python and uses NLTK and CoreNLP tools for Natural Language Processing
Link: https://arxiv.org/abs/1808.08357
====================================================
An Automata-based Abstract Semantics for String Manipulation Languages (Vincenzo Arceri - 17 August, 2018)
In recent years, dynamic languages, such as JavaScript or Python, have faced an important increment of usage in a wide range of fields and applications
Link: https://arxiv.org/abs/1808.07827
====================================================
A Scalable Data Science Platform for Healthcare and Precision Medicine Research (Jacob McPadden - 14 August, 2018)
Data acquisition workflows for Apache Storm and NiFi were developed in Java and Python to capture patient monitoring and laboratory data for downstream analytics
Link: https://arxiv.org/abs/1808.04849
====================================================
DNA-based chemical compiler (Shalin Shah - 14 August, 2018)
In this work, we have made an attempt to create trans-compiler which can take python like code as input and gives CAIN supported chemical reactions file as output
Link: https://arxiv.org/abs/1808.04790
====================================================
NL4Py: Agent-Based Modeling in Python with Parallelizable NetLogo Workspaces (Chathika Gunaratne - 20 August, 2018)
Spurred on by the increasing availability of open-source computation and machine learning libraries on the Python package index, there is an increasing demand for such rapid, parallel execution of agent-based models through Python. NetLogo, being the language of choice for a majority of agent-based modeling driven research projects, requires an integration to Python for researchers looking to perform statistical analyses of agent-based model output using these libraries
Link: https://arxiv.org/abs/1808.03292
====================================================
Cinematic Visualization of Multiresolution Data: Ytini for Adaptive Mesh Refinement in Houdini (Kalina Borkiewicz - 8 August, 2018)
We summarize a tutorial available on the website www.ytini.com, which includes sample data downloads, Python code, and various other resources to simplify the process of importing and rendering multiresolution data.
Link: https://arxiv.org/abs/1808.02860
====================================================
pySDC - Prototyping spectral deferred corrections (Robert Speck - 8 August, 2018)
In this paper we present the Python framework pySDC for solving collocation problems with spectral deferred correction methods (SDC) and their time-parallel variant PFASST, the parallel full approximation scheme in space and time
Link: https://arxiv.org/abs/1808.02731
====================================================
Devito: an embedded domain-specific language for finite differences and geophysical exploration (Mathias Louboutin - 6 August, 2018)
By embedding a domain-specific language within Python and making heavy use of SymPy, a symbolic mathematics library, we make it possible to develop finite difference simulators quickly using a syntax that strongly resembles the mathematics
Link: https://arxiv.org/abs/1808.01995
====================================================
NIMFA: A Python Library for Nonnegative Matrix Factorization (Marinka Zitnik - 6 August, 2018)
NIMFA is an open-source Python library that provides a unified interface to nonnegative matrix factorization algorithms. It includes implementations of state-of-the-art factorization methods, initialization approaches, and quality scoring
Link: https://arxiv.org/abs/1808.01743
====================================================
Code Shrew: Software platform for teaching programming through drawings and animations (Ludwik Trammer - 8 August, 2018)
The programming language has a straightforward syntax based on Python, with additions that enable easy drawing and animating using object-oriented code
Link: https://arxiv.org/abs/1808.01100
====================================================
Debugging Native Extensions of Dynamic Languages (Jacob Kreindl - 2 August, 2018)
Many dynamic programming languages such as Ruby and Python enable developers to use so called native extensions, code implemented in typically statically compiled languages like C and C++
Link: https://arxiv.org/abs/1808.00823
====================================================
DCASE 2018 Challenge Surrey Cross-Task convolutional neural network baseline (Qiuqiang Kong - 29 September, 2018)
We released the Python source code of the baseline systems under the MIT license for further research.
Link: https://arxiv.org/abs/1808.00773
====================================================
GuiTeNet: A graphical user interface for tensor networks (Lisa Sahlmann - 30 July, 2018)
GuiTeNet visualizes the current network, and instantly generates Python/NumPy source code for the hitherto sequence of user actions
Link: https://arxiv.org/abs/1808.00532
====================================================
Multi-Scale Gradual Integration CNN for False Positive Reduction in Pulmonary Nodule Detection (Bum-Chae Kim - 24 July, 2018)
Our MGI-CNN is implemented in Python using TensorFlow and the source code is available from 'https://github.com/ku-milab/MGICNN.'
Link: https://arxiv.org/abs/1807.10581
====================================================
A Benchmark of Selected Algorithmic Differentiation Tools on Some Problems in Computer Vision and Machine Learning (Filip Å rajer - 26 July, 2018)
In this paper, we compare fifteen ways of computing derivatives including eleven automatic differentiation tools implementing various methods and written in various languages (C++, F#, MATLAB, Julia and Python), two symbolic differentiation tools, finite differences, and hand-derived computation.
Link: https://arxiv.org/abs/1807.10129
====================================================
Turbulucid: A Python Package for Post-Processing of Fluid Flow Simulations (Timofey Mukha - 25 July, 2018)
A Python package for post-processing of plane two-dimensional data from computational fluid dynamics simulations is presented
Link: https://arxiv.org/abs/1807.09688
====================================================
FluidDyn: a Python open-source framework for research and teaching in fluid dynamics (Pierre Augier - 3 July, 2018)
We propose a set of Python packages forming a framework to study fluid dynamics with different methods, in particular laboratory experiments (package fluidlab), simulations (packages fluidfft, fluidsim and fluidfoam) and data processing (package fluidimage). To improve the reuse potential, the codes are as modular as possible, leveraging the simple object-oriented programming model of Python
Link: https://arxiv.org/abs/1807.09224
====================================================
Challenges of Achieving Efficient Simulations Through Model Abstraction (Hessam S. Sarjoughian - 19 July, 2018)
These models are developed using Python and GRASS tools
Link: https://arxiv.org/abs/1807.07693
====================================================
Physical-type correctness in scientific Python (Marcus Foster - 3 August, 2018)
For instance, the major languages used in scientific computing (Fortran, C and Python), have no type for dimension or unit, and so physical quantities are represented in a program by variables of type real, resulting in the possibility of unit or dimensional errors. We demonstrate the limitations of three Python unit-libraries and present a justification and method for checking kind-of-quantity.
Link: https://arxiv.org/abs/1807.07643
====================================================
LeFlow: Enabling Flexible FPGA High-Level Synthesis of Tensorflow Deep Neural Networks (Daniel H. Noronha - 13 July, 2018)
Initial specification of machine learning applications are often done using a high-level Python-oriented framework such as Tensorflow, followed by a manual translation to either C or RTL for synthesis using vendor tools. We show that our flow allows users to generate Deep Neural Networks with very few lines of Python code.
Link: https://arxiv.org/abs/1807.05317
====================================================
The Dune Python Module (Andreas Dedner - 13 July, 2018)
In addition, vectorized versions of many interfaces allow for more efficient code on the Python side. The infrastructure for exporting these interfaces and the resulting bindings for a Dune grid are explained in detail in this paper for both experienced Dune users and others interested in a flexible Python environment for implementing grid based schemes for solving partial differential equations.
Link: https://arxiv.org/abs/1807.05252
====================================================
Scikit-Multiflow: A Multi-output Streaming Framework (Jacob Montiel - 12 July, 2018)
Scikit-multiflow is a multi-output/multi-label and stream data mining framework for the Python programming language. Conceived to serve as a platform to encourage democratization of stream learning research, it provides multiple state of the art methods for stream learning, stream generators and evaluators
Link: https://arxiv.org/abs/1807.04662
====================================================
UniParse: A universal graph-based parsing toolkit (Daniel Varab - 11 July, 2018)
This paper describes the design and use of the graph-based parsing framework and toolkit UniParse, released as an open-source python software package. We distribute the toolkit with ready-made configurations as re-implementations of all current state-of-the-art first-order graph-based parsers, including even more efficient Cython implementations of both encoders and decoders, as well as the required specialised loss functions.
Link: https://arxiv.org/abs/1807.04053
====================================================
TrialChain: A Blockchain-Based Platform to Validate Data Integrity in Large, Biomedical Research Studies (Hao Dai - 10 July, 2018)
An administrative web application was built with Python to manage the platform, which was built with a microservice architecture using Docker
Link: https://arxiv.org/abs/1807.03662
====================================================
Architecture and performance of Devito, a system for automated stencil computation (Fabio Luporini - 9 July, 2018)
Devito is a framework capable of generating highly-optimized code given symbolic equations expressed in Python, specialized in, but not limited to, affine (stencil) codes
Link: https://arxiv.org/abs/1807.03032
====================================================
FluidFFT: common API (C++ and Python) for Fast Fourier Transform HPC libraries (Ashwin Vishnu Mohanan - 3 July, 2018)
We describe the architecture of the package composed of C++ and Cython FFT classes, Python "operator" classes and Pythran functions. We present a performance scaling analysis on three different computing clusters and a microbenchmark showing that fluidfft is an interesting solution to write efficient Python applications using FFT.
Link: https://arxiv.org/abs/1807.01775
====================================================
FluidSim: modular, object-oriented Python package for high-performance CFD simulations (Ashwin Vishnu Mohanan - 3 July, 2018)
We investigate the performance and scalability of fluidsim in a state of the art HPC cluster. Three similar pseudo-spectral CFD codes based on Python (Dedalus, SpectralDNS) and Fortran (NS3D) are presented and qualitatively and quantitatively compared to fluidsim
Link: https://arxiv.org/abs/1807.01769
====================================================
Adversarial Robustness Toolbox v0.3.0 (Maria-Irina Nicolae - 8 August, 2018)
The Adversarial Robustness Toolbox (ART) is a Python library designed to support researchers and developers in creating novel defence techniques, as well as in deploying practical defences of real-world AI systems. Researchers can use ART to benchmark novel defences against the state-of-the-art
Link: https://arxiv.org/abs/1807.01069
====================================================
TextWorld: A Learning Environment for Text-based Games (Marc-Alexandre CÃ´tÃ© - 29 June, 2018)
TextWorld is a Python library that handles interactive play-through of text games, as well as backend functions like state tracking and reward assignment
Link: https://arxiv.org/abs/1806.11532
====================================================
Probabilistic Inference Using Generators - The Statues Algorithm (Pierre Denis - 2 August, 2018)
Finally, we introduce Lea and MicroLea, two Python libraries implementing the Statues algorithm, along with several use cases
Link: https://arxiv.org/abs/1806.09997
====================================================
AirLab: Autograd Image Registration Laboratory (Robin SandkÃ¼hler - 26 June, 2018)
AirLab is implemented in Python using PyTorch as tensor and optimization library and SimpleITK for basic image IO
Link: https://arxiv.org/abs/1806.09907
====================================================
Topological Data Analysis Made Easy with the Topology ToolKit (Guillaume Favelier - 21 June, 2018)
A running example will be described in detail, showcasing how to access TTK's features via ParaView, Python, VTK/C++, and C++
Link: https://arxiv.org/abs/1806.08126
====================================================
StructVAE: Tree-structured Latent Variable Models for Semi-supervised Semantic Parsing (Pengcheng Yin - 20 June, 2018)
Experiments on semantic parsing on the ATIS domain and Python code generation show that with extra unlabeled data, StructVAE outperforms strong supervised models.
Link: https://arxiv.org/abs/1806.07832
====================================================
The RBO Dataset of Articulated Objects and Interactions (Roberto MartÃ­n-MartÃ­n - 17 June, 2018)
We provide Python scripts to download and visualize the data
Link: https://arxiv.org/abs/1806.06465
====================================================
OpenEDGAR: Open Source Software for SEC EDGAR Analysis (Michael J Bommarito II - 13 June, 2018)
OpenEDGAR is an open source Python framework designed to rapidly construct research databases based on the Electronic Data Gathering, Analysis, and Retrieval (EDGAR) system operated by the US Securities and Exchange Commission (SEC)
Link: https://arxiv.org/abs/1806.04973
====================================================
LexNLP: Natural language processing and information extraction for legal and regulatory texts (Michael J Bommarito II - 10 June, 2018)
LexNLP is an open source Python package focused on natural language processing and machine learning for legal and regulatory text
Link: https://arxiv.org/abs/1806.03688
====================================================
BindsNET: A machine learning-oriented spiking neural networks library in Python (Hananel Hazan - 4 June, 2018)
In this paper, we describe a new Python package for the simulation of spiking neural networks, specifically geared towards machine learning and reinforcement learning
Link: https://arxiv.org/abs/1806.01423
====================================================
Deploying Customized Data Representation and Approximate Computing in Machine Learning Applications (Mahdi Nazemi - 3 June, 2018)
It comprises a Python module, which can be integrated with some of the existing machine learning frameworks and implements various customizable data representations including fixed-point and floating-point as well as approximate arithmetic operations.Furthermore, it includes a highly-parameterized Scala module, which allows synthesizing hardware based on the said data representations and arithmetic operations. Lop allows researchers and designers to quickly compare quality of their models using various data representations and arithmetic operations in Python and contrast the hardware cost of viable representations by synthesizing them on their target platforms (e.g., FPGA or ASIC)
Link: https://arxiv.org/abs/1806.00875
====================================================
CocoNet: A deep neural network for mapping pixel coordinates to color values (Paul Andrei Bricman - 31 August, 2018)
Our code is available at https://github.com/paubric/python-fuse-coconet.
Link: https://arxiv.org/abs/1805.11357
====================================================
Fast Random Integer Generation in an Interval (Daniel Lemire - 29 May, 2018)
Consequently, popular languages like Java, Python, C++, Swift and Go include ranged random integer generation functions as part of their runtime libraries.
Link: https://arxiv.org/abs/1805.10941
====================================================
The Topology ToolKit (Julien Tierny - 22 May, 2018)
It is also easily accessible to developers through a variety of bindings (Python, VTK/C++) for fast prototyping or through direct, dependence-free, C++, to ease integration into pre-existing complex systems
Link: https://arxiv.org/abs/1805.09110
====================================================
Learning to Mine Aligned Code and Natural Language Pairs from Stack Overflow (Pengcheng Yin - 22 May, 2018)
Experiments using Python and Java as test beds show that the proposed method greatly expands coverage and accuracy over existing mining methods, even when using only a small number of labeled examples
Link: https://arxiv.org/abs/1805.08949
====================================================
EcoRNN: Fused LSTM RNN Implementation with Data Layout Optimization (Bojian Zheng - 22 May, 2018)
We integrate EcoRNN into MXNet Python library and open-source it to benefit machine learning practitioners.
Link: https://arxiv.org/abs/1805.08899
====================================================
geomstats: a Python Package for Riemannian Geometry in Machine Learning (Nina Miolane - 21 May, 2018)
We introduce geomstats, a python package that performs computations on manifolds such as hyperspheres, hyperbolic spaces, spaces of symmetric positive definite matrices and Lie groups of transformations
Link: https://arxiv.org/abs/1805.08308
====================================================
Disparity Sliding Window: Object Proposals From Disparity Images (Julian MÃ¼ller - 6 August, 2018)
Code is available in C++ and Python https://github.com/julimueller/ disparity-sliding-window.
Link: https://arxiv.org/abs/1805.06830
====================================================
The EPFL Logic Synthesis Libraries (Mathias Soeken - 14 May, 2018)
It includes a Python interface to support scripting
Link: https://arxiv.org/abs/1805.05121
====================================================
Ariadne: Analysis for Machine Learning Program (Julian Dolby - 10 May, 2018)
Python is popular for machine learning, in part because of its wealth of machine learning libraries, and is felt to make development faster; however, this dynamic language has less support for error detection at code creation time than tools like Eclipse. We have created static analysis for Python, a type system for tracking tensors---Tensorflow's core data structures---and a data flow analysis to track their usage
Link: https://arxiv.org/abs/1805.04058
====================================================
Pytrec_eval: An Extremely Fast Python Interface to trec_eval (Christophe Van Gysel - 5 June, 2018)
We show that pytrec_eval is around one order of magnitude faster than invoking trec_eval as a sub process from within Python. Compared to a native Python implementation of NDCG, pytrec_eval is twice as fast for practically-sized rankings
Link: https://arxiv.org/abs/1805.01597
====================================================
Practical Graph Bipartization with Applications in Near-Term Quantum Computing (Timothy D. Goodrich - 2 May, 2018)
Finally, we provide all code and data in an open source suite, including a Python API for accessing reduction routines and branching algorithms, along with scripts for fully replicating our results.
Link: https://arxiv.org/abs/1805.01041
====================================================
modAL: A modular active learning framework for Python (Tivadar Danka - 2 May, 2018)
modAL is a modular active learning framework for Python, aimed to make active learning research and practice simpler
Link: https://arxiv.org/abs/1805.00979
====================================================
DeepDIVA: A Highly-Functional Python Framework for Reproducible Experiments (Michele Alberti - 23 April, 2018)
DeepDIVA is implemented in Python and uses the deep learning framework PyTorch
Link: https://arxiv.org/abs/1805.00329
====================================================
Python Framework for HP Adaptive Discontinuous Galerkin Method for Two Phase Flow in Porous Media (Andreas Dedner - 1 May, 2018)
The method is implemented using the new Python frontend Dune-FemPy to the open source framework Dune
Link: https://arxiv.org/abs/1805.00290
====================================================
Experimenting with robotic intra-logistics domains (Martin Gebser - 26 April, 2018)
Although asprilo relies on Answer Set Programming and Python, it is readily usable by any system complying with its fact-oriented interface format
Link: https://arxiv.org/abs/1804.10247
====================================================
A Channel-based Exact Inference Algorithm for Bayesian Networks (Bart Jacobs - 21 April, 2018)
The performance of a prototype implementation of the algorithm in Python is briefly compared to a standard implementation (pgmpy): first results show competitive performance.
Link: https://arxiv.org/abs/1804.08032
====================================================
Gnowee: A Hybrid Metaheuristic Optimization Algorithm for Constrained, Black Box, Combinatorial Mixed-Integer Design (James Bevins - 15 April, 2018)
This paper introduces Gnowee, a modular, Python-based, open-source hybrid metaheuristic optimization algorithm (Available from https://github.com/SlaybaughLab/Gnowee)
Link: https://arxiv.org/abs/1804.05429
====================================================
Glyph: Symbolic Regression Tools (Markus Quade - 21 March, 2018)
We present Glyph - a Python package for genetic programming based symbolic regression
Link: https://arxiv.org/abs/1803.06226
====================================================
IDEL: In-Database Entity Linking with Neural Embeddings (Torsten Kilias - 13 March, 2018)
We leverage the ability of MonetDB to support in-database-analytics with user defined functions (UDFs) implemented in Python. The system achieves zero cost for data shipping and transformation by utilizing MonetDB's ability to embed Python processes in the database kernel and exchange data in NumPy arrays
Link: https://arxiv.org/abs/1803.04884
====================================================
CANA: A python package for quantifying control and canalization in Boolean Networks (Rion Brattig Correia - 9 May, 2018)
Here we describe a new publicly-available Python package that provides the necessary tools to extract, measure, and visualize canalizing redundancy present in Boolean network models
Link: https://arxiv.org/abs/1803.04774
====================================================
Gerrymandering and Compactness: Implementation Flexibility and Abuse (Richard Barnes - 7 March, 2018)
This paper accompanies the release of packages in C++, Python, and R which correctly, efficiently, and reproducibly calculate a variety of compactness scores.
Link: https://arxiv.org/abs/1803.02857
====================================================
Cyber-Physical Testbed for Power System Wide-Area Measurement-Based Control Using Open-Source Software (Hantao Cui - 6 March, 2018)
The proposed testbed is implemented using open-source software packages managed by a Python dispatcher
Link: https://arxiv.org/abs/1803.02337
====================================================
SpeechPy - A Library for Speech Processing and Recognition (Amirsina Torfi - 25 May, 2018)
SpeechPy is an open source Python package that contains speech preprocessing techniques, speech features, and important post-processing operations
Link: https://arxiv.org/abs/1803.01094
====================================================
DEMorphy, German Language Morphological Analyzer (Duygu Altinok - 2 March, 2018)
DEMorphy is implemented in Python with ease of usability and accompanying documentation
Link: https://arxiv.org/abs/1803.00902
====================================================
Computational International Relations: What Can Programming, Coding and Internet Research Do for the Discipline? (H. Akin Unver - 28 February, 2018)
After providing an overview of the potentials of computational IR and how an IR scholar can establish technical proficiency in computer science, such as starting with Python, R, QGis, ArcGIS or Github, this paper will focus on some of the author's works in providing an idea for IR students on how to think about computational IR
Link: https://arxiv.org/abs/1803.00105
====================================================
Bonnet: An Open-Source Training and Deployment Framework for Semantic Segmentation in Robotics using CNNs (Andres Milioto - 25 February, 2018)
The training interface is implemented in Python using TensorFlow and the deployment interface provides a C++ library that can be easily integrated in an existing robotics codebase, a ROS node, and two standalone applications for label prediction in images and videos.
Link: https://arxiv.org/abs/1802.08960
====================================================
SimCommSys: Taking the errors out of error-correcting code simulations (Johann A. Briffa - 23 February, 2018)
Finally, SimCommSys also provides a number of shell and python scripts to encapsulate routine use cases
Link: https://arxiv.org/abs/1802.08522
====================================================
The iisignature library: efficient calculation of iterated-integral signatures and log signatures (Jeremy Reizenstein - 22 February, 2018)
We release the methods as a Python package.
Link: https://arxiv.org/abs/1802.08252
====================================================
CalcuList: a Functional Language Extended with Imperative Features (Domenico Sacca&#39; - 19 February, 2018)
The language adopts a Python-like syntax and enables interactive computation sessions with the user through a REPL (Read-Evaluate-Print-Loop) shell
Link: https://arxiv.org/abs/1802.06651
====================================================
Generating Python Code From Object-Z Specifications (A. F. Al Azzawi - 17 February, 2018)
The validations are used in the mapping covered preconditions, post-conditions, and invariants that are built using lambda function and Python's decorator. This work has found Python is an excellent language for developing libraries to map Object-Z specifications to Python.
Link: https://arxiv.org/abs/1802.06224
====================================================
PyFml - a Textual Language For Feature Modeling (A. F. Al-Azzawi - 17 February, 2018)
In this work, we propose a textual feature modeling language based on Python programming language (PyFML), that generalizes the classical feature models with instance feature cardinalities and attributes which be extended with highlight of replication and complex logical and mathematical cross-tree constraints
Link: https://arxiv.org/abs/1802.05022
====================================================
DESlib: A Dynamic ensemble selection library in Python (Rafael M. O. Cruz - 15 February, 2018)
DESlib is an open-source python library providing the implementation of several dynamic selection techniques
Link: https://arxiv.org/abs/1802.04967
====================================================
SNC: A Cloud Service Platform for Symbolic-Numeric Computation using Just-In-Time Compilation (Peng Zhang - 9 February, 2018)
SNC allows the Cloud users to describe tasks as symbolic expressions through C/C++, Python, Java APIs and SNC script
Link: https://arxiv.org/abs/1802.04766
====================================================
A High Performance Implementation of Spectral Clustering on CPU-GPU Platforms (Yu Jin - 12 February, 2018)
However, existing implementations in commonly used software platforms such as Matlab and Python do not scale well for many of the emerging Big Data applications. Our implementation is shown to be significantly faster compared to the best known Matlab and Python implementations for each step
Link: https://arxiv.org/abs/1802.04450
====================================================
Web-Based Implementation of Travelling Salesperson Problem Using Genetic Algorithm (Aryo Pinandito - 9 February, 2018)
While many scientists prefer Python in GA implementation, another popular high-level interpreter programming language such as PHP (PHP Hypertext Preprocessor) and Ruby were benchmarked
Link: https://arxiv.org/abs/1802.03155
====================================================
Praaline: Integrating Tools for Speech Corpus Research (George Christodoulides - 8 February, 2018)
Praaline is extensible using Python or C++ plug-ins, while Praat and R scripts may be executed against the corpus data
Link: https://arxiv.org/abs/1802.02914
====================================================
High-level python abstractions for optimal checkpointing in inversion problems (Navjot Kukreja - 12 January, 2018)
Integrat- ing Revolve into a modern python HPC code and combining it with code generation is not straightforward
Link: https://arxiv.org/abs/1802.02474
====================================================
In Defense of Classical Image Processing: Fast Depth Completion on the CPU (Jason Ku - 31 January, 2018)
The code written in Python will be made publicly available at https://github.com/kujason/ip_basic.
Link: https://arxiv.org/abs/1802.00036
====================================================
PrivPy: Enabling Scalable and General Privacy-Preserving Machine Learning (Yi Li - 24 May, 2018)
PrivPy provides an easy-to- use and highly compatible Python programming front- end which supports high-level array operations and different secure computation engines to allow for security assumptions and performance trade-offs. With PrivPy, programmers can write modern machine learning algorithms conveniently and efficiently in Python
Link: https://arxiv.org/abs/1801.10117
====================================================
Open3D: A Modern Library for 3D Data Processing (Qian-Yi Zhou - 29 January, 2018)
The Open3D frontend exposes a set of carefully selected data structures and algorithms in both C++ and Python
Link: https://arxiv.org/abs/1801.09847
====================================================
Mitigating Spreadsheet Model Risk with Python Open Source Infrastructure (Oliver Beavers - 29 January, 2018)
This paper lays ground work for spreadsheet modelling professionals to develop reproducible audit tools using freely available, open source packages built with the Python programming language, enabling stakeholders to develop clearly defined model "oracles" with which to test and audit spreadsheet calculations against.
Link: https://arxiv.org/abs/1801.09771
====================================================
How Does Bug-Handling Effort Differ Among Different Programming Languages? (Jie Zhang - 3 January, 2018)
For example, some people hold the view that bugs in Python are easy to handle because its code is easy to read and understand, while some others believe the absence of static typing in Python will lead to higher bug-handling effort.
Link: https://arxiv.org/abs/1801.01025
====================================================
DeepMind Control Suite (Yuval Tassa - 2 January, 2018)
The tasks are written in Python and powered by the MuJoCo physics engine, making them easy to use and modify
Link: https://arxiv.org/abs/1801.00690
====================================================
ZOOpt: Toolbox for Derivative-Free Optimization (Yu-Ren Liu - 6 February, 2018)
ZOOpt provides a Python package for single-thread optimization, and a light-weighted distributed version with the help of the Julia language for Python described functions
Link: https://arxiv.org/abs/1801.00329
====================================================
Basic concepts and tools for the Toki Pona minimal and constructed language: description of the language and main issues; analysis of the vocabulary; text synthesis and syntax highlighting; Wordnet synsets (Renato Fabbri - 3 July, 2018)
This article exposes current concepts and resources for TP, and makes available Python (and Vim) scripted routines for the analysis of the language, synthesis of texts, syntax highlighting schemes, and the achievement of a preliminary TP Wordnet
Link: https://arxiv.org/abs/1712.09359
====================================================
Feature Extraction and Feature Selection: Reducing Data Complexity with Apache Spark (Dimitrios Sisiaridis - 11 December, 2017)
The approach is implemented in Apache Spark, using its python API, named pyspark.
Link: https://arxiv.org/abs/1712.08618
====================================================
Differential geometry and stochastic dynamics with deep learning numerics (Line KÃ¼hnel - 22 December, 2017)
In particular, we use the symbolic expression and automatic differentiation features of the python library Theano, originally developed for high-performance computations in deep learning
Link: https://arxiv.org/abs/1712.08364
====================================================
In silico generation of novel, drug-like chemical matter using the LSTM neural network (Peter Ertl - 8 January, 2018)
The molecule generator written in Python used in this study is available on request.
Link: https://arxiv.org/abs/1712.07449
====================================================
CameraTransform: a Scientific Python Package for Perspective Camera Corrections (Richard Gerum - 20 December, 2017)
We present \textit{CameraTransform}, a python package that performs a perspective image correction whereby the height, tilt/roll angle and heading of the camera can be automatically obtained from the images if additional information such as GPS coordinates or object sizes are provided
Link: https://arxiv.org/abs/1712.07438
====================================================
An anthropological account of the Vim text editor: features and tweaks after 10 years of usage (Renato Fabbri - 18 December, 2017)
Python, C++, JavaScript, ChucK programs; \LaTeX, Markdown, HTML, RDF, Make and other markup files; % TTM binary files
Link: https://arxiv.org/abs/1712.06933
====================================================
A Production Oriented Approach for Vandalism Detection in Wikidata - The Buffaloberry Vandalism Detector at WSDM Cup 2017 (Rafael Crescenzi - 19 December, 2017)
we were able to outperform all other contestants, while incorporating new interesting features, unifying the programming language used to only Python and refactoring the feature extractor into a simpler and more compact code base.
Link: https://arxiv.org/abs/1712.06919
====================================================
MEBoost: Mixing Estimators with Boosting for Imbalanced Data Classification (Farshid Rayhan - 13 January, 2018)
The python version of the code is available here: https://github.com/farshidrayhanuiu/
Link: https://arxiv.org/abs/1712.06658
====================================================
An MPI-Based Python Framework for Distributed Training with Keras (Dustin Anderson - 15 December, 2017)
We present a lightweight Python framework for distributed training of neural networks on multiple GPUs or CPUs
Link: https://arxiv.org/abs/1712.05878
====================================================
Rasa: Open Source Language Understanding and Dialogue Management (Tom Bocklisch - 15 December, 2017)
We introduce a pair of tools, Rasa NLU and Rasa Core, which are open source python libraries for building conversational software
Link: https://arxiv.org/abs/1712.05181
====================================================
automan: a simple, Python-based, automation framework for numerical computing (Prabhu Ramachandran - 4 February, 2018)
We present an easy-to-use, Python-based framework that allows a researcher to automate their computational simulations
Link: https://arxiv.org/abs/1712.04786
====================================================
Encoding DNA sequences by integer chaos game representation (Changchuan Yin - 19 December, 2017)
The Python programs in this study are freely available to the public at https://github.com/cyinbox/iCGR
Link: https://arxiv.org/abs/1712.04546
====================================================
auDeep: Unsupervised Learning of Representations from Audio with Deep Recurrent Neural Networks (Michael Freitag - 22 December, 2017)
auDeep is a Python toolkit for deep unsupervised representation learning from acoustic data. We provide an extensive command line interface in addition to a Python API for users and developers, both of which are comprehensively documented and publicly available at https://github.com/auDeep/auDeep
Link: https://arxiv.org/abs/1712.04382
====================================================
Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data (Jamie R. NuÃ±ez - 1 August, 2018)
We developed a Python module, cmaputil, to create CVD-optimized colormaps, which imports colormaps and modifies them to be perceptually uniform in CVD-safe colorspace while linearizing and maximizing the brightness range
Link: https://arxiv.org/abs/1712.01662
====================================================
An algorithm to reconstruct convex polyhedra from their face normals and areas (Giuseppe Sellaroli - 3 December, 2017)
A Python implementation of the algorithm is available at https://github.com/gsellaroli/polyhedrec.
Link: https://arxiv.org/abs/1712.00825
====================================================
Openmv: A Python powered, extensible machine vision camera (Ibrahim Abdelkader - 1 November, 2017)
The uniqueness of this platform lies in running an embedded Python3 interpreter, allowing its peripherals and machine vision library to be scripted in Python
Link: https://arxiv.org/abs/1711.10464
====================================================
Efficiently and easily integrating differential equations with JiTCODE, JiTCDDE, and JiTCSDE (Gerrit Ansmann - 22 March, 2018)
We present a family of Python modules for the numerical integration of ordinary, delay, or stochastic differential equations
Link: https://arxiv.org/abs/1711.09886
====================================================
EddyNet: A Deep Neural Network For Pixel-Wise Classification of Oceanic Eddies (Redouane Lguensat - 10 November, 2017)
Keras Python code, the training datasets and EddyNet weights files are open-source and freely available on https://github.com/redouanelg/EddyNet.
Link: https://arxiv.org/abs/1711.03954
====================================================
DLVM: A modern compiler infrastructure for deep learning systems (Richard Wei - 2 February, 2018)
However, many of the existing deep learning frameworks are software libraries that act as an unsafe DSL in Python and a computation graph interpreter
Link: https://arxiv.org/abs/1711.03016
====================================================
Tangent: Automatic Differentiation Using Source Code Transformation in Python (Bart van MerriÃ«nboer - 7 November, 2017)
It takes numeric functions written in a syntactic subset of Python and NumPy as input, and generates new Python functions which calculate a derivative. Advantages are that Tangent generates gradient code in Python which is readable by the user, easy to understand and debug, and has no runtime overhead
Link: https://arxiv.org/abs/1711.02712
====================================================
Toward real-time data query systems in HEP (Jim Pivarski - 8 November, 2017)
These techniques include direct extraction of ROOT TBranches into Numpy arrays and compilation of Python analysis functions (rather than SQL) to be executed very quickly
Link: https://arxiv.org/abs/1711.01229
====================================================
Oversampling for Imbalanced Learning Based on K-Means and SMOTE (Felix Last - 12 December, 2017)
An implementation is made available in the python programming language.
Link: https://arxiv.org/abs/1711.00837
====================================================
Pomegranate: fast and flexible probabilistic modeling in python (Jacob Schreiber - 27 February, 2018)
We present pomegranate, an open source machine learning package for probabilistic modeling in Python
Link: https://arxiv.org/abs/1711.00137
====================================================
Replace or Retrieve Keywords In Documents at Scale (Vikash Singh - 9 November, 2017)
We have made python implementation of this algorithm available as open-source on GitHub, released under the permissive MIT License.
Link: https://arxiv.org/abs/1711.00046
====================================================
Fast Linear Transformations in Python (Christoph Wagner - 26 October, 2017)
This paper introduces a new free library for the Python programming language, which provides a collection of structured linear transforms, that are not represented as explicit two dimensional arrays but in a more efficient way by exploiting the structural knowledge.
Link: https://arxiv.org/abs/1710.09578
====================================================
The Refinement Calculus of Reactive Systems Toolset (Iulia Dragomir - 23 February, 2018)
We present the Refinement Calculus of Reactive Systems Toolset, an environment for compositional modeling and reasoning about reactive systems, built on top of Isabelle, Simulink, and Python.
Link: https://arxiv.org/abs/1710.08195
====================================================
MatchPy: A Pattern Matching Library (Manuel Krebber - 16 October, 2017)
Unfortunately, no lightweight implementation of pattern matching as general and flexible as Mathematica exists for Python Mathics,MacroPy,patterns,PyPatt. Therefore, we created the open source module MatchPy which offers similar pattern matching functionality in Python using a novel algorithm which finds matches for large pattern sets more efficiently by exploiting similarities between patterns.
Link: https://arxiv.org/abs/1710.06915
====================================================
Pyroomacoustics: A Python package for audio room simulations and array processing algorithms (Robin Scheibler - 11 October, 2017)
The content of the package can be divided into three main components: an intuitive Python object-oriented interface to quickly construct different simulation scenarios involving multiple sound sources and microphones in 2D and 3D rooms; a fast C implementation of the image source model for general polyhedral rooms to efficiently generate room impulse responses and simulate the propagation between sources and receivers; and finally, reference implementations of popular algorithms for beamforming, direction finding, and adaptive filtering
Link: https://arxiv.org/abs/1710.04196
====================================================
Ciw: An open source discrete event simulation library (Geraint I. Palmer - 27 September, 2017)
This paper introduces Ciw, an open source library for conducting discrete event simulations that has been developed in Python
Link: https://arxiv.org/abs/1710.03561
====================================================
A Practical Python API for Querying AFLOWLIB (Conred W. Rosenbrock - 28 September, 2017)
Here we present a high-level API that allows immediate access to the aflowlib data using standard python operators and language features. It provides an easy way to integrate aflowlib data with other python materials packages such as ase and quippy, and provides automatic deserialization into numpy arrays and python objects
Link: https://arxiv.org/abs/1710.00813
====================================================
libact: Pool-based Active Learning in Python (Yao-Yuan Yang - 1 October, 2017)
libact is a Python package designed to make active learning easier for general users. The package is open-source on Github, and can be easily installed from Python Package Index repository.
Link: https://arxiv.org/abs/1710.00379
====================================================
Efficient Pattern Matching in Python (Manuel Krebber - 29 September, 2017)
We present the open source Python module MatchPy, which offers functionality and expressiveness similar to the pattern matching in Mathematica
Link: https://arxiv.org/abs/1710.00077
====================================================
Toward a System Building Agenda for Data Integration (AnHai Doan - 29 September, 2017)
They provide tools to address the "pain points" of the steps, and tools are built on top of the Python data science and Big Data ecosystem (PyData)
Link: https://arxiv.org/abs/1710.00027
====================================================
A Benchmark Environment Motivated by Industrial Control Problems (Daniel Hein - 6 February, 2018)
The resulting industrial benchmark (IB) has been made publicly available to the RL community by publishing its Java and Python code, including an OpenAI Gym wrapper, on Github
Link: https://arxiv.org/abs/1709.09480
====================================================
MDP environments for the OpenAI Gym (Andreas Kirsch - 26 September, 2017)
This whitepaper describes a Python framework that makes it very easy to create simple Markov-Decision-Process environments programmatically by specifying state transitions and rewards of deterministic and non-deterministic MDPs in a domain-specific language in Python
Link: https://arxiv.org/abs/1709.09069
====================================================
Learning a Predictive Model for Music Using PULSE (Jonas Langhabel - 26 September, 2017)
I design a general Python framework for PULSE, propose task-optimized feature generating operations and various music-theoretically motivated features that are evaluated on a standard corpus of monophonic folk and chorale melodies. The proposed method significantly outperforms comparable state-of-the-art models
Link: https://arxiv.org/abs/1709.08842
====================================================
Node Primitives: an open end-user programming platform for social robots (Enrique Coronado - 25 September, 2017)
On the one hand, a ZeroMQ and Python-based distributed software framework has been developed to provide inter-process communication and robot behavior specification mechanisms
Link: https://arxiv.org/abs/1709.08363
====================================================
A fundamental frequency estimation method for tonal sounds inspired on bird song studies (C. Jarne - 21 September, 2017)
Python libraries were used to develop a code with a simple algorithm to obtain fundamental frequency
Link: https://arxiv.org/abs/1709.07541
====================================================
Improving spliced alignment for identification of ortholog groups and multiple CDS alignment (Jean-David Aguilar - 18 September, 2017)
An implementation of the method in Python is available on demande to SFA@USherbrooke.ca.
Link: https://arxiv.org/abs/1709.06169
====================================================
TensorFlow Agents: Efficient Batched Reinforcement Learning in TensorFlow (Danijar Hafner - 8 September, 2017)
Environments are stepped in separate Python processes to progress them in parallel without interference of the global interpreter lock
Link: https://arxiv.org/abs/1709.02878
====================================================
Static Graph Challenge: Subgraph Isomorphism (Siddharth Samsi - 22 August, 2017)
Serial implementations in C++, Python, Python with Pandas, Matlab, Octave, and Julia have been implemented and their single threaded performance have been measured
Link: https://arxiv.org/abs/1708.06866
====================================================
SafePredict: A Meta-Algorithm for Machine Learning That Uses Refusals to Guarantee Correctness (Mustafa A. Kocak - 8 November, 2017)
Our software (currently in Python) is included in the supplementary material.
Link: https://arxiv.org/abs/1708.06425
====================================================
DARVIZ: Deep Abstract Representation, Visualization, and Verification of Deep Learning Models (Anush Sankaran - 16 August, 2017)
Further, for deep learning development there are many libraries in multiple programming languages such as TensorFlow (Python), CAFFE (C++), Theano (Python), Torch (Lua), and Deeplearning4j (Java), driving a huge need for interoperability across libraries.
Link: https://arxiv.org/abs/1708.04915
====================================================
StarCraft II: A New Challenge for Reinforcement Learning (Oriol Vinyals - 16 August, 2017)
We describe the observation, action, and reward specification for the StarCraft II domain and provide an open source Python-based interface for communicating with the game engine
Link: https://arxiv.org/abs/1708.04782
====================================================
Augmentor: An Image Augmentation Library for Machine Learning (Marcus D. Bloice - 11 August, 2017)
Augmentor is a software package, available in both Python and Julia versions, that provides a high level API for the expansion of image data using a stochastic, pipeline-based approach which effectively allows for images to be sampled from a distribution of augmented images at runtime
Link: https://arxiv.org/abs/1708.04680
====================================================
Database of Parliamentary Speeches in Ireland, 1919-2013 (Alexander Herzog - 15 August, 2017)
The speeches were downloaded from the official parliament website and further processed and parsed with a Python script
Link: https://arxiv.org/abs/1708.04557
====================================================
Long range forces in a performance portable Molecular Dynamics framework (William R. Saunders - 3 August, 2017)
To address this challenge, we recently described a new Domain Specific Language (DSL) for the development of performance portable MD codes based on a "Separation of Concerns": a Python framework automatically generates efficient parallel code for a range of target architectures.
Link: https://arxiv.org/abs/1708.01135
====================================================
Handling Nested Parallelism and Extreme Load Imbalance in an Orbital Analysis Code (Benjamin James Gaska - 30 July, 2017)
As part of a Graduate Computer Science course in Parallel Programming models, we show how the approach can be implemented in parallel Perl, Python, Chapel, Pthreads, and OpenMP
Link: https://arxiv.org/abs/1707.09668
====================================================
Example Setups of Navier-Stokes Equations with Control and Observation: Spatial Discretization and Representation via Linear-quadratic Matrix Coefficients (Maximilian Behr - 27 July, 2017)
The test cases are provided as plain PYTHON or OCTAVE/MATLAB script files for immediate replication.
Link: https://arxiv.org/abs/1707.08711
====================================================
An Exploration of Approaches to Integrating Neural Reranking Models in Multi-Stage Ranking Architectures (Zhucheng Tu - 25 July, 2017)
Our models are trained using the PyTorch deep learning toolkit, which is implemented in C/C++ with a Python frontend
Link: https://arxiv.org/abs/1707.08275
====================================================
One Tool, Many Languages: Language-Parametric Transformation with Incremental Parametric Syntax (James Koppel - 1 October, 2018)
We implement this approach in Haskell in our Cubix system, and construct incremental parametric syntaxes for C, Java, JavaScript, Lua, and Python
Link: https://arxiv.org/abs/1707.04600
====================================================
Foolbox: A Python toolbox to benchmark the robustness of machine learning models (Jonas Rauber - 20 March, 2018)
Foolbox is a new Python package to generate such adversarial perturbations and to quantify and compare the robustness of machine learning models
Link: https://arxiv.org/abs/1707.04131
====================================================
Optimised finite difference computation from symbolic equations (Michael Lange - 12 July, 2017)
We highlight the generation and automated execution of highly optimized stencil code from only a few lines of high-level symbolic Python for a set of scientific equations, before exploring the use of Devito operators in seismic inversion problems.
Link: https://arxiv.org/abs/1707.03776
====================================================
Technical Report for Real-Time Certified Probabilistic Pedestrian Forecasting (Henry O. Jacobs - 20 June, 2017)
The resulting algorithm is embarrassingly parallel and is able to work at real-time speeds using a naive Python implementation. The quality of predicted locations of agents generated by the proposed algorithm is validated on a variety of examples and considerably higher than existing state of the art approaches over long time horizons.
Link: https://arxiv.org/abs/1706.06563
====================================================
pyRecLab: A Software Library for Quick Prototyping of Recommender Systems (Gabriel Sepulveda - 11 July, 2017)
This paper introduces pyRecLab, a software library written in C++ with Python bindings which allows to quickly train, test and develop recommender systems. Among the few libraries that have all these features, they are available in languages such as Java, Scala or C#, what is a disadvantage for less experienced programmers more used to the popular Python programming language
Link: https://arxiv.org/abs/1706.06291
====================================================
Evolving imputation strategies for missing data in classification problems with TPOT (Unai Garciarena - 14 August, 2017)
We build our work on the recently introduced Python-based TPOT library, and incorporate a heterogeneous set of imputation algorithms as part of the machine learning pipeline search
Link: https://arxiv.org/abs/1706.01120
====================================================
AutoWIG: Automatic Generation of Python Bindings for C++ Libraries (Pierre Fernique - 31 May, 2017)
Most of Python and R scientific packages incorporate compiled scientific libraries to speed up the code and reuse legacy libraries. In this paper, we introduce AutoWIG, a Python package that wraps automatically compiled libraries into high-level languages using LLVM/Clang technologies and the Mako templating engine
Link: https://arxiv.org/abs/1705.11000
====================================================
Transformation of Python Applications into Function-as-a-Service Deployments (Josef Spillner - 23 May, 2017)
This starting position calls for an automated approach to transform monolithic Python code into modular FaaS units by partially automated decomposition. Hence, this paper introduces and evaluates Lambada, a Python module to dynamically decompose, convert and deploy unmodified Python code into AWS Lambda functions
Link: https://arxiv.org/abs/1705.08169
====================================================
StegIbiza: Steganography in Club Music Implemented in Python (Krzysztof Szczypiorski - 22 May, 2017)
With the use of Python scripting language, a bit string was encoded and decoded using WAV and MP3 files
Link: https://arxiv.org/abs/1705.07788
====================================================
Picasso: A Modular Framework for Visualizing the Learning Process of Neural Network Image Classifiers (Ryan Henderson - 11 September, 2017)
Picasso is a free open-source (Eclipse Public License) web application written in Python for rendering standard visualizations useful for analyzing convolutional neural networks
Link: https://arxiv.org/abs/1705.05627
====================================================
Evaluating Rapid Application Development with Python for Heterogeneous Processor-based FPGAs (Andrew G. Schmidt - 11 May, 2017)
In this work we evaluate the impact of using PYNQ, a Python development environment for application development on the Xilinx Zynq devices, the performance implications, and bottlenecks associated with it. We compare our results against existing C-based and hand-coded implementations to better understand if Python can be the glue that binds together software and hardware developers.
Link: https://arxiv.org/abs/1705.05209
====================================================
A natural approach to studying schema processing (Jack McKay Fletcher - 12 May, 2017)
To complement this article, we introduce an open source Python package called schematax, which allows one to calculate the schemata present in a population using the methods described in this article.
Link: https://arxiv.org/abs/1705.04536
====================================================
Graph Embedding Techniques, Applications, and Performance: A Survey (Palash Goyal - 22 December, 2017)
We finally present the open-source Python library we developed, named GEM (Graph Embedding Methods, available at https://github.com/palash1992/GEM), which provides all presented algorithms within a unified interface to foster and facilitate research on the topic.
Link: https://arxiv.org/abs/1705.02801
====================================================
Stack Overflow in Github: Any Snippets There? (Di Yang - 2 May, 2017)
Can we find Stack Overflow snippets in real projects? When snippets are used, is this copy literal or does it suffer adaptations? And are these adaptations specializations required by the idiosyncrasies of the target artifact, or are they motivated by specific requirements of the programmer? The large-scale study presented on this paper analyzes 909k non-fork Python projects hosted on Github, which contain 290M function definitions, and 1.9M Python snippets captured in Stack Overflow
Link: https://arxiv.org/abs/1705.01198
====================================================
Smart Assessment of and Tutoring for Computational Thinking MOOC Assignments using MindReader (Hasan M. Jamil - 17 April, 2017)
In this paper, we introduce the core idea behind the MindReader online assessment system that is able to understand a wide variety of elementary algorithms students learn in their entry level programming classes such as Java, C++ and Python
Link: https://arxiv.org/abs/1705.00959
====================================================
Non-linear Associative-Commutative Many-to-One Pattern Matching with Sequence Variables (Manuel Krebber - 2 May, 2017)
All algorithms have been implemented as an open-source library for Python
Link: https://arxiv.org/abs/1705.00907
====================================================
Enabling Interactive Analytics of Secure Data using Cloud Kotta (Yadu N. Babuji - 28 April, 2017)
Our model uses Jupyter notebooks as a flexible analysis environment and Python language constructs to support the execution of arbitrary functions on private data within this secure framework.
Link: https://arxiv.org/abs/1705.00070
====================================================
DATeS: A Highly-Extensible Data Assimilation Testing Suite v1.0 (Ahmed Attia - 1 July, 2018)
The core of DATeS is implemented in Python and takes advantage of its object-oriented capabilities
Link: https://arxiv.org/abs/1704.05594
====================================================
A Domain Specific Language for Performance Portable Molecular Dynamics Algorithms (William R. Saunders - 13 November, 2017)
Inspired by this approach, we develop a Python code generation system for molecular dynamics simulations on different parallel architectures, including massively parallel distributed memory systems and GPUs. We demonstrate the efficiency of the auto-generated code by studying its performance and scalability on different hardware and compare it to other state-of-the-art simulation packages
Link: https://arxiv.org/abs/1704.03329
====================================================
A Syntactic Neural Model for General-Purpose Code Generation (Pengcheng Yin - 5 April, 2017)
We consider the problem of parsing natural language descriptions into source code written in a general-purpose programming language like Python. Experiments find this an effective way to scale up to generation of complex programs from natural language descriptions, achieving state-of-the-art results that well outperform previous code generation and semantic parsing approaches.
Link: https://arxiv.org/abs/1704.01696
====================================================
Does Python Smell Like Java? Tool Support for Design Defect Discovery in Python (Nicole VavrovÃ¡ - 31 March, 2017)
The grounding and the confidence in these results comes from the fact that we have performed our experiments on 32'058'823 lines of Python code, which is by far the largest test set for a freely available Python parser. Thus, the importance of the work is both in the unique open Python grammar of highest quality, tested on millions of lines of code, and in the design defect detection tool which works on something else than Java.
Link: https://arxiv.org/abs/1703.10882
====================================================
PonyGE2: Grammatical Evolution in Python (Michael Fenton - 26 April, 2017)
PonyGE2 is an open source implementation of GE in Python, developed at UCD's Natural Computing Research and Applications group. It is intended as an advertisement and a starting-point for those new to GE, a reference for students and researchers, a rapid-prototyping medium for our own experiments, and a Python workout
Link: https://arxiv.org/abs/1703.08535
====================================================
A heuristic approach to obtain signal envelope with a simple software implementation (Cecilia Jarne - 4 July, 2018)
This algorithm presented is implemented based on python libraries
Link: https://arxiv.org/abs/1703.06812
====================================================
Scholia and scientometrics with Wikidata (Finn Ãrup Nielsen - 13 April, 2017)
The Python package implementing the Web service is also able to format Wikidata bibliographic entries for use in LaTeX/BIBTeX.
Link: https://arxiv.org/abs/1703.04222
====================================================
A simple Python code for computing effective properties of 2D and 3D representative volume element under periodic boundary conditions (Fan Ye - 11 March, 2017)
Therefore, a simple Python code is programmed to obtain effective properties of Representative Volume Element (RVE) under Periodic Boundary Conditions (PBCs). With simple modifications, the basic Python code may be extended to the computation of the effective properties of more complex microstructure
Link: https://arxiv.org/abs/1703.03930
====================================================
Simulation of Patient Flow in Multiple Healthcare Units using Process and Data Mining Techniques for Model Identification (Sergey V. Kovalchuk - 22 January, 2018)
The developed solution was implemented using Python libraries (SimPy, SciPy, and others)
Link: https://arxiv.org/abs/1702.07733
====================================================
Scene Recognition by Combining Local and Global Image Descriptors (Jobin Wilson - 21 February, 2017)
The primary objective of this work is to clearly outline the practical implementation of a basic screne-recognition pipeline having a reasonable accuracy, in python, using open-source libraries
Link: https://arxiv.org/abs/1702.06850
====================================================
Developing a comprehensive framework for multimodal feature extraction (Quinten McNamara - 20 February, 2017)
Pliers is an open-source Python package that supports standardized annotation of diverse data types (video, images, audio, and text), and is expressly with both ease-of-use and extensibility in mind. Users can apply a wide range of pre-existing feature extraction tools to their data in just a few lines of Python code, and can also easily add their own custom extractors by writing modular classes
Link: https://arxiv.org/abs/1702.06151
====================================================
A storm is Coming: A Modern Probabilistic Model Checker (Christian Dehnert - 14 February, 2017)
It offers a Python API for rapid prototyping by encapsulating storm's fast and scalable algorithms
Link: https://arxiv.org/abs/1702.04311
====================================================
A scikit-based Python environment for performing multi-label classification (Piotr SzymaÅski - 9 February, 2017)
Scikit-multilearn is a Python library for performing multi-label classification. It provides native Python implementations of popular multi-label classification methods alongside novel framework for label space partitioning and division
Link: https://arxiv.org/abs/1702.01460
====================================================
Pyndri: a Python Interface to the Indri Search Engine (Christophe Van Gysel - 3 January, 2017)
We introduce pyndri, a Python interface to the Indri search engine. Pyndri allows to access Indri indexes from Python at two levels: (1) dictionary and tokenized document collection, (2) evaluating queries on the index
Link: https://arxiv.org/abs/1701.00749
====================================================
Web-based Argumentation ( Kenrick - 13 December, 2016)
Experiments were conducted to determine the project's best configurations and to compare this project with proxdd, a state-of-the-art ABA solver, which has no web interface and computes less number of semantics. Hence, it can be said that this project run comparably well to the state-of-the-art ABA solver proxdd
Link: https://arxiv.org/abs/1612.04469
====================================================
TF.Learn: TensorFlow's High-level Module for Distributed Machine Learning (Yuan Tang - 13 December, 2016)
TF.Learn is a high-level Python module for distributed machine learning inside TensorFlow
Link: https://arxiv.org/abs/1612.04251
====================================================
SimTensor: A synthetic tensor data generator (Hadi Fanaee-T - 9 December, 2016)
It also has this facility to export generated data to universal formats such as CSV and HDF5, which can be imported via a wide range of programming languages (C, C++, Java, R, Fortran, MATLAB, Perl, Python, and many more)
Link: https://arxiv.org/abs/1612.03772
====================================================
Should I use TensorFlow (Martin Schrimpf - 27 November, 2016)
A pure Python implementation of linear classification is compared with an implementation utilizing TensorFlow
Link: https://arxiv.org/abs/1611.08903
====================================================
Object Detection using Image Processing (Fares Jalled - 23 November, 2016)
The main objective of this article is to develop an OpenCV-Python code using Haar Cascade algorithm for object and face detection. The Python code was tested with the help of available database of video and image, the output was verified.
Link: https://arxiv.org/abs/1611.07791
====================================================
AdversariaLib: An Open-source Library for the Security Evaluation of Machine Learning Algorithms Under Attack (Igino Corona - 15 November, 2016)
We present AdversariaLib, an open-source python library for the security evaluation of machine learning (ML) against carefully-targeted attacks
Link: https://arxiv.org/abs/1611.04786
====================================================
Playing SNES in the Retro Learning Environment (Nadav Bhonker - 7 February, 2017)
Moreover, RLE is compatible with Python and Torch
Link: https://arxiv.org/abs/1611.02205
====================================================
Data Poisoning: Lightweight Soft Fault Injection for Python (Mohammad Amin Alipour - 4 November, 2016)
This paper introduces and explores the idea of data poisoning, a light-weight peer-architecture technique to inject faults into Python programs. This method requires very small modification to the original program, which facilitates evaluation of sensitivity of systems that are prototyped or modeled in Python
Link: https://arxiv.org/abs/1611.01501
====================================================
TensorLy: Tensor Learning in Python (Jean Kossaifi - 9 May, 2018)
In order to bridge this gap, we have developed \emph{TensorLy}, a high-level API for tensor methods and deep tensorized neural networks in Python. TensorLy aims to follow the same standards adopted by the main projects of the Python scientific community, and seamlessly integrates with them
Link: https://arxiv.org/abs/1610.09555
====================================================
SOL: A Library for Scalable Online Learning Algorithms (Yue Wu - 28 October, 2016)
SOL was implemented in C++, and provided with a collection of easy-to-use command-line tools, python wrappers and library calls for users and developers, as well as comprehensive documents for both beginners and advanced users
Link: https://arxiv.org/abs/1610.09083
====================================================
Hashkat: Large-scale simulations of online social networks (Kevin Ryczko - 24 October, 2016)
The software includes Shell and Python scripts for easy installation and usability
Link: https://arxiv.org/abs/1610.07458
====================================================
Open-Ended Visual Question-Answering (Issey Masuda - 9 October, 2016)
The developed software has followed the best programming practices and Python code style, providing a consistent baseline in Keras for different configurations.
Link: https://arxiv.org/abs/1610.02692
====================================================
Connecting Data Science and Qualitative Interview Insights through Sentiment Analysis to Assess Migrants' Emotion States Post-Settlement (Sarah Knudson - 28 September, 2016)
In this paper, we present an interdisciplinary pilot project that offers a way through the methodological impasse by subjecting exhaustive qualitative interviews of migrants to sentiment analysis using the Python NLTK toolkit
Link: https://arxiv.org/abs/1609.08776
====================================================
UbuntuWorld 1.0 LTS - A Platform for Automated Problem Solving & Troubleshooting in the Ubuntu OS (Tathagata Chakraborti - 12 August, 2017)
We provide a plug-and-play interface to the simulator as a python package where different types of agents can be plugged in and evaluated, and provide pathways for integrating data from online support forums like AskUbuntu into an automated agent's learning process
Link: https://arxiv.org/abs/1609.08524
====================================================
FastBDT: A speed-optimized and cache-friendly implementation of stochastic gradient-boosted decision trees for multivariate classification (Thomas Keck - 20 September, 2016)
FastBDT provides interfaces to C/C++, Python and TMVA
Link: https://arxiv.org/abs/1609.06119
====================================================
Multiparty Session Actors (Rumyana Neykova - 28 March, 2017)
We demonstrate our framework by designing and implementing a session actor library in Python and its runtime verification mechanism
Link: https://arxiv.org/abs/1609.05687
====================================================
Taming Context-Sensitive Languages with Principled Stateful Parsing (Nicolas Laurent - 17 September, 2016)
However, many mainstream programming and markup languages (C, Haskell, Python, XML, and more) possess context-sensitive features
Link: https://arxiv.org/abs/1609.05365
====================================================
cesium: Open-Source Platform for Time-Series Inference (Brett Naul - 15 September, 2016)
cesium is an end-to-end time series analysis framework, consisting of a Python library as well as a web front-end interface, that allows researchers to featurize raw data and apply modern machine learning techniques in a simple, reproducible, and extensible way. The open-source packages make us of many use modern Python toolkits, including xarray, dask, Celery, Flask, and scikit-learn.
Link: https://arxiv.org/abs/1609.04504
====================================================
Devito: Towards a generic Finite Difference DSL using Symbolic Python (Michael Lange - 12 September, 2016)
In this paper we present Devito, a new finite difference DSL that provides optimized stencil computation from high-level problem specifications based on symbolic Python expressions. We demonstrate Devito's symbolic API and performance advantages over traditional Python acceleration methods before highlighting its use in the scientific context of seismic inversion problems.
Link: https://arxiv.org/abs/1609.03361
====================================================
A Decomposition Method for Global Evaluation of Shannon Entropy and Local Estimations of Algorithmic Complexity (Hector Zenil - 18 June, 2018)
We also release implementations of the methods in most major programming languages---Wolfram Language (Mathematica), Matlab, R, Perl, Python, Pascal, C++, and Haskell---and a free online algorithmic complexity calculator.
Link: https://arxiv.org/abs/1609.00110
====================================================
Collective Intelligence for Smarter API Recommendations in Python (Andrea Renika D&#39;Souza - 31 August, 2016)
However, these proposed techniques rely on the static type of the object and are therefore inapplicable for a dynamically typed language like Python. In this paper, we present PyReco, an intelligent code completion system for Python which uses the mined API usages from open source repositories to order the results based on relevance rather than the conventional alphabetic order
Link: https://arxiv.org/abs/1608.08736
====================================================
What is Wrong with Topic Modeling? (and How to Fix it Using Search-based Software Engineering) (Amritanshu Agrawal - 20 February, 2018)
Results were collected across different implementations of LDA (Python+Scikit-Learn, Scala+Spark); across different platforms (Linux, Macintosh) and for different kinds of LDAs (VEM,or using Gibbs sampling)
Link: https://arxiv.org/abs/1608.08176
====================================================
Containers for portable, productive and performant scientific computing (Jack S. Hale - 3 November, 2016)
For Python code run on large parallel computers, the run time is reduced inside a container due to faster library imports
Link: https://arxiv.org/abs/1608.07573
====================================================
Probabilistic Data Analysis with Probabilistic Programming (Feras Saad - 18 August, 2016)
Second, for several representative data analysis tasks, we report on lines of code and accuracy measurements of various CGPMs, plus comparisons with standard baseline solutions from Python and MATLAB libraries.
Link: https://arxiv.org/abs/1608.05347
====================================================
A Functional Package for Automatic Solution of Ordinary Differential Equations with Spectral Methods (Shaohui Liu - 4 November, 2016)
We present a Python module named PyCheb, to solve the ordinary differential equations by using spectral collocation method. With this Python module, users can initialize the ODEsolver class by passing attributes, including the both sides of a given differential equation, boundary conditions, and the number of Chebyshev points, which can also be generated automatically by the ideal precision, to the constructor of ODEsolver class
Link: https://arxiv.org/abs/1608.04815
====================================================
An assessment of orthographic similarity measures for several African languages (C. Maria Keet - 10 August, 2016)
While NLTK for Python could be used for basic analyses of text, it, and similar NLP tools, will need considerable customization.
Link: https://arxiv.org/abs/1608.03065
====================================================
Geoplotlib: a Python Toolbox for Visualizing Geographical Data (Andrea Cuttone - 5 August, 2016)
We introduce geoplotlib, an open-source python toolbox for visualizing geographical data. geoplotlib supports the development of hardware-accelerated interactive visualizations in pure python, and provides implementations of dot maps, kernel density estimation, spatial graphs, Voronoi tesselation, shapefiles and many more common spatial visualizations
Link: https://arxiv.org/abs/1608.01933
====================================================
A Graph Framework for Multimodal Medical Information Processing (Georgios Drakopoulos - 22 February, 2017)
A use case pertaining to frailty based on Python and Neo4j serves as an illustration of the proposed framework.
Link: https://arxiv.org/abs/1608.00134
====================================================
OntoCat: Automatically categorizing knowledge in API Documentation (Niraj Kumar - 26 July, 2016)
We tested OntoCat on python API reference documentation
Link: https://arxiv.org/abs/1607.07602
====================================================
The Python user interface of the elsA cfd software: a coupling framework for external steering layers (Marc Lazareff - 18 November, 2016)
The Python--elsA user interface of the elsA cfd (Computational Fluid Dynamics) software has been developed to allow users to specify simulations with confidence, through a global context of description objects grouped inside scripts
Link: https://arxiv.org/abs/1607.06671
====================================================
PyCells for an Open Semiconductor Industry (Sepideh Alassi - 1 July, 2016)
The goal of this project is to develop computationally efficient layout generators with Python (PyCells), for ams AG technologies, that possess all the features of comprehensive layout generators.
Link: https://arxiv.org/abs/1607.00859
====================================================
Garbage Collection in JyNI - How to bridge Mark/Sweep and Reference Counting GC (Stefan Richthofer - 1 July, 2016)
However, it currently does not support CPython's C-API and thus does not support native extensions like NumPy and SciPy. Jython Native Interface (JyNI) is a compatibility layer that aims to provide CPython's native C extension API on top of Jython
Link: https://arxiv.org/abs/1607.00825
====================================================
Text comparison using word vector representations and dimensionality reduction (Hendrik Heuer - 2 July, 2016)
This paper describes a technique to compare large text sources using word vector representations (word2vec) and dimensionality reduction (t-SNE) and how it can be implemented using Python. The technique uses the word2vec model from the gensim Python library and t-SNE from scikit-learn.
Link: https://arxiv.org/abs/1607.00534
====================================================
Probabilistic Programming and PyMC3 (Peadar Coyle - 1 July, 2016)
This is intended to be a brief introduction to Probabilistic Programming in Python and in particular the powerful library called PyMC3.
Link: https://arxiv.org/abs/1607.00379
====================================================
Want Drugs? Use Python (MichaÅ Nowotka - 1 July, 2016)
We describe how Python can be leveraged to streamline the curation, modelling and dissemination of drug discovery data as well as the development of innovative, freely available tools for the related scientific community. We look at various examples, such as chemistry toolkits, machine-learning applications and web frameworks and show how Python can glue it all together to create efficient data science pipelines.
Link: https://arxiv.org/abs/1607.00378
====================================================
Benchmarking Python Tools for Automatic Differentiation (Andrei Turkin - 20 June, 2016)
In this paper we compare several Python tools for automatic differentiation
Link: https://arxiv.org/abs/1606.06311
====================================================
D2O - a distributed data object for parallel high-performance computing in Python (T. Steininger - 13 August, 2016)
We introduce D2O, a Python module for cluster-distributed multi-dimensional numerical arrays. D2O is written in pure Python which makes it portable and easy to use and modify
Link: https://arxiv.org/abs/1606.05385
====================================================
ExTASY: Scalable and Flexible Coupling of MD Simulations and Advanced Sampling Techniques (Vivekanandan Balasubramanian - 31 May, 2016)
ExTASY provides Python based "templated scripts" that interface to an interoperable and high-performance pilot-based run time system, which abstracts the complexity of managing multiple simulations
Link: https://arxiv.org/abs/1606.00093
====================================================
PyRIDE: An Interactive Development Environment for PR2 Robot (Xun Wang - 29 May, 2016)
One of the key features of PyRIDE is its interactive remotely accessible Python console that allows its users to program robots \textit{online} and in \textit{realtime} in the same way as using the standard Python interactive interpreter. arm joint motor controllers, and exposes their functionalities through a unified Python programming interface
Link: https://arxiv.org/abs/1605.09089
====================================================
madmom: a new Python Audio and Music Signal Processing Library (Sebastian BÃ¶ck - 23 May, 2016)
In this paper, we present madmom, an open-source audio processing and music information retrieval (MIR) library written in Python. Additionally, madmom comes with several state-of-the-art MIR algorithms for onset detection, beat, downbeat and meter tracking, tempo estimation, and piano transcription
Link: https://arxiv.org/abs/1605.07008
====================================================
OPESCI-FD: Automatic Code Generation Package for Finite Difference Models (Tianjiao Sun - 20 May, 2016)
In this project, we introduce OPESCI-FD, a Python package built on symbolic mathematics to automatically generate Finite Difference models from a high-level description of the model equations
Link: https://arxiv.org/abs/1605.06381
====================================================
Newer method of string comparison: the Modified Moving Contracting Window Pattern Algorithm (Tiago Tresoldi - 3 May, 2016)
A reference Python implementation is provided.
Link: https://arxiv.org/abs/1605.01079
====================================================
Blackbox: A procedure for parallel optimization of expensive black-box functions (Paul Knysh - 3 May, 2016)
The source code of the procedure is written in Python.
Link: https://arxiv.org/abs/1605.00998
====================================================
TheanoLM - An Extensible Toolkit for Neural Network Language Modeling (Seppo Enarvi - 8 August, 2016)
The tool has been written using Python library Theano, which allows researcher to easily extend it and tune any aspect of the training process
Link: https://arxiv.org/abs/1605.00942
====================================================
Deep Learning with Eigenvalue Decay Regularizer (Oswaldo Ludwig - 8 May, 2016)
Our method is implemented as an additional regularizer in Keras, a modular neural networks library written in Python, and evaluated in the benchmark data sets Reuters Newswire Topics Classification, IMDB database for binary sentiment classification, MNIST database of handwritten digits and CIFAR-10 data set for image classification.
Link: https://arxiv.org/abs/1604.06985
====================================================
A declarative Language for Rapid Business Development (Nabarun Mondal - 11 May, 2018)
By design ZoomBA script size is meagre compared to Python or even to Scala for business automation problems
Link: https://arxiv.org/abs/1604.05903
====================================================
Just-in-Time Static Type Checking for Dynamic Languages (Brianna M. Ren - 12 April, 2016)
Dynamic languages such as Ruby, Python, and JavaScript have many compelling benefits, but the lack of static types means subtle errors can remain latent in code for a long time
Link: https://arxiv.org/abs/1604.03641
====================================================
An open reproducible framework for the study of the iterated prisoner's dilemma (Vincent Knight - 20 December, 2016)
The Axelrod library is an open source Python package that allows for reproducible game theoretic research into the Iterated Prisoner's Dilemma
Link: https://arxiv.org/abs/1604.00896
====================================================
Evaluation of a Tree-based Pipeline Optimization Tool for Automating Data Science (Randal S. Olson - 20 March, 2016)
We implement an open source Tree-based Pipeline Optimization Tool (TPOT) in Python and demonstrate its effectiveness on a series of simulated and real-world benchmark data sets
Link: https://arxiv.org/abs/1603.06212
====================================================
A Low Cost Eeg Based Bci Prosthetic Using Motor Imagery (Daniel Elstob - 9 March, 2016)
Finally depending on the classification of the brain signal a Python script outputs the driving command to the Arduino to control the prosthetic
Link: https://arxiv.org/abs/1603.02869
====================================================
A Software Package for Chemically Inspired Graph Transformation (Jakob L. Andersen - 21 April, 2016)
A Python interface makes these features easily accessible
Link: https://arxiv.org/abs/1603.02481
====================================================
PageRank Pipeline Benchmark: Proposal for a Holistic System Benchmark for Big-Data Platforms (Patrick Dreher - 3 June, 2016)
Serial implementations in C++, Python, Python with Pandas, Matlab, Octave, and Julia have been implemented and their single threaded performance has been measured.
Link: https://arxiv.org/abs/1603.01876
====================================================
Semi-Automatic Data Annotation, POS Tagging and Mildly Context-Sensitive Disambiguation: the eXtended Revised AraMorph (XRAM) (Giuliano Lancioni - 6 March, 2016)
Testing of XRAM through a front-end Python module showed a remarkable success level.
Link: https://arxiv.org/abs/1603.01833
====================================================
StreamingBandit; Experimenting with Bandit Policies (Jules Kruijswijk - 4 September, 2018)
To address this issue, this paper introduces StreamingBandit, a Python web application for developing and testing bandit policies in field studies
Link: https://arxiv.org/abs/1602.06700
====================================================
High performance Python for direct numerical simulations of turbulent flows (Mikael Mortensen - 11 February, 2016)
In this paper we describe a pure scientific Python pseudo-spectral DNS code that nearly matches the performance of C++ for thousands of processors and billions of unknowns. The solvers are written from scratch in Python, both the mesh, the MPI domain decomposition, and the temporal integrators
Link: https://arxiv.org/abs/1602.03638
====================================================
A multi-paradigm language for reactive synthesis (Ioannis Filippidis - 2 February, 2016)
The implementation translates Promela to input for the Slugs synthesizer and is written in Python
Link: https://arxiv.org/abs/1602.01173
====================================================
Nmag micromagnetic simulation tool - software engineering lessons learned (Hans Fangohr - 28 February, 2016)
Key lessons include that encapsulating the simulation functionality in a library of a general purpose language, here Python, provides great flexibility in using the software. The choice of Python for the top-level user interface was very well received by users from the science and engineering community
Link: https://arxiv.org/abs/1601.07392
====================================================
A Theorem Prover for Quantum Hoare Logic and Its Applications (Tao Liu - 15 January, 2016)
Due to the limitation of Isabelle/HOL, the calculation of the order relation is solved by calling an outside oracle written in Python
Link: https://arxiv.org/abs/1601.03835
====================================================
Towards Turkish ASR: Anatomy of a rule-based Turkish g2p (Duygu Altinok - 14 January, 2016)
The system has been implemented in Python
Link: https://arxiv.org/abs/1601.03783
====================================================
Randomized Low-Rank Dynamic Mode Decomposition for Motion Detection (N. Benjamin Erichson - 11 December, 2015)
Supplementary materials include implementations of the algorithms in Python.
Link: https://arxiv.org/abs/1512.03526
====================================================
A declarative extension of parsing expression grammars for recognizing most programming languages (Tetsuro Matsumura - 26 November, 2015)
Notorious cases appears: typedef-defined names in C/C++, indentation-based code layout in Python, and HERE document in many scripting languages. This paper demonstrates that the use of Nez Extensions can realize many practical programming languages, such as C, C\#, Ruby, and Python, which involve PEG-hard syntax.
Link: https://arxiv.org/abs/1511.08414
====================================================
A Python Engine for Teaching Artificial Intelligence in Games (Mark O. Riedl - 24 November, 2015)
We introduce the Game AI Game Engine (GAIGE), a Python game engine specifically designed to teach about how AI is used in computer games
Link: https://arxiv.org/abs/1511.07714
====================================================
A Python Extension for the Massively Parallel Multiphysics Simulation Framework waLBerla (Martin Bauer - 23 November, 2015)
C++ data structures are exported such that a seamless interfacing to other numerical Python libraries is possible. The expressive power of Python and the performance of C++ make development of efficient code with low time effort possible.
Link: https://arxiv.org/abs/1511.07261
====================================================
Interprocedural Type Specialization of JavaScript Programs Without Type Analysis (Maxime Chevalier-Boisvert - 9 November, 2015)
Dynamically typed programming languages such as Python and JavaScript defer type checking to run time
Link: https://arxiv.org/abs/1511.02956
====================================================
There is no fast lunch: an examination of the running speed of evolutionary algorithms in several languages (Juan-J. Merelo - 3 November, 2015)
Despite speed being not everything needed to design a useful evolutionary algorithm application, in this paper we will measure the speed for several very basic evolutionary algorithm operations in several languages which use different virtual machines and approaches, and prove that, in fact, there is no big difference in speed between interpreted and compiled languages, and that in some cases, interpreted languages such as JavaScript or Python can be faster than compiled languages such as Scala, making them worthy of use for evolutionary algorithm experimentation.
Link: https://arxiv.org/abs/1511.01088
====================================================
Lowering the learning curve for declarative programming: a Python API for the IDP system (Joost Vennekens - 3 November, 2015)
Python is currently one of the most widely used (teaching) languages for programming. The first goal of our API is to allow a Python programmer to use the declarative power of IDP, without needing to learn any new syntax or semantics
Link: https://arxiv.org/abs/1511.00916
====================================================
A Framework for Distributed Deep Learning Layer Design in Python (Clay McLeod - 25 October, 2015)
In this paper, a framework for testing Deep Neural Network (DNN) design in Python is presented. Next, the benefits and detriments of implementing such a system in Python are presented
Link: https://arxiv.org/abs/1510.07303
====================================================
Technical Report of Participation in Higgs Boson Machine Learning Challenge (S. Raza Ahmad - 9 October, 2015)
Special attention is paid to the Deep Learning techniques and architectures implemented from scratch using Python and NumPy for this competition.
Link: https://arxiv.org/abs/1510.02674
====================================================
HDIdx: High-Dimensional Indexing for Efficient Approximate Nearest Neighbor Search (Ji Wan - 7 October, 2015)
In this work, we present "HDIdx", an efficient high-dimensional indexing library for fast approximate NN search, which is open-source and written in Python. It offers a family of state-of-the-art algorithms that convert input high-dimensional vectors into compact binary codes, making them very efficient and scalable for NN search with very low space complexity.
Link: https://arxiv.org/abs/1510.01991
====================================================
VERCE delivers a productive e-Science environment for seismology research (Malcolm Atkinson - 7 October, 2015)
Their data handling is made flexible and scalable by two Python libraries, ObsPy and dispel4py and by data services delivered by ORFEUS and EUDAT
Link: https://arxiv.org/abs/1510.01989
====================================================
Frequency Distribution of Error Messages (David Pritchard - 24 September, 2015)
We consider large data sets in Python and Java that include both syntax and run-time errors
Link: https://arxiv.org/abs/1509.07238
====================================================
SnapVX: A Network-Based Convex Optimization Solver (David Hallac - 21 February, 2017)
SnapVX is a high-performance Python solver for convex optimization problems defined on networks
Link: https://arxiv.org/abs/1509.06397
====================================================
Architecture and Behavior Modeling of Cyber-Physical Systems with MontiArcAutomaton (Jan Oliver Ringert - 15 September, 2015)
Available tools include a textual editor with syntax highlighting and code completion as well as a graphical editor and a powerful and extensible code generation framework for target languages including EMF, Java, Mona, and Python.
Link: https://arxiv.org/abs/1509.04505
====================================================
Implementing a teleo-reactive programming system (Robert Webb - 14 September, 2015)
They influence the design of a teleo-reactive system programming in Python, for controlling autonomous agents via the Pedro communications architecture
Link: https://arxiv.org/abs/1509.04315
====================================================
A Practical System for Guaranteed Access in the Presence of DDoS Attacks and Flash Crowds (Yi-Hsuan Kung - 8 September, 2015)
To demonstrate its deployability, we implement RCF as a Python module such that web developers can protect a critical server resource by adding only three lines of code.
Link: https://arxiv.org/abs/1509.02268
====================================================
Clone and graft: Testing scientific applications as they are built (Bruno Turcksin - 28 August, 2015)
The idea is demonstrated on a minimal model problem written in Python.
Link: https://arxiv.org/abs/1508.07231
====================================================
Using Genetic Algorithms to Benchmark the Cloud (Jeff Kinnison - 26 August, 2015)
Using Google App Engine, Heroku, and Python Anywhere with three distinct classes of client computers running our GA codebase, we quantified the completion time for application of the GA to search for the parameters of controllers for dynamical systems
Link: https://arxiv.org/abs/1508.06705
====================================================
pyMOR - Generic Algorithms and Interfaces for Model Order Reduction (RenÃ© Milk - 31 March, 2016)
In this work we discuss the design of pyMOR, a freely available software library of model order reduction algorithms, in particular reduced basis methods, implemented with the Python programming language
Link: https://arxiv.org/abs/1506.07094
====================================================
Verification of railway interlocking systems (Simon Busard - 11 June, 2015)
Finally we show how we could verify a realistic set of safety properties on a real-size station model by customizing the existing model-checking algorithm with PyNuSMV a Python library based on NuSMV.
Link: https://arxiv.org/abs/1506.03554
====================================================
Blocks and Fuel: Frameworks for deep learning (Bart van MerriÃ«nboer - 1 June, 2015)
We introduce two Python frameworks to train neural networks on large datasets: Blocks and Fuel
Link: https://arxiv.org/abs/1506.00619
====================================================
Expresso : A user-friendly GUI for Designing, Training and Exploring Convolutional Neural Networks (Ravi Kiran Sarvadevabhatla - 18 October, 2015)
With a view to provide a user-friendly interface for designing, training and developing deep learning frameworks, we have developed Expresso, a GUI tool written in Python
Link: https://arxiv.org/abs/1505.06605
====================================================
A domain-level DNA strand displacement reaction enumerator allowing arbitrary non-pseudoknotted secondary structures (Casey Grun - 11 May, 2015)
We have implemented this enumerator in Python, and it is included in the DyNAMiC Workbench Integrated Development Environment.
Link: https://arxiv.org/abs/1505.03738
====================================================
An algebraic approach to temporal network analysis based on temporal quantities (Vladimir Batagelj - 25 July, 2015)
They are available as an open source Python library TQ (Temporal Quantities) and a program Ianus
Link: https://arxiv.org/abs/1505.01569
====================================================
Fast R-CNN (Ross Girshick - 27 September, 2015)
Fast R-CNN is implemented in Python and C++ (using Caffe) and is available under the open-source MIT License at https://github.com/rbgirshick/fast-rcnn.
Link: https://arxiv.org/abs/1504.08083
====================================================
The ELAPS Framework: Experimental Linear Algebra Performance Studies (Elmar Peise - 29 April, 2015)
Experiments are designed either through Python scripts or a specialized GUI, and run on the whole spectrum of architectures, ranging from laptops to clusters, accelerators, and supercomputers
Link: https://arxiv.org/abs/1504.08035
====================================================
MultiAspect Graphs: Algebraic representation and algorithms (Klaus Wehmuth - 26 September, 2016)
We also make available Python implementations of all the algorithms presented in this paper.
Link: https://arxiv.org/abs/1504.07893
====================================================
Weighted graph algorithms with Python (A. Kapanowski - 29 April, 2015)
Python implementation of selected weighted graph algorithms is presented. Graph nodes can be any hashable Python objects
Link: https://arxiv.org/abs/1504.07828
====================================================
Symbolic Manipulation of Code Properties (Stavros Konstantinidis - 1 August, 2016)
The FAdo system is a symbolic manipulator of formal languages objects, implemented in Python
Link: https://arxiv.org/abs/1504.04715
====================================================
Comparative Studies of Six Programming Languages (Zakaria Alomari - 2 April, 2015)
In this paper we present a comparative study between six programming languages: C++, PHP, C#, Java, Python, VB ; These languages are compared under the characteristics of reusability, reliability, portability, availability of compilers and tools, readability, efficiency, familiarity and expressiveness.
Link: https://arxiv.org/abs/1504.00693
====================================================
Loo.py: From Fortran to performance via transformation and substitution rules (Andreas KlÃ¶ckner - 16 May, 2015)
These transformations are expressed in and used from Python and may be applied from a variety of settings, including a pragma-like manner from other languages.
Link: https://arxiv.org/abs/1503.07659
====================================================
Morphological Analyzer and Generator for Russian and Ukrainian Languages (Mikhail Korobov - 25 March, 2015)
The analyzer is implemented in Python programming language with optional C++ extensions
Link: https://arxiv.org/abs/1503.07283
====================================================
apsis - Framework for Automated Optimization of Machine Learning Hyper Parameters (Frederik Diehl - 15 March, 2015)
It is implemented in Python and its architecture features adaptability to any desired machine learning code. It can easily be used with common Python ML frameworks such as scikit-learn
Link: https://arxiv.org/abs/1503.02946
====================================================
YesWorkflow: A User-Oriented, Language-Independent Tool for Recovering Workflow Information from Scripts (Timothy McPhillips - 9 February, 2015)
Despite the advantages such features provide, many automated workflows continue to be implemented and executed outside of scientific workflow systems due to the convenience and familiarity of scripting languages (such as Perl, Python, R, and MATLAB), and to the high productivity many scientists experience when using these languages
Link: https://arxiv.org/abs/1502.02403
====================================================
Gated Feedback Recurrent Neural Networks (Junyoung Chung - 17 June, 2015)
We evaluated the proposed GF-RNN with different types of recurrent units, such as tanh, long short-term memory and gated recurrent units, on the tasks of character-level language modeling and Python program evaluation
Link: https://arxiv.org/abs/1502.02367
====================================================
Slice Sampling for Probabilistic Programming (Razvan Ranca - 19 January, 2015)
This engine is released as part of StocPy, a new Turing-Complete probabilistic programming language, available as a Python library
Link: https://arxiv.org/abs/1501.04684
====================================================
The Hebrew Bible as Data: Laboratory - Sharing - Experiences (Dirk Roorda - 8 January, 2015)
We show how a subtle mix of computational ingredients enable scholars to research the transmission and interpretation of the Hebrew Bible in new ways: (1) a standard data format, Linguistic Annotation Framework (LAF); (2) the methods of scientific computing, made accessible by (interactive) Python and its associated ecosystem
Link: https://arxiv.org/abs/1501.01866
====================================================
Firedrake: automating the finite element method by composing abstractions (Florian Rathgeber - 1 July, 2016)
Firedrake adopts the domain-specific language for the finite element method of the FEniCS project, but with a pure Python runtime-only implementation centred on the composition of several existing and new abstractions for particular aspects of scientific computing
Link: https://arxiv.org/abs/1501.01809
====================================================
Numerical simulation of liver perfusion: from CT scans to FE model (VladimÃ­r LukeÅ¡ - 19 December, 2014)
We use a collection of Python programs for numerical simulation of liver perfusion. The generated FE mesh and vascular trees are imported into SfePy (Simple Finite Elements in Python) and numerical simulations are performed in order to get the pressure distribution and perfusion flows in the liver tissue
Link: https://arxiv.org/abs/1412.6412
====================================================
A Python-based Post-processing Toolset For Seismic Analyses (Steve Brasier - 19 December, 2014)
Extending the existing tools had become increasingly difficult and a decision was made to develop a new, Python-based toolset. This comprises of a post-processing framework (aftershock) which includes an embedded Python interpreter, and a plotting package (afterplot) based on numpy and matplotlib
Link: https://arxiv.org/abs/1412.6410
====================================================
Enhancing SfePy with Isogeometric Analysis (Robert Cimrman - 19 December, 2014)
In the paper a recent enhancement to the open source package SfePy (Simple Finite Elements in Python, http://sfepy.org) is introduced, namely the addition of another numerical discretization scheme, the isogeometric analysis, to the original implementation based on the nowadays standard and well-established numerical solution technique, the finite element method
Link: https://arxiv.org/abs/1412.6407
====================================================
pyFRET: A Python Library for Single Molecule Fluorescence Data Analysis (Rebecca R. Murphy - 19 December, 2014)
Here, we present pyFRET, an open source Python package for the analysis of data from single-molecule fluorescence experiments from freely diffusing biomolecules. pyFRET is available as a package downloadable from the Python Package Index (PyPI) under the open source three-clause BSD licence, together with links to extensive documentation and tutorials, including example usage and test data
Link: https://arxiv.org/abs/1412.6402
====================================================
Py3DFreeHandUS: a library for voxel-array reconstruction using Ultrasonography and attitude sensors (Davide Monari - 19 December, 2014)
Our python library Py3DFreeHandUS is a package for processing data acquired simultaneously by ultra-sonographic systems (US) and marker-based optoelectronic systems
Link: https://arxiv.org/abs/1412.6391
====================================================
Using Python to Dive into Signalling Data with CellNOpt and BioServices (Thomas Cokelaer - 19 December, 2014)
In this context, we present several python packages linked to CellNOptR (R package), which is used to build predictive logic models of signalling networks by training networks (derived from literature) to signalling (phospho-proteomic) data. The first package (cellnopt.wrapper) is a wrapper based on RPY2 that allows a full access to CellNOptR functionalities within Python
Link: https://arxiv.org/abs/1412.6386
====================================================
Wyrm, A Pythonic Toolbox for Brain-Computer Interfacing (Bastian Venthur - 19 December, 2014)
In this paper we present Wyrm, a signal processing toolbox for BCI in Python
Link: https://arxiv.org/abs/1412.6378
====================================================
Replacing ANSI C with other modern programming languages (Lidia Dobrescu - 18 December, 2014)
Replacing ANSI C language with other modern programming languages such as Python or Java may be an actual debate topic in technical universities
Link: https://arxiv.org/abs/1412.5867
====================================================
Testing MCMC code (Roger B. Grosse - 16 December, 2014)
As a running example, we show how a Python implementation of Gibbs sampling for a mixture of Gaussians model can be tested.
Link: https://arxiv.org/abs/1412.5218
====================================================
Towards Interactive, Incremental Programming of ROS Nodes (Sorin Adam - 15 December, 2014)
We propose the use of an internal DSL providing both a tool to interactively create ROS nodes and a behaviour-replacement mechanism to interactively reshape existing ROS nodes by wrapping the external interfaces (the publish/subscribe topics), dynamically controlled using the Python command line interface.
Link: https://arxiv.org/abs/1412.4714
====================================================
Machine Learning for Neuroimaging with Scikit-Learn (Alexandre Abraham - 12 December, 2014)
By considering different functional neuroimaging applications, we illustrate how scikit-learn, a Python machine learning library, can be used to perform some key analysis steps
Link: https://arxiv.org/abs/1412.3919
====================================================
Theano-based Large-Scale Visual Recognition with Multiple GPUs (Weiguang Ding - 6 April, 2015)
To the best of our knowledge, this is the first open-source Python-based AlexNet implementation to-date.
Link: https://arxiv.org/abs/1412.2302
====================================================
Easy Hyperparameter Search Using Optunity (Marc Claesen - 2 December, 2014)
Optunity is written in Python and contains interfaces to environments such as R and MATLAB
Link: https://arxiv.org/abs/1412.1114
====================================================
Simple and Effective Type Check Removal through Lazy Basic Block Versioning (Maxime Chevalier-Boisvert - 29 May, 2015)
Dynamically typed programming languages such as JavaScript and Python defer type checking to run time
Link: https://arxiv.org/abs/1411.0352
====================================================
Clustering Words by Projection Entropy (IÅÄ±k BarÄ±Å Fidaner - 24 October, 2014)
This procedure was implemented in Python and published as a free software: REBUS.
Link: https://arxiv.org/abs/1410.6830
====================================================
Computing the coefficients for the power series solution of the Lane-Emden equation with the Python library SymPy (Klaus Rohe - 25 January, 2015)
It is shown how the Python library Sympy can be used to compute symbolically the coefficients of the power series solution of the Lane-Emden equation (LEE). Sympy is an open source Python library for symbolic mathematics
Link: https://arxiv.org/abs/1409.2008
====================================================
Timed Runtime Monitoring for Multiparty Conversations (Rumyana Neykova - 25 August, 2014)
We present a timed API for Python to program distributed implementations of Scribble specifications
Link: https://arxiv.org/abs/1408.5979
====================================================
From Software Architecture Structure and Behavior Modeling to Implementations of Cyber-Physical Systems (Jan Oliver Ringert - 25 August, 2014)
For this, we present four code generators based on the MontiCore code generation framework, that implement the transformation from MontiArcAutomaton models to Mona (formal analysis), EMF Ecore (graphical editing), and Java and Python (deployment
Link: https://arxiv.org/abs/1408.5690
====================================================
JIDT: An information-theoretic toolkit for studying the dynamics of complex systems (Joseph T. Lizier - 3 December, 2014)
Furthermore, while written in Java, the toolkit can be used directly in MATLAB, GNU Octave, Python and other environments
Link: https://arxiv.org/abs/1408.3270
====================================================
scikit-image: Image processing in Python (Stefan van der Walt - 23 July, 2014)
It is released under the liberal "Modified BSD" open source license, provides a well-documented API in the Python programming language, and is developed by an active, international team of collaborators
Link: https://arxiv.org/abs/1407.6245
====================================================
Which Sustainable Software Practices Do Scientists Find Most Useful? (Jory Schossau - 9 September, 2014)
Our pre- and post-workshop surveys showed increases in self-reported familiarity, while our interviews showed that participants found learning Python more useful than learning the Unix shell, that they found pointers to further resources very valuable, and that background material---the "why" behind the skills---was also very valuable.
Link: https://arxiv.org/abs/1407.6220
====================================================
Process-Oriented Parallel Programming with an Application to Data-Intensive Computing (Edward Givelberg - 21 July, 2014)
It implements natural object-based parallelism using only minimal syntax extension of existing languages, such as C++ and Python, and has therefore the potential to lead to widespread adoption of parallel programming
Link: https://arxiv.org/abs/1407.5524
====================================================
PaPy: Parallel and Distributed Data-processing Pipelines in Python (Marcin Cieslik - 14 July, 2014)
A workflow is created from user-written Python functions (nodes) connected by 'pipes' (edges) into a directed acyclic graph. These functions are arbitrarily definable, and can make use of any Python modules or external binaries
Link: https://arxiv.org/abs/1407.4378
====================================================
Modeling structural change in spatial system dynamics: A Daisyworld example (Christian Neuwirth - 14 July, 2014)
To address this shortcoming, a Python program is proposed to tightly couple SD software to a Geographic Information System (GIS)
Link: https://arxiv.org/abs/1407.3661
====================================================
Multiparty Session Actors (Rumyana Neykova - 13 June, 2014)
 We demonstrate our framework by designing and implementing a session actor library in Python and its runtime verification mechanism.
Link: https://arxiv.org/abs/1406.3482
====================================================
Kahler: An Implementation of Discrete Exterior Calculus on Hermitian Manifolds (Alex Eftimiades - 4 June, 2014)
This paper details the techniques and algorithms implemented in Kahler, a Python library that implements discrete exterior calculus on arbitrary Hermitian manifolds. The program itself is written in Cython--a superset of the Python language that is translated to C and compiled for extra speed
Link: https://arxiv.org/abs/1405.7879
====================================================
BayesOpt: A Bayesian Optimization Library for Nonlinear Optimization, Experimental Design and Bandits (Ruben Martinez-Cantin - 28 May, 2014)
It includes a common interface for C, C++, Python, Matlab and Octave.
Link: https://arxiv.org/abs/1405.7430
====================================================
PyRDM: A Python-based library for automating the management and online publication of scientific software and data (Christian T. Jacobs - 21 August, 2014)
This paper presents a new Python-based library, PyRDM, whose functionality aims to automate the process of sharing the software and data via online, citable repositories such as Figshare
Link: https://arxiv.org/abs/1405.7290
====================================================
Fast and Robust Archetypal Analysis for Representation Learning (Yuansi Chen - 26 May, 2014)
We propose a fast optimization scheme using an active-set strategy, and provide an efficient open-source implementation interfaced with Matlab, R, and Python
Link: https://arxiv.org/abs/1405.6472
====================================================
Py-oopsi: the python implementation of the fast-oopsi algorithm (Benyuan Liu - 6 May, 2014)
Here, we propose detailed implementation of the fast-oopsi algorithm in python programming language
Link: https://arxiv.org/abs/1405.6181
====================================================
Using the Expectation Maximization Algorithm with Heterogeneous Mixture Components for the Analysis of Spectrometry Data (Dominik Kopczynski - 21 May, 2014)
We provide Python software implementing all three methods and make our evaluation data available at http://www.rahmannlab.de/research/ims.
Link: https://arxiv.org/abs/1405.5501
====================================================
Data-flow Analysis of Programs with Associative Arrays (David Hauzar - 5 May, 2014)
Dynamic programming languages, such as PHP, JavaScript, and Python, provide built-in data structures including associative arrays and objects with similar semantics-object properties can be created at run-time and accessed via arbitrary expressions
Link: https://arxiv.org/abs/1405.1116
====================================================
Mining online social networks with Python to study urban mobility (AntÃ²nia Tugores - 25 April, 2014)
Here we discuss the procedure to mine this data and store it in distributed databases using Python scripts
Link: https://arxiv.org/abs/1404.6966
====================================================
How to extract data from proprietary software database systems using TCP/IP? (Marc Burdon - 11 May, 2014)
For demonstration purposes only, we will use a CRM system called Harmony(r) by Harmony(r) Software AG, the programing language Python and methods of computer security, which are used to get quick access to the raw data.
Link: https://arxiv.org/abs/1404.6664
====================================================
SfePy - Write Your Own FE Application (Robert Cimrman - 29 April, 2014)
SfePy (Simple Finite Elements in Python) is a framework for solving various kinds of problems (mechanics, physics, biology, ...) described by partial differential equations in two or three space dimensions by the finite element method
Link: https://arxiv.org/abs/1404.6391
====================================================
JyNI - Using native CPython-Extensions in Jython (Stefan Richthofer - 29 April, 2014)
At the time of writing, JyNI does not fully implement the Python C-API and it is only capable of loading simple examples that only involve most basic built-in types. We expect that our work will also enable Java developers to use CPython extensions like NumPy in their Java code.
Link: https://arxiv.org/abs/1404.6390
====================================================
PySTEMM: Executable Concept Modeling for K-12 STEM Learning (Kelsey D&#39;Souza - 25 April, 2014)
This paper describes executable concept modeling of STEM concepts using immutable objects and pure functions in Python
Link: https://arxiv.org/abs/1404.6387
====================================================
High-Content Digital Microscopy with Python (Fabrice Salvaire - 29 April, 2014)
We will discuss how the Python ecosystem can provide such software framework efficiently
Link: https://arxiv.org/abs/1404.6385
====================================================
Bloscpack: a compressed lightweight serialization format for numerical data (Valentin Haenel - 29 April, 2014)
This paper introduces the Bloscpack file format and the accompanying Python reference implementation
Link: https://arxiv.org/abs/1404.6383
====================================================
Using Scripting Languages to Teach Programming (Apostolos Syropoulos - 22 April, 2014)
Nowadays, scripting programming languages like Python, Perl and Ruby are widely used in system programming, scientific computing, etc
Link: https://arxiv.org/abs/1404.5870
====================================================
A modified ziggurat algorithm for generating exponentially- and normally-distributed pseudorandom numbers (Christopher D McFarland - 21 April, 2014)
Even greater speedups are obtained when the algorithm is extended to the Python and MATLAB/OCTAVE programming environments.
Link: https://arxiv.org/abs/1403.6870
====================================================
NetworKit: A Tool Suite for Large-scale Complex Network Analysis (Christian L. Staudt - 13 November, 2015)
NetworKit is implemented as a hybrid combining the kernels written in C++ with a Python front end, enabling integration into the Python ecosystem of tested tools for data analysis and scientific computing
Link: https://arxiv.org/abs/1403.3005
====================================================
GGP with Advanced Reasoning and Board Knowledge Discovery (Adrian ÅaÅcucki - 22 January, 2014)
Implementations of proposed ideas constitutes the core of GGP Spatium - a small C++/Python GGP framework, created for developing compact GGP Players and problem solvers.
Link: https://arxiv.org/abs/1401.5813
====================================================
An efficient way to assemble finite element matrices in vector languages (FranÃ§ois Cuvelier - 19 June, 2015)
Matlab, Octave, Python, Scilab, R, Julia, C++ with STL,...). We compare numerically the performance of these algorithms in Matlab, Octave and Python, with that in FreeFEM++ and in a compiled language such as C
Link: https://arxiv.org/abs/1401.3301
====================================================
A General, Fast, and Robust Implementation of the Time-Optimal Path Parameterization Algorithm (Quang-Cuong Pham - 23 September, 2014)
We then present an open-source implementation of the algorithm in C++/Python and demonstrate its robustness and speed in various robotics settings.
Link: https://arxiv.org/abs/1312.6533
====================================================
Session Types Go Dynamic or How to Verify Your Python Conversations (Rumyana Neykova - 10 December, 2013)
This paper presents the first implementation of session types in a dynamically-typed language - Python
Link: https://arxiv.org/abs/1312.2704
====================================================
The IceProd Framework: Distributed Data Processing for the IceCube Neutrino Observatory (M. G. Aartsen - 22 August, 2014)
IceProd is a distributed management system based on Python, XML-RPC and GridFTP
Link: https://arxiv.org/abs/1311.5904
====================================================
Fast large-scale optimization by unifying stochastic gradient and quasi-Newton methods (Jascha Sohl-Dickstein - 29 November, 2014)
The algorithm is released as open source Python and MATLAB packages.
Link: https://arxiv.org/abs/1311.2115
====================================================
Modernizing PHCpack through phcpy (Jan Verschelde - 29 April, 2014)
This paper describes the development of phcpy, a Python interface to PHCpack. Instead of navigating through menus, users of phcpy solve systems in the Python shell or via scripts
Link: https://arxiv.org/abs/1310.0056
====================================================
ENFrame: A Platform for Processing Probabilistic Data (Sebastiaan J. van Schaik - 2 September, 2013)
Using ENFrame, users can write programs in a fragment of Python with constructs such as bounded-range loops, list comprehension, aggregate operations on lists, and calls to external database engines
Link: https://arxiv.org/abs/1309.0373
====================================================
API design for machine learning software: experiences from the scikit-learn project (Lars Buitinck - 1 September, 2013)
Written in Python, it is designed to be simple and efficient, accessible to non-experts, and reusable in various contexts. The paper also comments on implementation details specific to the Python ecosystem and analyzes obstacles faced by users and developers of the library.
Link: https://arxiv.org/abs/1309.0238
====================================================
Algorithm 950: Ncpol2sdpa---Sparse Semidefinite Programming Relaxations for Polynomial Optimization Problems of Noncommuting Variables (Peter Wittek - 12 June, 2015)
The implementation is available in Python
Link: https://arxiv.org/abs/1308.6029
====================================================
Improving the Testability of Object-oriented Software during Testing and Debugging Processes (Sujata Khatri - 15 August, 2013)
The parameters of the model along with the proportion of faults of different complexity to be removed from the software have been presented in the paper .We have used failure data of two object oriented software developed under open source environment namely MySQL for python and Squirrel SQL Client for estimation purpose
Link: https://arxiv.org/abs/1308.3320
====================================================
Invitation to Ezhil: A Tamil Programming Language for Early Computer-Science Education (Muthiah Annamalai - 7 August, 2013)
We believe this 'numeracy' knowledge is easily transferred over from a native language (Tamil) to the pervasive English language programming systems, in Java, dot-Net, Ruby or Python
Link: https://arxiv.org/abs/1308.1733
====================================================
Python for education: permutations (Andrzej Kapanowski - 26 July, 2013)
The class Perm is based on Python dictionaries and utilize cycle notation. The corresponding Python code is contained in the modules perms and groups.
Link: https://arxiv.org/abs/1307.7042
====================================================
Fast polynomial evaluation and composition (Guillaume Moroz - 26 July, 2013)
Natively, the library handles polynomials over gmp big integers, boost intervals, python numeric types
Link: https://arxiv.org/abs/1307.5655
====================================================
Next generation input-output data format for HEP using Google's protocol buffers (S. V. Chekanov - 27 June, 2013)
Data stored in ProMC files can be written, read and manipulated in a number of programming languages, such C++, Java and Python.
Link: https://arxiv.org/abs/1306.6675
====================================================
How fast can we make interpreted Python? (Russell Power - 13 August, 2013)
Python is a popular dynamic language with a large part of its appeal coming from powerful libraries and extension modules. Unfortunately, Python's performance is quite poor when compared to modern implementations of languages such as Lua and JavaScript.
Link: https://arxiv.org/abs/1306.6047
====================================================
Somoclu: An Efficient Parallel Library for Self-Organizing Maps (Peter Wittek - 9 June, 2017)
Python, R and MATLAB interfaces facilitate interactive use
Link: https://arxiv.org/abs/1305.1422
====================================================
GPU Scripting and Code Generation with PyCUDA (Andreas KlÃ¶ckner - 19 April, 2013)
On the other hand, scripting languages such as Python favor ease of use over computational speed and do not generally emphasize parallelism
Link: https://arxiv.org/abs/1304.5553
====================================================
What Makes Code Hard to Understand? (Michael Hansen - 26 April, 2013)
We present an experiment in which participants with programming experience predict the exact output of ten small Python programs
Link: https://arxiv.org/abs/1304.5257
====================================================
Locality Optimization for Data Parallel Programs (Eric Hielscher - 5 April, 2013)
In this paper, we discuss locality optimizations for our system Parakeet, a just-in-time compiler and runtime system for an array-oriented subset of Python
Link: https://arxiv.org/abs/1304.1835
====================================================
Towards Python-based Domain-specific Languages for Self-reconfigurable Modular Robotics Research (Mikael Moghadam - 22 February, 2013)
We review some of the current trends in self-reconfigurable robotics and describe the development of a software system for ATRON II which utilizes Linux and Python to significantly improve software abstraction and portability while providing some basic features which could prove useful when using Python, either stand-alone or via a DSL, on a self-reconfigurable robot system
Link: https://arxiv.org/abs/1302.5521
====================================================
PyPLN: a Distributed Platform for Natural Language Processing (FlÃ¡vio CodeÃ§o Coelho - 19 February, 2013)
PyPLN is developed using Python 2.7.3 but makes it very easy to incorporate other softwares for specific tasks as long as a linux version is available
Link: https://arxiv.org/abs/1301.7738
====================================================
PyXNAT: XNAT in Python (Yannick Schwartz - 29 January, 2013)
The choice of Python enables PyXNAT to expose the XNAT Web Services and unify their features with a higher level and more expressive language. PyXNAT provides XNAT users direct access to all the scientific packages in Python
Link: https://arxiv.org/abs/1301.6952
====================================================
Video Tester -- A multiple-metric framework for video quality assessment over IP networks (IÃ±aki Ucar - 24 January, 2013)
Our design facilitates the integration of virtually any existing video quality metric thanks to the adopted Python-based modular approach
Link: https://arxiv.org/abs/1301.5793
====================================================
API Blender: A Uniform Interface to Social Platform APIs (Georges Gouriten - 10 January, 2013)
We present our Python implementation of API Blender and its features regarding authentication, policy management and multi-platform data integration.
Link: https://arxiv.org/abs/1301.2086
====================================================
WorkingWiki: a MediaWiki-based platform for collaborative research (Lee Worden - 10 December, 2012)
Researchers can use it to collaborate on programs written in R, python, C, or any other language, and there are special features to support easy work on LaTeX documents
Link: https://arxiv.org/abs/1212.1986
====================================================
Mahotas: Open source software for scriptable computer vision (Luis Pedro Coelho - 4 January, 2013)
Mahotas is a computer vision library for Python
Link: https://arxiv.org/abs/1211.4907
====================================================
High-Order Discontinuous Galerkin Methods by GPU Metaprogramming (Andreas KlÃ¶ckner - 2 November, 2012)
In this article, we illuminate a few of the more practical aspects of bringing DG onto a GPU, including the use of a Python-based metaprogramming infrastructure that was created specifically to support DG, but has found many uses across all disciplines of computational science.
Link: https://arxiv.org/abs/1211.0582
====================================================
Multi-Agent Programming Contest 2012 - The Python-DTU Team (JÃ¸rgen Villadsen - 1 October, 2012)
We provide a brief description of the Python-DTU system, including the overall design, the tools and the algorithms that we plan to use in the agent contest.
Link: https://arxiv.org/abs/1210.0437
====================================================
Technical Report: CSVM Ecosystem (FrÃ©dÃ©ric Rodriguez - 11 September, 2012)
Some programming examples are also shown: a Python toolkit for using the format, manipulating and querying is available
Link: https://arxiv.org/abs/1209.2946
====================================================
CS Circles: An In-Browser Python Course for Beginners (David Pritchard - 10 December, 2012)
We teach Python since it is simple yet powerful, and the course content is well-structured but written in plain language
Link: https://arxiv.org/abs/1209.2166
====================================================
Technical report: CSVM dictionaries (FrÃ©dÃ©ric Rodriguez - 8 August, 2012)
This particular kind of CSVM is called a CSVM dictionary, it is also readable by the current CSVM parser and it is fully supported by the Python toolkit. This report presents a proposal for CSVM dictionaries, a working example in chemistry, and some elements of Python toolkit usable to handle these files.
Link: https://arxiv.org/abs/1208.1934
====================================================
Programing Using High Level Design With Python and FORTRAN: A Study Case in Astrophysics (Eduardo dos Santos Pereira - 16 July, 2012)
As an example, we present the framework called PYGRAWC (Python framework for Gravitational Waves from Cosmological origin). Even more, we show that the use of HLDM with Python and FORTRAN produces a powerful tool for solving astrophysical problems.
Link: https://arxiv.org/abs/1207.3658
====================================================
OGCOSMO: An auxiliary tool for the study of the Universe within hierarchical scenario of structure formation (Eduardo dos Santos Pereira - 16 July, 2012)
The languages used are PYTHON (VHL) and FORTRAN (IL). Even more, we show that the use of HLDM with PYTHON and FORTRAN is a powerful tool for producing astrophysical softwares.
Link: https://arxiv.org/abs/1207.3646
====================================================
Lucretia - a type system for objects in languages with reflection (Viviana Bono - 22 June, 2012)
Object-oriented scripting languages such as JavaScript or Python gain in popularity due to their flexibility
Link: https://arxiv.org/abs/1206.5112
====================================================
Implementation of Kalman Filter with Python Language (Mohamed Laaraiedh - 2 April, 2012)
In this paper, we investigate the implementation of a Python code for a Kalman Filter using the Numpy package
Link: https://arxiv.org/abs/1204.0375
====================================================
Function call overhead benchmarks with MATLAB, Octave, Python, Cython and C (AndrÃ© Gaul - 13 February, 2012)
We consider the overhead of function calls in the programming languages MATLAB/Octave, Python, Cython and C
Link: https://arxiv.org/abs/1202.2736
====================================================
Improving non-linear fits (Massimo Di Pierro - 6 February, 2012)
In this notes we describe an algorithm for non-linear fitting which incorporates some of the features of linear least squares into a general minimum $Ï^2$ fit and provide a pure Python implementation of the algorithm
Link: https://arxiv.org/abs/1202.0988
====================================================
Design and Implementation of a Simple Web Search Engine (Andri Mirzal - 8 February, 2012)
We present a simple web search engine for indexing and searching html documents using python programming language. Because python is well known for its simple syntax and strong support for main operating systems, we hope it will be beneficial for learning information retrieval techniques, especially web search engine technology.
Link: https://arxiv.org/abs/1112.2807
====================================================
Cameleon language Part 1: Processor (O. Cugnon de Sevricourt - 27 September, 2011)
For micro-programming, which focuses on how things happen, popular languages, Java, C++, Python, are imperative writing languages where the code is a sequence of sentences executed by the computer
Link: https://arxiv.org/abs/1110.4802
====================================================
Multi-Agent Programming Contest 2011 - The Python-DTU Team (JÃ¸rgen Villadsen - 1 October, 2011)
We provide a brief description of the Python-DTU system, including the overall design, the tools and the algorithms that we plan to use in the agent contest.
Link: https://arxiv.org/abs/1110.0105
====================================================
A new algebraic and arithmetic framework for interval computations (Nicolas Goze - 19 July, 2011)
Some simple applications for matrix eigenvalues calculations, inversion of symmetric matrices and finally optimization are exhibited in the object-oriented programming language python.
Link: https://arxiv.org/abs/1107.3667
====================================================
Algorithmic Programming Language Identification (David Klein - 9 November, 2011)
Code is written in Python and available under an MIT license.
Link: https://arxiv.org/abs/1106.4064
====================================================
Python GUI Scripting Interface for Running Atomic Physics Applications (Amani Tahat - 4 June, 2011)
The GUI has been built around the Python open-source programming language. We use the Python's GUI library that so called Python Mega Widgets (PMW) and based on Tkinter Python module (http://www.freenetpages.co.uk/hp/alan.gauld/tutgui.htm)
Link: https://arxiv.org/abs/1106.0868
====================================================
Integration of an RFID Reader to a Wireless Sensor Network and using it to Identify an Individual Carrying RFID Tags (Bolivar Torres - 30 April, 2011)
The software consisted of a program module developed in Python to control the microprocessors of the nodes; and a database controlled by a simple program to manage the tag IDs of people wearing them. Also, the work of sending commands to the RFID node, to make it read a tag and send it back to the computer, was accomplished by the Python code developed which also controls the data signals
Link: https://arxiv.org/abs/1105.0066
====================================================
DOLFIN: Automated Finite Element Computing (Anders Logg - 31 March, 2011)
Easy-to-use object-oriented interfaces to the library are provided in the form of a C++ library and a Python module
Link: https://arxiv.org/abs/1103.6248
====================================================
Numerical Experiments for Darcy Flow on a Surface Using Mixed Exterior Calculus Methods (Anil N. Hirani - 24 March, 2011)
The programming was done in the language Python, using the PyDEC package which makes the code very short and easy to read
Link: https://arxiv.org/abs/1103.4865
====================================================
PyDEC: Software and Algorithms for Discretization of Exterior Calculus (Nathan Bell - 27 February, 2012)
This paper describes the algorithms, features and implementation of PyDEC, a Python library for computations related to the discretization of exterior calculus. The availability of such libraries makes Python suitable for prototyping numerical methods
Link: https://arxiv.org/abs/1103.3076
====================================================
A FEniCS-Based Programming Framework for Modeling Turbulent Flow by the Reynolds-Averaged Navier-Stokes Equations (Mikael Mortensen - 31 March, 2011)
The novel implementation makes use of Python and the FEniCS package, the combination of which leads to compact and reusable code, where model- and solver-specific code resemble closely the mathematical formulation of equations and algorithms
Link: https://arxiv.org/abs/1102.2933
====================================================
The NumPy array: a structure for efficient numerical computation (Stefan Van Der Walt - 8 February, 2011)
In the Python world, NumPy arrays are the standard representation for numerical data
Link: https://arxiv.org/abs/1102.1523
====================================================
Python for education: the exact cover problem (Andrzej Kapanowski - 28 October, 2010)
Python implementation of Algorithm X by Knuth is presented
Link: https://arxiv.org/abs/1010.5890
====================================================
Mayavi: a package for 3D visualization of scientific data (Prabhu Ramachandran - 23 October, 2010)
For this purpose, Mayavi provides several entry points: a full-blown interactive application; a Python library with both a MATLAB-like interface focused on easy scripting and a feature-rich object hierarchy; widgets associated with these objects for assembling in a domain-specific application, and plugins that work with a general purpose application-building framework
Link: https://arxiv.org/abs/1010.4891
====================================================
A tool stack for implementing Behaviour-Driven Development in Python Language (Hugo Lopes Tavares - 10 July, 2010)
This paper presents a tool stack for the implementation, specification and test of software following the practices of Behavior Driven Development (BDD) in Python language
Link: https://arxiv.org/abs/1007.1722
====================================================
Youpi, a Web-based Astronomical Image Processing Pipeline (M. Monnerville - 5 June, 2010)
On the server side, Youpi is written in the Python programming language and uses the Django web framework
Link: https://arxiv.org/abs/1006.1074
====================================================
A Global Optimisation Toolbox for Massively Parallel Engineering Optimisation (Francesco Biscani - 21 April, 2010)
In addition to the C++ interface, PaGMO's capabilities are exposed to the high-level language Python, so that it is possible to easily use PaGMO in an interactive session and take advantage of the numerous scientific Python libraries available.
Link: https://arxiv.org/abs/1004.3824
====================================================
Simplifying Parallelization of Scientific Codes by a Function-Centric Approach in Python (Jon K. Nilsen - 3 February, 2010)
Many parallelization-specific components can be implemented as generic Python functions, which may take as input those functions that perform concrete computational tasks. The overall programming effort needed by this parallelization approach is rather limited, and the resulting parallel Python scripts have a compact and clean structure
Link: https://arxiv.org/abs/1002.0705
====================================================
Temporal Debugging using URDB (Ana Maria Visan - 27 October, 2009)
URDB acts as a meta-debugger, with current support for four widely used debuggers: gdb, MATLAB, python, and perl. Among its points of novelty are: (i) the first reversible debuggers for MATLAB, python, and perl; (ii) support for today's multi-core architectures; (iii) reversible debugging of multi-process and distributed computations; and (iv) temporal search on changes in program expressions
Link: https://arxiv.org/abs/0910.5046
====================================================
Ezhil: A Tamil Programming Language (Muthiah Annamalai - 28 July, 2009)
Grammar for Ezhil and a few example programs are reported here, from the initial proof-of-concept implementation using the Python programming language1
Link: https://arxiv.org/abs/0907.4960
====================================================
A Domain-Specific Language for Programming in the Tile Assembly Model (David Doty - 4 March, 2009)
The language is implemented as a class library in Python (a so-called internal DSL), but is presented independently of Python or object-oriented programming, with emphasis on supporting the creation of visual editing tools for programmatically creating large sets of complex tile types without needing to write a program.
Link: https://arxiv.org/abs/0903.0889
====================================================
How to turn a scripting language into a domain specific language for computer algebra (Raphael Jolly - 27 November, 2008)
In this paper we discuss the requirements for a scripting language in computer algebra and check whether the languages Python, Ruby, Groovy and Scala meet these requirements
Link: https://arxiv.org/abs/0811.1061
====================================================
Cross-Participants : fostering design-use mediation in an Open Source Software community (Flore Barcellini - 9 October, 2007)
We focus on the useroriented and the developer-oriented mailing-lists of the Python project
Link: https://arxiv.org/abs/0710.1772
====================================================
On the Design of Generic Static Analyzers for Modern Imperative Languages (Roberto Bagnara - 28 June, 2007)
The design and implementation of precise static analyzers for significant fragments of modern imperative languages like C, C++, Java and Python is a challenging problem
Link: https://arxiv.org/abs/cs/0703116
====================================================
Users' participation to the design process in an Open Source Software online community (Flore Barcellini - 1 December, 2006)
In particular we focus on how users of an Open Source (OS) programming language (Python) participate in adding new functionalities to the language. Our study characterizes the Python galaxy and analyses a formal process to introduce new functionalities to the language called Python Enhancement Proposal (PEP) from the idea of language evolution to the PEP implementation
Link: https://arxiv.org/abs/cs/0612009
====================================================
Remote-control and clustering of physical computations using the XML-RPC protocol and the open-Mosix system (T. Blachowicz - 28 March, 2006)
The paper describes in physicists terminology a cost effective solution which utilizes an XML-RPC protocol (Extensible Markup Language - Remote Procedure Calling) and standard C++ and Python languages.
Link: https://arxiv.org/abs/cs/0603111
====================================================
JClarens: A Java Framework for Developing and Deploying Web Services for Grid Computing (Michael Thomas - 11 April, 2005)
Two implementations of the Clarens Web Services Framework (Python and Java) offer integration possibilities for a wide range of programming languages
Link: https://arxiv.org/abs/cs/0504044
====================================================
Serving Database Information Using a Flexible Server in a Three Tier Architecture (Herbert Greenlee - 30 June, 2003)
DAN servers are currently implemented as a Python multithreaded program using CORBA for network communications and interface specification
Link: https://arxiv.org/abs/cs/0307001
====================================================
GANGA: a user-Grid interface for Atlas and LHCb (K. Harrison - 13 June, 2003)
Designed for a python-based component architecture, GANGA has a modular underpinning and is therefore well placed for contributing to, and benefiting from, work in related projects
Link: https://arxiv.org/abs/cs/0306085
====================================================
The Athena Startup Kit (W. T. L. P. Lavrijsen - 13 June, 2003)
Written in python, a very effective "glue" language, it is build on top of the, in principle unrelated, code repository, build, configuration, debug, binding, and analysis tools
Link: https://arxiv.org/abs/cs/0306083
====================================================
Clarens Client and Server Applications (Conrad D. Steenberg - 14 July, 2003)
This functionality is accessible transparently from Python scripts, the Root analysis framework and from Java applications and browser applets.
Link: https://arxiv.org/abs/cs/0306001
====================================================
Creating Annotation Tools with the Annotation Graph Toolkit (Kazuaki Maeda - 3 April, 2002)
There are interfaces for the scripting languages Tcl and Python, a database interface, specialized graphical user interfaces for a variety of annotation tasks, and several sample applications
Link: https://arxiv.org/abs/cs/0204005
====================================================
Proliferation of SDDS Support for Various Platforms and Languages (Robert Soliday - 5 November, 2001)
SDDS is now available in C, Tcl, Java, Fortran, and Python
Link: https://arxiv.org/abs/cs/0111006
====================================================
