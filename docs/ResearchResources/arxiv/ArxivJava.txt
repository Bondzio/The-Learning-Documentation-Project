If there are any errors
please Abort, and run `arxiv_required` for required package installation, and start again
Please wait while we phrase the requested information from global arxiv[arxiv.org] servers 
------------>
---------------------------->
------------------------------------------------------>
 
An Initial Step Towards Organ Transplantation Based on GitHub Repository (Shangwen Wang - 10 October, 2018)
Implementing our transplantation strategy for different kinds of organs, we manually extract 30 organs in three different programming languages, namely Java, Python, and C, and make unit tests for them utilizing four testing tools (two for Java, one for Python, and one for C). All the 30 organs extracted by our strategy possess good performances in unit test with the highest passing rate reaching 97% and the lowest one still passing 80% and the three Java organs work well in the new system, providing three new functionalities for the host
Link: https://arxiv.org/abs/1810.04825
====================================================
A Systematic Study on Static Control Flow Obfuscation Techniques in Java (Renuka Kumar - 28 September, 2018)
In this paper, we systematically study CFO techniques proposed for Java programs, both from papers and commercially available tools. We evaluate 13 obfuscators using a dataset of 16 programs with varying software characteristics, and different obfuscator parameters. Our study reveals that there are 36 unique techniques proposed in the literature and 7 from tools. Three of the most popular commercial obfuscators implement only 13 of the 36 techniques in the literature
Link: https://arxiv.org/abs/1809.11037
====================================================
Faster Variational Execution with Transparent Bytecode Transformation (Chu-Pan Wong - 11 September, 2018)
For example, the state-of-the-art variational execution interpreter for Java, VarexJ, slows down executions by 100 to 800 times over a single execution for small to medium size Java programs. Our evaluation shows a dramatic improvement on performance over the state-of-the-art, with a speedup of 2 to 46 times, and high efficiency in sharing computations.
Link: https://arxiv.org/abs/1809.04193
====================================================
Benchmarking of Java Verification Tools at the Software Verification Competition (SV-COMP) (Lucas Cordeiro - 11 September, 2018)
We provide a detailed description of the rules for benchmark verification tasks, the integration of new tools into SV-COMP's benchmarking framework and also give experimental results of a benchmarking run on three state-of-the-art Java verification tools, JPF-SE, JayHorn and JBMC.
Link: https://arxiv.org/abs/1809.03739
====================================================
Test Case Prioritization Using Test Similarities (Alireza Haghighatkhah - 1 September, 2018)
To achieve our objective, we implemented five different techniques from the literature and conducted an experiment using the defects4j dataset, which contains 395 real faults from six real-world open-source Java programs. Locality-sensitive hashing was, to a small extent, less effective than other SBTP techniques (VDA: 0.38 observed in comparison to normalized compression distance), but its speed largely outperformed the other techniques (i.e., it was approximately 5-111 times faster)
Link: https://arxiv.org/abs/1809.00138
====================================================
Automated Prototype Generation from Formal Requirements Model (Yilong Yang - 31 August, 2018)
The experimental result shows that the 93.65% of requirement specifications are executable, and only 6.35% are non-executable such as sorting and event-call, which can be implemented by developers manually or invoking the APIs of advanced algorithms in Java library
Link: https://arxiv.org/abs/1808.10657
====================================================
Vulnerable Open Source Dependencies: Counting Those That Matter (Ivan Pashchenko - 29 August, 2018)
METHOD: To understand the industrial impact of the proposed methodology, we considered the 200 most popular OSS Java libraries used by SAP in its own software. Our analysis included 10905 distinct GAVs (group, artifact, version) when considering all the library versions. RESULTS: We found that about 20% of the dependencies affected by a known vulnerability are not deployed, and therefore, they do not represent a danger to the analyzed library because they cannot be exploited in practice. Developers of the analyzed libraries are able to fix (and actually responsible for) 82% of the deployed vulnerable dependencies. The vast majority (81%) of vulnerable dependencies may be fixed by simply updating to a new version, while 1% of the vulnerable dependencies in our sample are halted, and therefore, potentially require a costly mitigation strategy
Link: https://arxiv.org/abs/1808.09753
====================================================
COBOL to Java and Newspapers Still Get Delivered (Alessandro De Marco - 10 August, 2018)
This paper is an experience report on migrating an American newspaper company's business-critical IBM mainframe application to Linux servers by automatically translating the application's source code from COBOL to Java and converting the mainframe data store from VSAM KSDS files to an Oracle relational database. The mainframe application had supported daily home delivery of the newspaper since 1979
Link: https://arxiv.org/abs/1808.03724
====================================================
STTM: A Tool for Short Text Topic Modeling (Jipeng Qiang - 7 August, 2018)
This paper presents the first comprehensive open-source package, called STTM, for use in Java that integrates the state-of-the-art models of short text topic modeling algorithms, benchmark datasets, and abundant functions for model inference and evaluation
Link: https://arxiv.org/abs/1808.02215
====================================================
An Empirical Study on Quality of Android Applications written in Kotlin language (Bruno Gois Mateus - 31 July, 2018)
Kotlin is programming language 100% interoperable with Java that combines Object-oriented and functional features.
Link: https://arxiv.org/abs/1808.00025
====================================================
Assessing Test Case Prioritization on Real Faults and Mutants (Qi Luo - 18 September, 2018)
The context of our study includes eight well-studied TCP approaches, 35k+ mutation faults, and 357 real-world faults from five Java systems in the Defects4J dataset
Link: https://arxiv.org/abs/1807.08823
====================================================
Fault Localization for Declarative Models in Alloy (Kaiyuan Wang - 23 July, 2018)
C and Java. We introduce new metrics to measure the accuracy of AlloyFL and systematically evaluate AlloyFL on 38 real faulty models and 9000 mutant models
Link: https://arxiv.org/abs/1807.08707
====================================================
The Impact of Feature Selection on Predicting the Number of Bugs (Haidar Osman - 12 July, 2018)
We study the impact of both correlation-based feature selection (CFS) filter methods and wrapper feature selection methods on five widely-used prediction models and demonstrate how these models perform with or without feature selection to predict the number of bugs in five different open source Java software systems. Our results show that wrappers outperform the CFS filter; they improve prediction accuracy by up to 33% while eliminating more than half of the features
Link: https://arxiv.org/abs/1807.04486
====================================================
The Effect of Noise on Sofware Engineers' Performance (Simone Romano - 11 July, 2018)
In the first experiment, we asked 55 students to comprehend functional requirements exposing them or not to noise, while in the second experiment 42 students were asked to fix faults in Java code
Link: https://arxiv.org/abs/1807.04100
====================================================
RACK: Automatic API Recommendation using Crowdsourced Knowledge (Mohammad Masudur Rahman - 9 July, 2018)
We first motivate our technique using an exploratory study with 11 core Java packages and 344K Java posts from Stack Overflow. Experiments using 150 code search queries randomly chosen from three Java tutorial sites show that our technique recommends correct API classes within the top 10 results for about 79% of the queries which is highly promising
Link: https://arxiv.org/abs/1807.02953
====================================================
What Stays in Mind? - Retention Rates in Programming MOOCs (Ralf Teusner - 20 September, 2018)
In 2015 and 2017, we conducted two introductory MOOCs on object-oriented programming in Java with each over 10,000 registered participants. To fill this knowledge gap, we conducted a survey in 2018 among all participants of our 2015 and 2017 programming MOOCs
Link: https://arxiv.org/abs/1807.01974
====================================================
Usability and Security Effects of Code Examples on Crypto APIs - CryptoExamples: A platform for free, minimal, complete and secure crypto examples (Kai Mindermann - 3 July, 2018)
Method: We created the open-source web platform CryptoExamples and conducted a controlled experiment where 58 students added symmetric encryption to a Java program. Results: The participants who used the platform were not only significantly more effective (+73 %) but also their code contained significantly less possible security vulnerabilities (-66 %)
Link: https://arxiv.org/abs/1807.01095
====================================================
Practical Access to Dynamic Programming on Tree Decompositions (Max Bannach - 26 June, 2018)
With this interface, dynamic programs for various problems, such as 3-coloring, can be implemented easily in about 100 lines of structured Java code.
Link: https://arxiv.org/abs/1806.10176
====================================================
How Do Static and Dynamic Test Case Prioritization Techniques Perform on Modern Software Systems? An Extensive Study on GitHub Projects (Qi Luo - 25 June, 2018)
This study was performed on 58 real-word Java programs encompassing 714 KLoC and results in several notable observations
Link: https://arxiv.org/abs/1806.09774
====================================================
Toxic Code Snippets on Stack Overflow (Chaiyong Ragkhitwetsagul - 20 June, 2018)
Our clone detection found online clone pairs between 72,365 Java code snippets on Stack Overflow and 111 open source projects in the curated Qualitas corpus. Our investigation revealed strong evidence that 153 clones have been copied from a Qualitas project to Stack Overflow. We found 100 of them (66%) to be outdated and potentially harmful for reuse. Furthermore, we found 214 code snippets that could potentially violate the license of their original software and appear 7,112 times in 2,427 GitHub projects.
Link: https://arxiv.org/abs/1806.07659
====================================================
Evaluating Maintainability Prejudices with a Large-Scale Study of Open-Source Projects (Tobias Roehm - 12 June, 2018)
For example, JavaScript is often seen as least elegant language and hence of lowest maintainability. We formulated 10 hypotheses about maintainability based on prejudices and test them in a large set of open-source projects (6,897 GitHub repositories, 402 million lines, 5 programming languages)
Link: https://arxiv.org/abs/1806.04556
====================================================
JPARSEC: a Java package for astronomy with twelve years of development and use (TomÃ¡s Alonso-Albi - 28 June, 2018)
JPARSEC is a Java library initially developed to implement a complete set of algorithms to compute ephemerides. JPARSEC itself includes more than 250 000 lines of code, similar or larger than other popular tools like Astropy, complemented with models and other projects operational since years
Link: https://arxiv.org/abs/1806.03088
====================================================
Large-Scale Learning from Data Streams with Apache SAMOA (Nicolas Kourtellis - 26 May, 2018)
Apache SAMOA is written in Java and is available at https://samoa.incubator.apache.org under the Apache Software License version 2.0.
Link: https://arxiv.org/abs/1805.11477
====================================================
A Formal Model of the Safety-Critical Java Level 2 Paradigm (Matt Luckcuck - 27 May, 2018)
Safety-Critical Java (SCJ) introduces a new programming paradigm for applications that must be certified. The SCJ specification (JSR 302) is an Open Group Standard, but it does not include verification techniques
Link: https://arxiv.org/abs/1805.10711
====================================================
Safety-Critical Java: Level 2 in Practice (Matt Luckcuck - 27 May, 2018)
Safety Critical Java (SCJ) is a profile of the Real-Time Specification for Java that brings to the safety-critical industry the possibility of using Java. SCJ defines three compliance levels: Level 0, Level 1 and Level 2. The SCJ specification is clear on what constitutes a Level 2 application in terms of its use of the defined API, but not the occasions on which it should be used. This paper broadly classifies the features that are only available at Level 2 into three groups:~nested mission sequencers, managed threads, and global scheduling across multiple processors
Link: https://arxiv.org/abs/1805.10710
====================================================
A Chaos Engineering System for Live Analysis and Falsification of Exception-handling in the JVM (Long Zhang - 14 May, 2018)
To evaluate our approach, we have deployed CHAOSMACHINE on top of 3 large-scale and well-known Java applications totaling 630k lines of code
Link: https://arxiv.org/abs/1805.05246
====================================================
Building Language Models for Text with Named Entities (Md Rizwan Parvez - 13 May, 2018)
We also introduce two benchmark datasets based on recipes and Java programming codes, on which we evalu- ate the proposed model. Experimental re- sults show that our model achieves 52.2% better perplexity in recipe generation and 22.06% on code generation than the state-of-the-art language models.
Link: https://arxiv.org/abs/1805.04836
====================================================
Characterizing the Usage and Impact of Java Annotations Over 1000+ Projects (Zhongxing Yu - 4 May, 2018)
As a kind of meta-data feature, annotations have been formally introduced into Java since Java 5. First, we answer the question "annotate what?" and find that annotations are typically used to annotate 4 aspects of program elements. Second, we answer the question "how annotations evolve?" and identify 6 different annotation change types, their frequencies, and their characteristics
Link: https://arxiv.org/abs/1805.01965
====================================================
Poster: Identification of Methods with Low Fault Risk (Rainer Niedermayr - 3 May, 2018)
We applied our approach to six Java open-source projects and show that on average 31.6% of the methods of a project have a low fault risk; they contain in total, on average, only 5.8% of all faults
Link: https://arxiv.org/abs/1805.01132
====================================================
QuickMergesort: Practically Efficient Constant-Factor Optimal Sorting (Stefan Edelkamp - 26 April, 2018)
The experiments show that QuickMergesort outperforms state-of-the-art library implementations, including C++'s Introsort and Java's Dual-Pivot Quicksort
Link: https://arxiv.org/abs/1804.10062
====================================================
Reducing Cascading Parsing Errors Through Fast Error Recovery (Lukas Diekmann - 19 April, 2018)
We validate our algorithms with a corpus of 200,000 real-world syntactically invalid Java programs: MF is able to repair 98.74% of files within acceptable time. By making use of the complete set of repair sequences, we show that the worst case for cascading errors is reduced by 32.27%.
Link: https://arxiv.org/abs/1804.07133
====================================================
Proactive Empirical Assessment of New Language Feature Adoption via Automated Refactoring: The Case of Java 8 Default Methods (Raffi Khatchadourian - 27 March, 2018)
Here, we explore Java 8 default methods, which allow interfaces to contain (instance) method implementations.
Link: https://arxiv.org/abs/1803.10198
====================================================
Multiview Hierarchical Agglomerative Clustering for Identification of Development Gap and Regional Potential Sector (T. A. Munandar - 25 March, 2018)
The data of GRDP sectors of 23 Districts in West Java province were tested by using Klassen, LQ, HAC and MVHAC and were then compared. MVHAC clusters 23 districts into 3 main clusters, they are, Cluster 1 (Quadrant 1) consists of 5 Districts as the members, Cluster 2 (Quadrant 2) consists of 12 Districts and Cluster 3 (Quadrant 4) consists of 6 Districts.
Link: https://arxiv.org/abs/1803.09379
====================================================
Learning Quick Fixes from Code Repositories (Reudismam Rolim - 7 September, 2018)
We present REVISAR, a tool for discovering common Java edit patterns in code repositories. We ran REVISAR on nine popular GitHub projects, and it discovered 89 useful edit patterns that appeared in 3 or more projects. Moreover, 64% of the discovered patterns did not appear in existing tools. We then conducted a survey with 164 programmers from 124 projects and found that programmers significantly preferred eight out of the nine of the discovered patterns. Finally, we submitted 16 pull requests applying our patterns to 9 projects and, at the time of the writing, programmers accepted 6 (60%) of them
Link: https://arxiv.org/abs/1803.03806
====================================================
Autonomous Reconfiguration Procedures for EJB-based Enterprise Applications (Thomas Vogel - 28 February, 2018)
It is based on the Autonomic Computing infrastructure mKernel that enables the management of EAs that are realized using Enterprise Java Beans (EJB) 3.0 technology
Link: https://arxiv.org/abs/1803.00049
====================================================
Evaluating Design Tradeoffs in Numeric Static Analysis for Java (Shiyi Wei - 24 February, 2018)
In this paper, we present a family of abstract interpretation-based numeric static analyses for Java and systematically evaluate the impact of 162 analysis configurations on the DaCapo benchmark suite
Link: https://arxiv.org/abs/1802.08927
====================================================
On the algorithm to find S-related Lie algebras (Carlos Inostroza - 14 February, 2018)
In this article we describe the Java library that we have recently constructed to automatize the S-expansion method, a powerful mathematical technique allowing to relate different Lie algebras. An important input in this procedure is the use of abelian semigroups and thus, we start with a brief review about the classification of non-isomorphic semigroups made in the literature during the last decades, and explain how the lists of non-isomorphic semigroups up to order 6 can be used as inputs in many of the methods of our library
Link: https://arxiv.org/abs/1802.05765
====================================================
Astor: Exploring the Design Space of Generate-and-Validate Program Repair beyond GenProg (Matias Martinez - 9 August, 2018)
Astor includes 6 Java implementation of repair approaches, including one of the pioneer: GenProg. The implementations of the repair approaches built over Astor are capable of repair, in total, 98 real bugs from 5 large Java programs.
Link: https://arxiv.org/abs/1802.03365
====================================================
Usage and Attribution of Stack Overflow Code Snippets in GitHub Projects (Sebastian Baltes - 21 September, 2018)
We present results of a large-scale empirical study analyzing the usage and attribution of non-trivial Java code snippets from SO answers in public GitHub (GH) projects. For the different sets of projects that we analyzed, the ratio of projects containing files with a reference to SO varied between 3.3% and 11.9%. We found that at most 1.8% of all analyzed repositories containing code from SO used the code in a way compatible with CC BY-SA 3.0
Link: https://arxiv.org/abs/1802.02938
====================================================
Automatically Leveraging MapReduce Frameworks for Data-Intensive Applications (Maaz Bin Safeer Ahmad - 19 June, 2018)
We evaluated Casper by automatically converting real-world, sequential Java benchmarks to MapReduce. The resulting benchmarks perform up to 48.2x faster compared to the original.
Link: https://arxiv.org/abs/1801.09802
====================================================
Why and How Java Developers Break APIs (Aline Brito - 16 January, 2018)
Therefore, in this paper, we report the results of an almost 4-month long field study with the developers of 400 popular Java libraries and frameworks. During the study, we identified 59 breaking changes, confirmed by the developers of 19 projects
Link: https://arxiv.org/abs/1801.05198
====================================================
Java & Lambda: a Featherweight Story (Lorenzo Bettini - 3 September, 2018)
Our main goal is to formalise how lambdas and intersection types are grafted on Java 8, by studying their properties in a formal setting
Link: https://arxiv.org/abs/1801.05052
====================================================
A Consumer Behavior Based Approach to Multi-Stage EV Charging Station Placement (Chao Luo - 7 January, 2018)
To investigate the interplay of the travel pattern, the consumer behavior, urban road network, power grid network, and the charging station placement, a simulation platform (The EV Virtual City 1.0) is developed using Java on Repast.We conduct a case study in the San Pedro District of Los Angeles by importing the geographic and demographic data of that region into the platform
Link: https://arxiv.org/abs/1801.02135
====================================================
Placement of EV Charging Stations --- Balancing Benefits among Multiple Entities (Chao Luo - 6 January, 2018)
A simulation software --- The EV Virtual City 1.0 --- is developed using Java to investigate the interactions among the consumers (EV owner), the transportation network graph, the electric power network graph, and the charging stations
Link: https://arxiv.org/abs/1801.02129
====================================================
FNS: an event-driven spiking neural network framework for efficient simulations of large-scale brain models (Gianluca Susi - 2 January, 2018)
In this paper we present FNS, a LIFL-based exact event-driven spiking neural network framework implemented in Java and oriented to wholebrain simulations. Finally, a reduced brain network model (1400 neurons and 45000 synapses) is synthesized on the basis of real brain structural data, and the resulting model activity is compared with associated brain functional (source-space MEG) data
Link: https://arxiv.org/abs/1801.00864
====================================================
ARJA: Automated Repair of Java Programs via Multi-Objective Genetic Programming (Yuan Yuan - 21 December, 2017)
In particular, compared to jGenProg (an implementation of GenProg for Java), an ARJA version fully following the redundancy assumption can generate a test-suite adequate patch for more than twice the number of bugs (from 27 to 59), and a correct patch for nearly four times of the number (from 5 to 18), on 224 real-world bugs considered in Defects4J
Link: https://arxiv.org/abs/1712.07804
====================================================
Kayak: Safe Semantic Refactoring to Java Streams (Cristina David - 20 December, 2017)
As an exemplar of this broader idea, we present Kayak, an automatic refactoring tool that transforms Java with external iteration over collections into code that uses Streams, a new abstraction introduced by Java 8
Link: https://arxiv.org/abs/1712.07388
====================================================
A Quantitative Study of Java Software Buildability (MatÃºÅ¡ SulÃ­r - 4 December, 2017)
Using a virtual environment simulating a programmer's one, we try to fully automatically build target archives from the source code of over 7,200 open source Java projects. We found that more than 38% of builds ended in failure
Link: https://arxiv.org/abs/1712.01024
====================================================
An Abstract Method Linearization for Detecting Source Code Plagiarism in Object-Oriented Environment (Oscar Karnalim - 29 November, 2017)
This paper extends Karnalim's work, a low-level approach for detecting Java source code plagiarism, by incorporating abstract method linearization. According to our evaluation, which was conducted based on 23 design-pattern source code pairs, our extended low-level approach is more effective than state-of-the-art and Karnalim's approach
Link: https://arxiv.org/abs/1711.10762
====================================================
A critical analysis of string APIs: The case of Pharo (Damien Pollet - 29 November, 2017)
In this article, we first analyse the Pharo 4 String library, then contrast it with its Haskell, Java, Python, Ruby, and Rust counterparts
Link: https://arxiv.org/abs/1711.10713
====================================================
PlinyCompute: A Platform for High-Performance, Distributed, Data-Intensive Tool Development (Jia Zou - 15 November, 2017)
This contrasts with most other Big Data systems, which are constructed on top of the Java Virtual Machine (JVM), and hence must at least partially cede performance-critical concerns such as memory management (including layout and de/allocation) and virtual method/function dispatch to the JVM. Through extensive benchmarking, we show that implementing complex objects manipulation and non-trivial, library-style computations on top of PlinyCompute can result in a speedup of 2x to more than 50x or more compared to equivalent implementations on Spark.
Link: https://arxiv.org/abs/1711.05573
====================================================
A Multiple Radar Approach for Automatic Target Recognition of Aircraft using Inverse Synthetic Aperture Radar (Carlos Pena-Caballero - 12 March, 2018)
We generated our dataset with 7 different aircraft models with a radar simulator we developed called RadarPixel; it is a Windows GUI program implemented using Matlab and Java programming, the simulator is capable of accurately replicating a real SAR/ISAR configurations
Link: https://arxiv.org/abs/1711.04901
====================================================
Active Learning of Points-To Specifications (Osbert Bastani - 21 May, 2018)
ATLAS automatically infers specifications for the Java standard library, and produces better results for a client static information flow analysis on a benchmark of 46 Android apps compared to using existing handwritten specifications.
Link: https://arxiv.org/abs/1711.03239
====================================================
Exhaustive Exploration of the Failure-oblivious Computing Search Space (Thomas Durieux - 23 March, 2018)
Our experiment consists of exhaustively computing the search space of 16 field failures of large-scale open-source Java software
Link: https://arxiv.org/abs/1710.09722
====================================================
Cross-Language Learning for Program Classification using Bilateral Tree-Based Convolutional Neural Networks (Nghi D. Q. Bui - 29 November, 2017)
For a preliminary evaluation, we use 3591 Java and 3534 C++ code snippets from 6 algorithms we crawled systematically from GitHub. We obtained over 90% accuracy in the cross-language binary classification task to tell whether any given two code snippets implement the same algorithm. Also, for the algorithm classification task, i.e., to predict which one of the six algorithm labels is implemented by an arbitrary C++ code snippet, we achieved over 80% precision.
Link: https://arxiv.org/abs/1710.06159
====================================================
A simple data discretizer (Gourab Mitra - 13 October, 2017)
The performance of the suggested approach is compared with the supervised discretization algorithm Minimum Information Loss (MIL), using the state-of-the-art rule inductive algorithms- J48 (Java implementation of C4.5 classifier)
Link: https://arxiv.org/abs/1710.05091
====================================================
Computation on Encrypted Data using Data Flow Authentication (Andreas Fischer - 1 October, 2017)
We implemented DFAuth using a novel authenticated homomorphic encryption scheme, a Java bytecode-to-bytecode compiler producing fully executable programs, and SGX enclaves. A transformed neural network that performs machine learning on sensitive medical data can be evaluated on encrypted inputs and encrypted weights in 0.86 seconds.
Link: https://arxiv.org/abs/1710.00390
====================================================
Data-driven Job Search Engine Using Skills and Company Attribute Filters (Rohit Muthyala - 15 September, 2017)
However, they have severely limited filters relating to skill sets such as C++, Python, and Java and company related attributes such as employee size, revenue, technographics and micro-industries. The high level implementation of the framework is described as follows: 1) Collect job postings data in the United States, 2) Extract meaningful tokens from the postings data using ETL pipelines, 3) Normalize the data set to link company names to their specific company websites, 4) Extract and ranking the skill sets, 5) Link the company names and websites to their respective company level attributes with the EVERSTRING Company API, 6) Run user-specific search queries on the database to identify relevant job postings and 7) Rank the job search results
Link: https://arxiv.org/abs/1709.05050
====================================================
A Comparison of Public Causal Search Packages on Linear, Gaussian Data with No Latent Variables (Joseph D. Ramsey - 16 September, 2017)
We compare Tetrad (Java) algorithms to the other public software packages BNT (Bayes Net Toolbox, Matlab), pcalg (R), bnlearn (R) on the \vanilla" task of recovering DAG structure to the extent possible from data generated recursively from linear, Gaussian structure equation models (SEMs) with no latent variables, for random graphs, with no additional knowledge of variable order or adjacency structure, and without additional specification of intervention information. We vary the number of variables, the number of samples, and the density of graph, for a total of 27 combinations, averaging all statistics over 10 runs, for a total of 270 datasets
Link: https://arxiv.org/abs/1709.04240
====================================================
Java Extensions for OMNeT++ (Henning Puttnies - 8 September, 2017)
Unfortunately, there is to the best of our knowledge no satisfying Java framework for network simulation, as the OMNeT++ Java support ended with OMNeT++ version 4.6. Hence, our contributions are as follows: we present Java extensions for OMNeT++ 5.0 that enable the execution of Java simulation models and give a detailed explanation of the working principles of the OMNeT++ Java extensions that are based on Java Native Interface
Link: https://arxiv.org/abs/1709.02823
====================================================
From Prediction to Planning: Improving Software Quality with BELLTREE (Rahul Krishna - 20 July, 2018)
In 10 open-source JAVA systems, several hundreds of defects were reduced in sections of the code that followed the plans generated by our planners
Link: https://arxiv.org/abs/1708.05442
====================================================
Lempel-Ziv Jaccard Distance, an Effective Alternative to Ssdeep and Sdhash (Edward Raff - 15 February, 2018)
To do so we develop a high performance Java implementation with the same command-line arguments as sdhash, making it easy to integrate into existing workflows. In addition, LZJD is up to 60x faster than sdhash at comparison time.
Link: https://arxiv.org/abs/1708.03346
====================================================
On the Effect of Semantically Enriched Context Models on Software Modularization (Amir Saeidi - 4 August, 2017)
We have applied our approach to 10 medium-sized open source Java projects, and show that by introducing contexts for identifiers, the quality of the modularization of the software systems is improved. In some cases, the authoritativeness of decompositions is improved by 67%
Link: https://arxiv.org/abs/1708.01680
====================================================
Revisiting Exception Handling Practices with Exception Flow Analysis (Guilherme B. de PÃ¡dua - 2 August, 2017)
Our case study is conducted with over 10K exception handling blocks, and over 77K related exception flows from 16 open-source Java and C# (.NET) libraries and applications. Our case study results show that each try block has up to 12 possible potentially recoverable yet propagated exceptions. More importantly, 22% of the distinct possible exceptions can be traced back to multiple methods (average of 1.39 and max of 34)
Link: https://arxiv.org/abs/1708.00817
====================================================
Sorting and Transforming Program Repair Ingredients via Deep Learning Code Similarities (Martin White - 15 July, 2017)
Our comparative experiments were executed on six open-source Java projects including 374 buggy program revisions and consisted of 19,949 trials spanning 2,616 days of computation time
Link: https://arxiv.org/abs/1707.04742
====================================================
Block-Matching Optical Flow for Dynamic Vision Sensor- Algorithm and FPGA Implementation (Min Liu - 16 June, 2017)
The OF can be calculated on FPGA with 50\,MHz clock in 0.2\,us per event (11 clock cycles), 20 times faster than a Java software implementation running on a desktop PC
Link: https://arxiv.org/abs/1706.05415
====================================================
Darwinian Data Structure Selection (Michail Basios - 1 August, 2018)
ARTEMIS achieves substantial performance improvements for \emph{every} project in $5$ Java projects from DaCapo benchmark, $8$ popular projects and $30$ uniformly sampled projects from GitHub. For execution time, CPU usage, and memory consumption, ARTEMIS finds at least one solution that improves \emph{all} measures for $86\%$ ($37/43$) of the projects
Link: https://arxiv.org/abs/1706.03232
====================================================
Is "Better Data" Better than "Better Data Miners"? (On the Benefits of Tuning SMOTE for Defect Prediction) (Amritanshu Agrawal - 20 February, 2018)
When applied in a 5*5 cross-validation study for 3,681 JAVA classes (containing over a million lines of code) from open source systems, SMOTUNED increased AUC and recall by 60% and 20% respectively
Link: https://arxiv.org/abs/1705.03697
====================================================
ACDC: Altering Control Dependence Chains for Automated Patch Generation (Rawad Abou Assi - 2 May, 2017)
We implemented our patch generation approach for the Java platform and evaluated our toolset using 148 defects from the Introclass and Siemens benchmarks. The toolset identified 56 full patches and another 46 partial patches, and the classification accuracy averaged 84%.
Link: https://arxiv.org/abs/1705.00811
====================================================
RefDiff: Detecting Refactorings in Version Histories (Danilo Silva - 5 April, 2017)
In an evaluation using an oracle of 448 known refactoring operations, distributed across seven Java projects, our approach achieved precision of 100% and recall of 88%
Link: https://arxiv.org/abs/1704.01544
====================================================
AMIDST: a Java Toolbox for Scalable Probabilistic Machine Learning (AndrÃ©s R. Masegosa - 4 April, 2017)
AMIDST is an open source toolbox written in Java and available at http://www.amidsttoolbox.com under the Apache Software License version 2.0.
Link: https://arxiv.org/abs/1704.01427
====================================================
Studying the Prevalence of Exception Handling Anti-Patterns (Guilherme B. de PÃ¡dua - 3 April, 2017)
We collected a thorough list of exception anti-patterns from 16 open-source Java and C# libraries and applications using an automated exception flow analysis tool
Link: https://arxiv.org/abs/1704.00778
====================================================
User Interface Design Smell: Automatic Detection and Refactoring of Blob Listeners (Arnaud Blouin - 25 May, 2018)
We conducted an empirical study on four large Java Swing and SWT open-source software systems. We conducted experiments on the four software systems for which we manually identified 53 instances of Blob Listener. InspectorGuidget successfully detected 52 Blob Listeners out of 53. The results exhibit a precision of 81.25% and a recall of 98.11%. 49.06% of the 53 Blob Listeners were automatically refactored
Link: https://arxiv.org/abs/1703.10674
====================================================
Automatic Detection of GUI Design Smells: The Case of Blob Listener (ValÃ©ria Lelli - 26 March, 2017)
In this work, we conducted an empirical study on 13 large Java Swing open-source software systems. We show that 21 % of the analyzed GUI controllers are Blob listeners. We conducted experiments on six software systems for which we manually identified 37 instances of Blob listener. InspectorGuidget successfully detected 36 Blob listeners out of 37. The results exhibit a precision of 97.37 % and a recall of 97.59 %
Link: https://arxiv.org/abs/1703.08803
====================================================
Extracting Build Changes with BUILDDIFF (Christian Macho - 24 March, 2017)
We then present two studies using the build changes extracted from 30 open source Java projects to study the frequency and time of build changes. The results show that the top 10 most frequent change types account for 73% of the build changes
Link: https://arxiv.org/abs/1703.08527
====================================================
Statically Checking Web API Requests in JavaScript (Erik Wittern - 15 February, 2017)
We evaluated our approach by checking whether web API requests in JavaScript files mined from GitHub are consistent or inconsistent with publicly available API specifications. From the 6575 requests in scope, our approach determined whether the request's URL and HTTP method was consistent or inconsistent with web API specifications with a precision of 96.0%. Our approach also correctly determined whether extracted request data was consistent or inconsistent with the data requirements with a precision of 87.9% for payload data and 99.9% for query data
Link: https://arxiv.org/abs/1702.03906
====================================================
Time-Space Efficient Regression Testing for Configurable Systems (Sabrina Souto - 11 February, 2017)
We observed a substantial reduction in time (22%) and in the number of configurations (45%) for configurable Java programs. In a case study on a large real-world configurable system (GCC), EvoSPLat reduced 35% of the running time
Link: https://arxiv.org/abs/1702.03457
====================================================
Static Detection of DoS Vulnerabilities in Programs that use Regular Expressions (Extended Version) (Valentin WÃ¼stholz - 15 January, 2017)
We have implemented our proposed approach in a tool called REXPLOITER and found 41 exploitable security vulnerabilities in Java web applications.
Link: https://arxiv.org/abs/1701.04045
====================================================
A Modularity Bug in Java 8 (Simon Kramer - 2 January, 2017)
We demonstrate a modularity bug in the interface system of Java 8 on the practical example of a textbook design of a modular interface for vector spaces. Our example originates in our teaching of modular object-oriented design in Java 8 to undergraduate students, simply following standard programming practices and mathematical definitions
Link: https://arxiv.org/abs/1701.02189
====================================================
Stream Fusion, to Completeness (Oleg Kiselyov - 20 December, 2016)
For instance, the popular, well-optimized Java 8 streams do not support the zip operator and are still an order of magnitude slower than hand-written loops. We greatly exceed in performance the standard stream libraries available in Java, Scala and OCaml, including the well-optimized Java 8 streams.
Link: https://arxiv.org/abs/1612.06668
====================================================
Operationalised product quality models and assessment: The Quamoco approach (Stefan Wagner - 28 November, 2016)
For Java and C# systems, we refined it with about 300 concrete product factors and 500 measures. (5) The extensive, open-source tool support is in a mature state. (6) The model for embedded software systems is a proof-of-concept for domain-specific quality models
Link: https://arxiv.org/abs/1611.09230
====================================================
On the Relationship of Inconsistent Software Clones and Faults: An Empirical Study (Stefan Wagner - 23 November, 2016)
Method: We conducted a case study with TWT GmbH where we detected the code clones in three Java systems, set them into relation to information from issue tracking and version control and interviewed three key developers. Results: Of the type-3 clones, 17 % contain faults
Link: https://arxiv.org/abs/1611.08005
====================================================
LigoDV-web: Providing easy, secure and universal access to a large distributed scientific data store for the LIGO Scientific Collaboration (Joseph S Areeda - 3 November, 2016)
Collaboration members with proper credentials can request data be displayed in any of several general formats from any Internet appliance that supports a modern browser with Javascript and minimal HTML5 support, including personal computers, smartphones, and tablets. To date 634 unique users have visited the LigoDV-web website in a total of 33,861 sessions and generated a total of 139,875 plots. This infrastructure has been helpful in many analyses within the collaboration including follow-up of the data surrounding the first gravitational-wave events observed by LIGO in 2015.
Link: https://arxiv.org/abs/1611.01089
====================================================
Benchmarking Web-testing - Selenium versus Watir and the Choice of Programming Language and Browser (Miikka Kuutila - 2 November, 2016)
We studied 5 programming language bindings (C#, Java, Python, and Ruby for Selenium, while Watir supports Ruby only) and 4 browsers (Google Chrome, Internet Explorer, Mozilla Firefox and Opera). The effect size of the difference between the slowest and fastest configuration was very high (Cohens d=41.5, 91% increase in execution time)
Link: https://arxiv.org/abs/1611.00578
====================================================
Multiple Regularizations Deep Learning for Paddy Growth Stages Classification from LANDSAT-8 (Ines Heidieni Ikasari - 6 October, 2016)
The study area was in Karawang District, lying in the Northern part of West Java-Indonesia. We address a paddy growth stages classification using LANDSAT 8 image data obtained from multi-sensor remote sensing image taken in October 2015 to August 2016
Link: https://arxiv.org/abs/1610.01795
====================================================
Production-Driven Patch Generation and Validation (Thomas Durieux - 12 June, 2018)
We present the design and implementation of a prototype system for Java, called Itzal, that performs patch generation for uncaught exceptions in production. We have performed two empirical experiments to validate our system: the first one on 34 failures from 14 different software applications, the second one on 16 seeded failures in 3 real open-source e-commerce applications for which we have set up a realistic user traffic
Link: https://arxiv.org/abs/1609.06848
====================================================
An Analysis of Introductory Programming Courses at UK Universities (Ellen Murphy - 31 March, 2017)
Knowledge: The results in this first UK survey indicate a dominance of Java at a time when universities are still generally teaching students who are new to programming (and computer science), despite the fact that Python is perceived, by the same respondents, to be both easier to teach as well as to learn. Grounding: We compare the results of this survey with a related survey conducted since 2010 (as well as earlier surveys from 2001 and 2003) in Australia and New Zealand
Link: https://arxiv.org/abs/1609.06622
====================================================
Tuning for Software Analytics: is it Really Necessary? (Wei Fu - 6 September, 2016)
Method: For each experiment with different data sets (from open source JAVA systems), we ran differential evolution as anoptimizer to explore the tuning space (as a first step) then tested the tunings using hold-out data. For example, when learning software defect predictors, this method can quickly find tuningsthat alter detection precision from 0% to 60%
Link: https://arxiv.org/abs/1609.01759
====================================================
A Source-level Energy Optimization Framework for Mobile Applications (Xueliang Li - 18 August, 2016)
To the best of our knowledge, our work is the first that achieves this for a high-level language such as Java. In a case study, the experimental evaluation shows that our approach is able to save from 6.4% to 50.2% of the CPU energy consumption in various application scenarios.
Link: https://arxiv.org/abs/1608.05248
====================================================
Data Scaling in OBDA Benchmarks: The VIG Approach (Davide Lanti - 29 July, 2016)
VIG is a java implementation licensed under Apache 2.0, and its source code is available on GitHub (https://github.com/ontop/vig) in the form of a Maven project
Link: https://arxiv.org/abs/1607.06343
====================================================
Why We Refactor? Confessions of GitHub Contributors (Danilo Silva - 8 July, 2016)
To fill this gap, we monitored Java projects hosted on GitHub to detect recently applied refactorings, and asked the developers to ex- plain the reasons behind their decision to refactor the code. By applying thematic analysis on the collected responses, we compiled a catalogue of 44 distinct motivations for 12 well-known refactoring types. Extract Method is the most versatile refactoring operation serving 11 different purposes
Link: https://arxiv.org/abs/1607.02459
====================================================
Mining Software Components from Object-Oriented APIs (Anas Shatnawi - 2 June, 2016)
To validate our approach, we experimented on 100 Java applications that used Android APIs.
Link: https://arxiv.org/abs/1606.00561
====================================================
Java Generics are Turing Complete (Radu Grigore - 7 November, 2016)
It follows that subtype checking in Java is undecidable, which answers a question posed by Kennedy and Pierce in 2007. It also follows that Java's type checker can recognize any recursive language, which improves a result of Gil and Levy from 2016
Link: https://arxiv.org/abs/1605.05274
====================================================
Text writing in the air (Saira Beg - 27 April, 2016)
For the experiments, we have developed an application using OpenCv with JAVA language. Results show that proposed algorithm gains the average accuracy of 92.083% when tested for different shaped alphabets. Here, more than 3000 different Magnetic 3D shaped characters were used [Ref: http://learnrnd.com/news.php?id=Magnetic_3D_Bio_Printing]
Link: https://arxiv.org/abs/1604.08245
====================================================
Probabilistic Graphical Models on Multi-Core CPUs using Java 8 (Andres R. Masegosa - 27 April, 2016)
In this paper, we discuss software design issues related to the development of parallel computational intelligence algorithms on multi-core CPUs, using the new Java 8 functional programming features. Through these concrete examples, we tackle the problem of defining efficient data structures for PGMs and parallel processing of same-size batches of data sets using Java 8 features
Link: https://arxiv.org/abs/1604.07990
====================================================
Automatic Parallelization: Executing Sequential Programs on a Task-Based Parallel Runtime (Alcides Fonseca - 11 April, 2016)
We have evaluated our approach on 8 benchmark programs against OoOJava, achieving higher speedups
Link: https://arxiv.org/abs/1604.03211
====================================================
A Java Data Security Framework (JDSF) and its Case Studies (Serguei A. Mokhov - 31 March, 2016)
We present the design of something we call Confidentiality, Integrity and Authentication Sub-Frameworks, which are a part of a more general Java Data Security Framework (JDSF) designed to support various aspects related to data security (confidentiality, origin authentication, integrity, and SQL randomization). The JDSF was originally designed in 2007 for use in the two use-cases, MARF and HSQLDB, to allow a plug-in-like implementation of and verification of various security aspects and their generalization
Link: https://arxiv.org/abs/1604.00025
====================================================
The Flipped SU(5) String Vacua Classification: A Variation Of The SO(10) Breaking Basis Vector (Hasan Sonmez - 8 June, 2016)
A JAVA code, akin to the one used for the classification in [1], was implemented to explore these. Results presented here indicate that no three generation exophobic vacua exist, which was also found to be the case in [1] as all odd generations were projected out. This paper will also study the details on the comparison between the two classifications achieved and then reflect on future directions in the quest for finding three generation exophobic flipped SU(5) heterotic-string models.
Link: https://arxiv.org/abs/1603.03504
====================================================
GeoGebra Tools with Proof Capabilities (ZoltÃ¡n KovÃ¡cs - 3 March, 2016)
As a result, a number of elementary theorems can be proven by using GeoGebra's intuitive user interface on various computer architectures including native Java and web based systems with JavaScript. We also provide a test suite for benchmarking our results with 200 test cases.
Link: https://arxiv.org/abs/1603.01228
====================================================
A Convolutional Attention Network for Extreme Summarization of Source Code (Miltiadis Allamanis - 25 May, 2016)
We demonstrate our convolutional attention neural network's performance on 10 popular Java projects showing that it achieves better performance compared to previous attentional mechanisms.
Link: https://arxiv.org/abs/1602.03001
====================================================
The Great Time Series Classification Bake Off: An Experimental Evaluation of Recently Proposed Algorithms. Extended Version (Anthony Bagnall - 4 February, 2016)
We have implemented 18 recently proposed algorithms in a common Java framework and compared them against two standard benchmark classifiers (and each other) by performing 100 resampling experiments on each of the 85 datasets. Our results indicate that only 9 of these algorithms are significantly more accurate than both benchmarks and that one classifier, the Collective of Transformation Ensembles, is significantly more accurate than all of the others
Link: https://arxiv.org/abs/1602.01711
====================================================
The Influence of the Java Collection Framework on Overall Energy Consumption (Rui Pereira - 2 February, 2016)
Finally, we present preliminary results of optimizing a set of Java programs where we obtained 6.2% energy savings.
Link: https://arxiv.org/abs/1602.00984
====================================================
Assessing and Improving the Mutation Testing Practice of PIT (Thomas Laurent - 11 January, 2016)
We show that comprehensive mutants are harder to kill and encode faults not captured by the mutants of PIT for a range of 11% to 62% of the Java classes of the considered projects.
Link: https://arxiv.org/abs/1601.02351
====================================================
Why Just Boogie? Translating Between Intermediate Verification Languages (Michael Ameri - 12 March, 2016)
Since the two systems support different back-end provers (such as Z3 and Alt-Ergo) and are used to encode different high-level languages (such as C# and Java), being able to translate between their intermediate languages would provide a way to reuse one system's features to verify programs meant for the other. We implemented the translation as a tool and applied it to 194 Boogie-verified programs of various sources and sizes; Why3 verified 83% of the translated programs with the same outcome as Boogie
Link: https://arxiv.org/abs/1601.00516
====================================================
A Learning Algorithm for Change Impact Prediction (Vincenzo Musco - 6 May, 2018)
To evaluate our system, we consider 7 Java software applications totaling 214,000+ lines of code. We simulate 17574 changes and their actual impact through code mutations, as done in mutation testing. We find that LCIP can predict the impact with a precision of 69%, a recall of 79%, corresponding to a F-Score of 55%.
Link: https://arxiv.org/abs/1512.07435
====================================================
On Symmetric Polynomials (Ryan Golden - 28 November, 2015)
As application, we give a computer algorithm, written in JAVA v. 8, for finding quantities from elementary symmetric polynomials.
Link: https://arxiv.org/abs/1511.08870
====================================================
A User's Guide to CARSKit (Yong Zheng - 12 November, 2015)
CARSKit is a Java-based open-source library specifically designed for the context-aware recommendation, where the state-of-the-art context-aware recommendation algorithms have been implemented
Link: https://arxiv.org/abs/1511.03780
====================================================
How Good is Multi-Pivot Quicksort? (Martin AumÃ¼ller - 31 May, 2016)
For many years, multi-pivot quicksort was regarded as impractical, but in 2009 a 2-pivot approach by Yaroslavskiy, Bentley, and Bloch was chosen as the standard sorting algorithm in Sun's Java 7. In 2014 at ALENEX, Kushagra et al. The algorithm behaves best if 3 to 5 pivots are used
Link: https://arxiv.org/abs/1510.04676
====================================================
How Scale Affects Structure in Java Programs (Cristina V. Lopes - 3 August, 2015)
Findings obtained on a very large collection of Java programs -- 30,911 projects hosted at Google Code as of Summer 2011 -- unveils how certain characteristics of programs vary disproportionately with program size, sometimes even non-monotonically
Link: https://arxiv.org/abs/1508.00628
====================================================
Fast, Flexible, and Declarative Construction of Abstract Syntax Trees with PEGs (Kimio Kuramitsu - 30 July, 2015)
The proposed approach is implemented in the Nez parser, written in Java. The performance study shows that the transactional AST machine requires 25\% approximately more time in CSV, XML, and C grammars.
Link: https://arxiv.org/abs/1507.08610
====================================================
Parallelization Strategies for Spatial Agent-Based Models (Nuno Fachada - 10 April, 2017)
In this paper we present a multithreaded Java implementation of the PPHPC ABM, with two goals in mind: 1) compare the performance of this implementation with an existing NetLogo implementation; and, 2) study how different parallelization strategies impact simulation performance on a shared memory architecture. Results show that: 1) model parallelization can yield considerable performance gains; 2) distinct parallelization strategies offer specific trade-offs in terms of performance and simulation reproducibility; and, 3) PPHPC is a valid reference model for comparing distinct implementations or parallelization strategies, from both performance and statistical accuracy perspectives.
Link: https://arxiv.org/abs/1507.04047
====================================================
Encog: Library of Interchangeable Machine Learning Models for Java and C# (Jeff Heaton - 15 June, 2015)
This paper introduces the Encog library for Java and C#, a scalable, adaptable, multiplatform machine learning framework that was 1st released in 2008
Link: https://arxiv.org/abs/1506.04776
====================================================
Evaluation of the Accuracy of the BGLemmatizer (Elena Karashtranova - 13 June, 2015)
This lemmatization software is written entirely in Java and is distributed as a GATE plugin. The results of the analysis show 95% lemmatization accuracy.
Link: https://arxiv.org/abs/1506.04229
====================================================
A Publicly Available Cross-Platform Lemmatizer for Bulgarian (Grigor Iliev - 13 June, 2015)
The presented software is written entirely in Java and is distributed as a GATE plugin. The presented lemmatizer is a work in progress and currently yields an accuracy of about 95% in comparison to the manually annotated corpus BulTreeBank-Morph, which contains 273933 tokens.
Link: https://arxiv.org/abs/1506.04228
====================================================
Automated Synthesis of Distributed Controllers (Anca Muscholl - 8 June, 2015)
Traditional concurrent programming paradigms, as in Java, are based on threads, shared-memory, and locking mechanisms that guard access to common data. More recent paradigms like the reactive programming model of Erlang [4] and Scala [35,36] replace shared memory by asynchronous message passing, where sending a message is non-blocking
Link: https://arxiv.org/abs/1506.02369
====================================================
On the "Naturalness" of Buggy Code (Baishakhi Ray - 10 September, 2015)
We consider a large corpus of bug fix commits (ca.~8,296), from 10 different Java projects, and we focus on its language statistics, evaluating the naturalness of buggy code and the corresponding fixes
Link: https://arxiv.org/abs/1506.01159
====================================================
Automatic Repair of Real Bugs: An Experience Report on the Defects4J Dataset (Matias Martinez - 23 December, 2015)
Defects4J is a large, peer-reviewed, structured dataset of real-world Java bugs. The result of our experiment shows that 47 bugs of the Defects4J dataset can be automatically repaired by state-of- the-art repair. We have manually analyzed 84 different patches to assess their real correctness. In total, 9 real Java bugs can be correctly fixed with test-suite based repair. With respect to practical applicability, it takes in average 14.8 minutes to find a patch. The experiment was done on a scientific grid, totaling 17.6 days of computation time
Link: https://arxiv.org/abs/1505.07002
====================================================
Opportunities for a Truffle-based Golo Interpreter (Julien Ponge - 22 May, 2015)
Golo is a simple dynamically-typed language for the Java Virtual Machine. Initially implemented as a ahead-of-time compiler to JVM bytecode, it leverages invokedy-namic and JSR 292 method handles to implement a reasonably efficient runtime
Link: https://arxiv.org/abs/1505.06003
====================================================
Unsupervised Neural Network-Naive Bayes Model for Grouping Data Regional Development Results (Azhari SN - 20 May, 2015)
Testing models of clustering, performed on a dataset of two provinces, namely Banten (as a data testing) and Central Java (as the training data), to see the accuracy of the classification model proposed. The results showed the clustering accuracy rate of the model was 98.1%, while the clustering accuracy rate of the model results compared to manual analysis shows the accuracy of the typology Klassen smaller, ie 29.63%
Link: https://arxiv.org/abs/1505.05322
====================================================
Regional Development Classification Model using Decision Tree Approach (Tb. Ai Munandar - 20 May, 2015)
GDP Data Central Java and Banten used in this study. The results show that the J48 has a better accuracy rate which is equal to 85.18% compared to the algorithm NBTRee and REPTree
Link: https://arxiv.org/abs/1505.05321
====================================================
Grounded Discovery of Coordinate Term Relationships between Software Entities (Dana Movshovitz-Attias - 1 May, 2015)
To this end, we develop a similarity measure for Java classes using distributional information about how they are used in software, which we combine with corpus statistics on the distribution of contexts in which the classes appear in text. Using our approach, cross-validation accuracy on this dataset can be improved dramatically, from around 60% to 88%. Human labeling results show that our classifier has an F1 score of 86% over the top 1000 predicted pairs.
Link: https://arxiv.org/abs/1505.00277
====================================================
DSpot: Test Amplification for Automatic Assessment of Computational Diversity (Benoit Baudry - 15 June, 2015)
Results: We run our experiments on 472 variants of 7 classes from open-source, large and thoroughly tested Java classes
Link: https://arxiv.org/abs/1503.05807
====================================================
March of the Starbugs: Configuring Fibre-bearing Robots on the UK-Schmidt Optical Plane (Nuria P. F. Lorente - 15 March, 2015)
The software is written in C++ and Java and employs a DRAMA middleware layer (Farrell et al. 1995).
Link: https://arxiv.org/abs/1503.04511
====================================================
Simulation of Genetic Algorithm: Traffic Light Efficiency (Eric Lienert - 15 March, 2015)
The Java code called upon the SUMO simulation via a command prompt which ran the simulation, received the output, altered the algorithm, and looped. The SUMO component initialized a simulation in which a 1 x 1 street layout was created, each intersection with its own traffic light
Link: https://arxiv.org/abs/1503.04475
====================================================
Exploiting Multimodal Biometrics in E-Privacy Scheme for Electronic Health Records (Adebayo Omotosho - 4 February, 2015)
The system was implemented using multi biometrics of patients to access patient record in pre-hospital care.The software development tools employed were JAVA and MySQL database. The result of the system evaluation shows that the average response time of 6 seconds and 11.1 seconds for fingerprint and iris respectively after ten different simulations
Link: https://arxiv.org/abs/1502.01233
====================================================
Analysis of Pivot Sampling in Dual-Pivot Quicksort (Sebastian Wild - 10 August, 2015)
The new dual-pivot Quicksort by Vladimir Yaroslavskiy - used in Oracle's Java runtime library since version 7 - features intriguing asymmetries
Link: https://arxiv.org/abs/1412.0193
====================================================
ASTOR: Evolutionary Automatic Software Repair for Java (Matias Martinez - 24 October, 2014)
It implements three state-of-the-art automatic software repair approaches in the context of Java programs (including GenProg and a subset of PAR's templates)
Link: https://arxiv.org/abs/1410.6651
====================================================
Test Case Purification for Improving Fault Localization (Jifeng Xuan - 10 September, 2014)
Our experiments on 1800 faults in six open-source Java programs show that test case purification can effectively improve existing fault localization techniques.
Link: https://arxiv.org/abs/1409.3176
====================================================
GrayStar: A Web application for pedagogical stellar atmosphere and spectral line modelling and visualisation II: Methods (C. Ian Short - 5 September, 2014)
GrayStar is a stellar atmospheric and spectral line modelling, post-processing, and visualisation code, suitable for classroom demonstrations and laboratory-style assignments, that has been developed in Java and deployed in JavaScript and HTML. Therefore, the code will run on any common PC or related X86 (-64) computer of the type that typically serves classroom data projectors, is found in undergraduate computer laboratories, or that students themselves own, including those with highly portable form-factors such as net-books and tablets
Link: https://arxiv.org/abs/1409.1893
====================================================
GrayStar: A Web application for pedagogical stellar atmosphere and spectral line modelling and visualisation (C. Ian Short - 5 September, 2014)
GrayStar is a stellar atmospheric and spectral line modelling, post-processing, and visualisation code, suitable for classroom demonstrations and laboratory-style assignments, that has been developed in Java and deployed in JavaScript and HTML. Therefore, the code will run on any common PC or related X86 (-64) computer of the type that typically serves classroom data projectors, is found in undergraduate computer laboratories, or that students themselves own, including those with highly portable form-factors such as net-books and tablets
Link: https://arxiv.org/abs/1409.1891
====================================================
A Comparative Study of Programming Languages in Rosetta Code (Sebastian Nanz - 22 January, 2015)
Our study is based on 7087 solution programs corresponding to 745 tasks in 8 widely used languages representing the major programming paradigms (procedural: C and Go; object-oriented: C# and Java; functional: F# and Haskell; scripting: Python and Ruby)
Link: https://arxiv.org/abs/1409.0252
====================================================
Design and Implementation of Parallel Debugger and Profiler for MPJ Express (Aleem Akhtar - 27 August, 2014)
Despite its successful adoption in the Java HPC community, the MPJ Express software currently does not provide any support for debugging and profiling parallel applications and hence forces its users to rely on manual and tedious debugging/profiling methods. Key design goals for these tools include: 1) maintain compatibility with existing logging, debugging, and visualizing tools, 2) build these tools by extending existing debugging/profiling tools instead of reinventing the wheel
Link: https://arxiv.org/abs/1408.6347
====================================================
Open Educational Resources from Performance Task using Video Analysis and Modeling - Tracker and K12 science education framework (Loo Kang Wee - 25 August, 2014)
This paper hopes to spur fellow colleagues to look into open education initiatives such as our Singapore Tracker community open educational resources curate on http://weelookang.blogspot.sg/p/physics-applets-virtual-lab.html as well as digital libraries http://iwant2study.org/lookangejss/ directly accessible through Tracker 4.86, EJSS reader app on Android and iOS and EJS 5.0 authoring toolkit for computer models in Easy Java Simulation-Open Source Physics Project
Link: https://arxiv.org/abs/1408.5992
====================================================
What Java Developers Know About Compatibility, And Why This Matters (Jens Dietrich - 11 August, 2014)
In case of the Java language, rules defined in the Java Language and Java Virtual Machine Specifications define when library evolution is safe. 414 developers responded to our survey
Link: https://arxiv.org/abs/1408.2607
====================================================
Inferring Loop Invariants by Mutation, Dynamic Analysis, and Static Checking (Juan P. Galeotti - 5 February, 2016)
We present a framework that automatically applies these techniques to support a program prover, paving the way for fully automatic verification without manually written loop invariants: Applied to 28 methods (including 39 different loops) from various java.util classes (occasionally modified to avoid using Java features not fully supported by the static checker), our DYNAMATE prototype automatically discharged 97% of all proof obligations, resulting in automatic complete correctness proofs of 25 out of the 28 methods---outperforming several state-of-the-art tools for fully automatic verification.
Link: https://arxiv.org/abs/1407.5286
====================================================
UCov: a User-Defined Coverage Criterion for Test Case Intent Verification (Rawad Abou Assi - 11 July, 2014)
We implemented our methodology for the Java platform and applied it onto two real life case studies. Our implementation comprises the following: 1) an Eclipse plugin allowing the user to easily specify non-trivial test requirements; 2) the ability of cross referencing test requirements across subsequent versions of a given program; and 3) the ability of checking whether user-defined test requirements were satisfied, i.e., test case intent verification.
Link: https://arxiv.org/abs/1407.3091
====================================================
Is Fortran Still Relevant? Comparing Fortran with Java and C++ (Shahid Alam - 11 June, 2014)
This paper presents a comparative study to evaluate and compare Fortran with the two most popular programming languages Java and C++. Fortran has gone through major and minor extensions in the years 2003 and 2008
Link: https://arxiv.org/abs/1407.2190
====================================================
A Cyber-Physical System-based Approach for Industrial Automation Systems (Kleanthis Thramboulidis - 8 July, 2014)
For PLC targets, the new version of IEC 61131 that supports Object-Orientation is adopted, while Java is used for embedded boards
Link: https://arxiv.org/abs/1407.2077
====================================================
Clash of the Lambdas (Aggelos Biboudis - 14 July, 2014)
The introduction of lambdas in Java 8 completes the slate of statically-typed, mainstream languages with both object-oriented and functional features
Link: https://arxiv.org/abs/1406.6631
====================================================
Group Communication Patterns for High Performance Computing in Scala (Felix P. Hargreaves - 24 June, 2014)
Furthermore, we show that the group communication operations of FooPar outperform those of the MPJ Express open source MPI-bindings for Java, both asymptotically and empirically. In this article, we present results on a parallel implementation of the Floyd-Warshall algorithm in FooPar, achieving more than 94 % efficiency compared to the serial version on a cluster using 100 cores for matrices of dimension 38000 x 38000.
Link: https://arxiv.org/abs/1406.6163
====================================================
XRD fitting analysis of semiconductor heterostructures [Puolijohderakenteiden rÃ¶ntgendiffraktion sovitusanalyysi] (in Finnish) (Juha-Matti Tilli - 3 June, 2014)
For measurement analysis a software was written with Java/Matlab, user interface (UI) of which was designed by taking into account feedback from users. Operability of simulation code of XRD curves was tested by comparing the curves simulated by it with curves simulated by 2 other software using single/multilayer InGaAs, GaAs and GaAsN structures
Link: https://arxiv.org/abs/1406.0814
====================================================
Integrated Data Acquisition, Storage, Retrieval and Processing Using the COMPASS DataBase (CDB) (J. Urban - 31 March, 2014)
CDB is implemented in Python language; bindings for Java, C/C++, IDL and Matlab are provided. Independent data acquisitions systems as well as nodes managed by FireSignal [2] are all integrated using CDB
Link: https://arxiv.org/abs/1403.7928
====================================================
Pivot Sampling in Dual-Pivot Quicksort (Markus E. Nebel - 13 June, 2014)
The new dual-pivot Quicksort by Vladimir Yaroslavskiy - used in Oracle's Java runtime library since version 7 - features intriguing asymmetries in its behavior
Link: https://arxiv.org/abs/1403.6602
====================================================
Classification of Flipped SU(5) Heterotic-String Vacua (Alon E. Faraggi - 30 March, 2014)
For that purpose, two independent codes were developed based on JAVA and FORTRAN95. Contrary to the corresponding Pati-Salam classification, we do not find exophobic flipped SU(5) vacua with an odd number of generations
Link: https://arxiv.org/abs/1403.4107
====================================================
Fine-grained Patches for Java Software Upgrades (Eduardo R. B. Marques - 17 February, 2014)
We present the main traits of the methodology, a prototype tool called aspa that implements it, and a case-study analysis on the use of aspa to derive patches for the Java 2 SE API
Link: https://arxiv.org/abs/1402.4164
====================================================
r-Java 2.0: the astrophysics (M. Kostka - 16 February, 2014)
[Context:] This article is the second in a two part series introducing r-Java 2.0, a nucleosynthesis code for open use that performs r-process calculations and provides a suite of other analysis tools. [Aims:] The first paper discussed the nuclear physics inherent to r-Java 2.0 and in this article the astrophysics incorporated into the software will be detailed. [Methods:] R-Java 2.0 allows the user to specify the density and temperature evolution for an r-process simulation. Within r-Java 2.0 the user has the option to select astrophysical environments which have unique sets of input parameters available for the user to adjust. R-Java 2.0 is available for download from the website of the Quark-Nova Project: http://quarknova.ucalgary.ca/
Link: https://arxiv.org/abs/1402.3824
====================================================
r-Java 2.0: the nuclear physics (M. Kostka - 16 February, 2014)
[Aims:] We present r-Java 2.0, a nucleosynthesis code for open use that performs r-process calculations as well as a suite of other analysis tools. [Methods:] Equipped with a straightforward graphical user interface, r-Java 2.0 is capable of; simulating nuclear statistical equilibrium (NSE), calculating r-process abundances for a wide range of input parameters and astrophysical environments, computing the mass fragmentation from neutron-induced fission as well as the study of individual nucleosynthesis processes. The sophisticated fission methodology incorporated into r-Java 2.0 which includes three fission channels (beta-delayed, neutron-induced and spontaneous fission) as well as computation of the mass fragmentation is compared to the upper limit on mass fission approximation. A comparative analysis was undertaken during the development of r-Java 2.0 whereby we reproduced the results found in literature from three other r-process codes. As well the users of r-Java 2.0 are given the freedom to define a custom environment
Link: https://arxiv.org/abs/1402.3823
====================================================
Destination Information Management System for Tourist (Shafii Muhammad Abdulhamid - 5 February, 2014)
The information management system was designed using Java Applet (NetBeans IDE 6.1), Hypertext MarkUp Language (HTML), Personal Home Page (PHP), Java script and MySQL as the back-end integration database
Link: https://arxiv.org/abs/1402.1243
====================================================
Non-Termination Analysis of Java Bytecode (Ãtienne Payet - 21 January, 2014)
Our approach can handle method calls; to the best of our knowledge, it is the first static approach for Java bytecode able to prove the existence of infinite recursions. We have compared the results of Julia on a set of 113 programs with those provided by AProVE and Invel, the only freely usable non-termination analysers comparable to ours that we are aware of
Link: https://arxiv.org/abs/1401.5292
====================================================
Easy Java Simulation, an innovative tool for teachers as designers of gravity-physics computer models (Loo Kang Wee - 29 January, 2014)
This paper is on customization of computer models using the Easy Java Simulation authoring toolkit for the Singapore syllabus, based on real astronomical data, supported with literature reviewed researched pedagogical features. These 4 new computer models serves to support the enactment of scientific work that are inquiry centric and evidence based that are more likely to promote enjoyment and inspire imagination having experienced gravity-physics than traditional pen and paper problem solving
Link: https://arxiv.org/abs/1401.3061
====================================================
Java File Security System (JFSS) Evaluation Using Software Engineering Approaches (Brijender Kahanwal - 6 December, 2013)
A Java File Security System (JFSS) [1] has been developed by us
Link: https://arxiv.org/abs/1312.1817
====================================================
Distributed Multiscale Computing with MUSCLE 2, the Multiscale Coupling Library and Environment (Joris Borgdorff - 22 November, 2013)
This multiscale component-based execution environment has a simple to use Java, C++, C, Python and Fortran API, compatible with MPI, OpenMP and threading codes. We demonstrate its local and distributed computing capabilities and compare its performance to MUSCLE 1, file copy, MPI, MPWide, and GridFTP. The local throughput of MPI is about two times higher, so very tightly coupled code should use MPI as a single submodel of MUSCLE 2; the distributed performance of GridFTP is lower, especially for small messages. We test the performance of a canal system model with MUSCLE 2, where it introduces an overhead as small as 5% compared to MPI.
Link: https://arxiv.org/abs/1311.5740
====================================================
Performance Evaluation of Java File Security System (JFSS) (Brijender Kahanwal - 13 November, 2013)
We have developed a file security system named as Java File Security System (JFSS) [1] that guarantee the security to files on the demand of all users. It is developed in FUSE (File System in User space) [3]
Link: https://arxiv.org/abs/1311.3686
====================================================
Mining Software Repair Models for Reasoning on the Search Space of Automated Program Fixing (Matias Martinez - 14 November, 2013)
By applying our method on 14 repositories of Java software and 89,993 versioning transactions, we show that not all probabilistic repair models are equivalent.
Link: https://arxiv.org/abs/1311.3414
====================================================
Average Case Analysis of Java 7's Dual Pivot Quicksort (Sebastian Wild - 28 October, 2013)
Recently, a new Quicksort variant due to Yaroslavskiy was chosen as standard sorting method for Oracle's Java 7 runtime library
Link: https://arxiv.org/abs/1310.7409
====================================================
PPF - A Parallel Particle Filtering Library (Ãmer Demirel - 4 April, 2014)
The library is implemented in Java and relies on OpenMPI's Java bindings for inter-process communication. The PPF library runs a 38 million particle problem, corresponding to more than 1.86 GB of particle data, on 192 cores with 67% parallel efficiency
Link: https://arxiv.org/abs/1310.5045
====================================================
Modularity Index Metrics for Java-Based Open Source Software Projects (Andi Wahju Rahardjo Emanuel - 22 September, 2013)
This software metrics is formulated by analyzing modularity traits such as size, complexity, cohesion, and coupling of 59 Java-based OSS Projects from sourceforge.net using SONAR tool
Link: https://arxiv.org/abs/1309.5689
====================================================
Automatically Extracting Instances of Code Change Patterns with AST Analysis (Matias Martinez - 15 September, 2013)
We validate our approach by counting instances of 18 change patterns in 6 open-source Java projects.
Link: https://arxiv.org/abs/1309.3730
====================================================
Source Code Retrieval Using Sequence Based Similarity (Yoshihisa Udagawa - 16 August, 2013)
We developed a lexical parser to extract control statements and method identifiers from Java programs. Experiments show that our retrieval model outperforms the other retrieval models up to 90.9% in the number of retrieved methods.
Link: https://arxiv.org/abs/1308.3554
====================================================
Open Source Physics (Loo Kang Wee - 12 August, 2013)
Open Source Physics (OSP) focuses on design of computer models, such as Easy Java Simulations (EJS) and the use of video modeling and analysis (Tracker). Essentially, the two main pedagogical approaches (Figure 1) used in OSP are: Guided Inquiry investigating modeled phenomena(EJS) video analysis (Tracker) Constructionism learning by making new models(EJS) video modeling(Tracker)
Link: https://arxiv.org/abs/1308.2614
====================================================
Empirical Evidence of Large-Scale Diversity in API Usage of Object-Oriented Software (Diego Mendez - 21 August, 2013)
For instance, we observe in our dataset that Java's String is used in 2460 manners
Link: https://arxiv.org/abs/1307.4062
====================================================
From Principles to Practice with Class in the First Year (Sam Tobin-Hochstadt - 10 December, 2013)
After working through the sequence of pedagogical languages, we then transition to Java, at which point students have a strong command of the basic principles. We have 3 years of experience with this course, with notable success.
Link: https://arxiv.org/abs/1306.4713
====================================================
Average Case and Distributional Analysis of Dual-Pivot Quicksort (Sebastian Wild - 13 February, 2015)
In 2009, Oracle replaced the long-serving sorting algorithm in its Java 7 runtime library by a new dual-pivot Quicksort variant due to Vladimir Yaroslavskiy. Only in 2012, two of the authors gave an average case analysis of a simplified version of Yaroslavskiy's algorithm, proving that savings in the number of comparisons are possible
Link: https://arxiv.org/abs/1304.0988
====================================================
Optimal Partitioning for Dual-Pivot Quicksort (Martin AumÃ¼ller - 13 October, 2015)
Recently, a dual-pivot algorithm proposed by Yaroslavskiy received much attention, because a variant of it replaced the well-engineered quicksort algorithm in Sun's Java 7 runtime library. Nebel and Wild (ESA 2012) analyzed this algorithm and showed that on average it uses 1.9n ln n + O(n) comparisons to sort an input of size n, beating standard quicksort, which uses 2n ln n + O(n) comparisons. (ALENEX 2014).
Link: https://arxiv.org/abs/1303.5217
====================================================
Addressing learning difficulties in Newtons 1st and 3rd Laws through problem based inquiry using Easy Java Simulation (Khoon Song Aloysius Goh - 25 September, 2013)
We develop an Easy Java Simulation (EJS) model for students to visualize Newtons 1st and 3rd laws, using frictionless constant motion equation and a spring collision equation during impact. We report results from Experimental (N=62 students) and Control (N=67) Groups in 11 multiple choice questions pre and post tests, conducted by three teachers in the school. Results suggest, at 95 percent confidence level, significant improvement for concept of Newtons 1st Law while not so for Newtons 3rd Law
Link: https://arxiv.org/abs/1303.0081
====================================================
Source Code Analysis to Remove Security Vulnerabilities in Java Socket Programs: A Case Study (Natarajan Meghanathan - 6 February, 2013)
This paper presents the source code analysis of a file reader server socket program (connection-oriented sockets) developed in Java, to illustrate the identification, impact analysis and solutions to remove five important software security vulnerabilities, which if left unattended could severely impact the server running the software and also the network hosting the server. The five vulnerabilities we study in this paper are: (1) Resource Injection, (2) Path Manipulation, (3) System Information Leak, (4) Denial of Service and (5) Unreleased Resource vulnerabilities
Link: https://arxiv.org/abs/1302.1338
====================================================
Introduction to Redberry: a computer algebra system designed for tensor manipulation (D. A. Bolotin - 6 January, 2015)
Redberry is written in Java 7 and provides convenient Groovy-based user interface inside the high-level general purpose programming language environment
Link: https://arxiv.org/abs/1302.1219
====================================================
Geostationary Earth Orbit Satellite Model using Easy Java Simulation (Loo Kang Wee - 28 December, 2015)
We develop an Easy Java Simulation (EJS) model for students to visualize geostationary orbits near Earth, modeled using Java 3D implementation of the EJS 3D library. Four computer model design ideas such as 1) simple and realistic 3D view and associated learning to real world, 2) comparative visualization of permanent geostationary satellite 3) examples of non-geostationary orbits of different 3-1) rotation sense, 3-2) periods, 3-3) planes and 4) incorrect physics model for conceptual discourse are discussed. 2015 Resources http://iwant2study.org/ospsg/index.php/interactive-resources/physics/02-newtonian-mechanics/08-gravity/62-gravity10
Link: https://arxiv.org/abs/1212.3863
====================================================
ConArg: a Tool to Solve (Weighted) Abstract Argumentation Frameworks with (Soft) Constraints (Stefano Bistarelli - 16 January, 2013)
To implement this tool we have used JaCoP, a Java library that provides the user with a Finite Domain Constraint Programming paradigm. We present the main features of ConArg and we report the performance in time, showing also a comparison with ASPARTIX [1], a similar tool using Answer Set Programming. The use of techniques for constraint solving can tackle the complexity of the problems presented in [2]
Link: https://arxiv.org/abs/1212.2857
====================================================
JooFlux : modification de code Ã  chaud et injection d'aspects directement dans une JVM 7 (Julien Ponge - 30 November, 2012)
It works by doing bytecode transformation to take advantage of the new invokedynamic instruction added in Java SE 7 to help implementing dynamic languages for the JVM
Link: https://arxiv.org/abs/1211.7345
====================================================
Contracts in Practice (H. -Christian Estler - 26 February, 2014)
Based on an extensive empirical analysis of 21 contract-equipped Eiffel, C#, and Java projects totaling more than 260 million lines of code over 7700 revisions, it explores, among other questions: 1) which kinds of contract elements (preconditions, postconditions, class invariants) are used more often; 2) how contracts evolve over time; 3) the relationship between implementation changes and contract changes; and 4) the role of inheritance in the process. It has found, among other results, that: the percentage of program elements that include contracts is above 33% for most projects and tends to be stable over time; there is no strong preference for a certain type of contract element; contracts are quite stable compared to implementations; and inheritance does not significantly affect qualitative trends of contract usage.
Link: https://arxiv.org/abs/1211.4775
====================================================
Physics Educators as Designers of Simulation using Easy Java Simulation (Ejs) Part 2* (Loo Kang Wee - 6 November, 2012)
Abstract Footnotes: website prior to the meeting http://www.phy.ntnu.edu.tw/ntnujava/index.php?board=28.0 *Extension of Wee, L. (2010, 20 July). Paper presented at the American Association of Physics Teachers National Meeting Conference: 2010 Summer Meeting, Portland, Oregon, USA.
Link: https://arxiv.org/abs/1211.1118
====================================================
The distributed Slow Control System of the XENON100 Experiment (E. Aprile - 5 November, 2012)
The system software was designed according to the rules of Object-Oriented Programming and coded in Java, thus promoting code reusability and maximum flexibility during commissioning of the experiment. The SCS has been continuously monitoring the XENON100 detector since mid 2008, remotely recording hundreds of parameters on a few dozen instruments in real time, and setting emergency alarms for the most important variables.
Link: https://arxiv.org/abs/1211.0836
====================================================
Physics Educators as Designers of Simulation using Easy Java Simulation (Ejs) (Loo Kang Wee - 17 October, 2012)
To deepen the professional practice of physics educators, I seek to highlight the Open Source Physics (OSP) and Easy Java Simulation (Ejs or EJS) community of educators that engage, enable and empower teachers as learners so that we can be leaders in our teaching practice. I learned through Web 2 online collaborative means to develop simulations together with reputable physicists through the open source digital library
Link: https://arxiv.org/abs/1210.5002
====================================================
Designing Open Source Computer Models for Physics by Inquiry using Easy Java Simulation (Loo Kang Wee - 11 October, 2012)
In this interactive event, we will share the basics of using the free authoring toolkit called Easy Java Simulation (W. Christian, Esquembre, & Mason, 2010; Esquembre, 2010) so that participants can modify the open source computer models for their own learning and teaching needs. These computer models has the potential to provide the experience and context, essential for deepening students conceptual understanding of Physics through student centred guided inquiry approach (Eick, Meadows, & Balkcom, 2005; Jackson, Dukerich, & Hestenes, 2008; McDermott, Shaffer, & Rosenquist, 1995; Wee, Lee, & Goh, 2011).
Link: https://arxiv.org/abs/1210.3412
====================================================
JooFlux: Hijacking Java 7 InvokeDynamic To Support Live Code Modifications (Julien Ponge - 3 October, 2012)
It works by doing bytecode transformation to take advantage of the new invokedynamic instruction added in Java SE 7 to help implementing dynamic languages for the JVM
Link: https://arxiv.org/abs/1210.1039
====================================================
Evaluating the SiteStory Transactional Web Archive With the ApacheBench Tool (Justin F. Brunelle - 5 October, 2012)
Los Alamos National Laboratory has developed SiteSory, an open-source transactional archive written in Java solution that runs on Apache Web servers, provides a Memento compatible access interface, and WARC file export features. Content server performance slows from 0.076 seconds to 0.086 seconds per Web page access when the content server is under load, and from 0.15 seconds to 0.21 seconds when the resource has many embedded and changing resources.
Link: https://arxiv.org/abs/1209.1811
====================================================
Inferring SQL Queries Using Program Synthesis (Alvin Cheung - 9 August, 2012)
Using 40 code fragments extracted from over 120k lines of open-source code written using the Java Hibernate ORM, we demonstrate that our approach can convert a variety of imperative constructs into relational specifications.
Link: https://arxiv.org/abs/1208.2013
====================================================
PlotXY: a high quality plotting system for the Herschel Interactive Processing Environment (HIPE), and the astronomical community (Pasquale Panuzzo - 17 July, 2012)
The entire code of HIPE is written in Java and is open source released under the GNU Lesser General Public License version 3
Link: https://arxiv.org/abs/1207.3921
====================================================
Leveraging on Easy Java Simulation tool and open source computer simulation library to create interactive digital media for mass customization of high school physics curriculum (Loo Kang Wee - 1 July, 2012)
We aim to engage high school educators to professionally develop themselves by creating and customizing simulations possible through Easy Java Simulation (Ejs) and its learning community. Ejs toolkit, its library of simulations and growing community contributed simulation codes, in a Web 2.0 environment, potentially allows for rapid proliferation of mass customized virtual laboratories simulation with educators as designers of learning environment
Link: https://arxiv.org/abs/1207.0219
====================================================
Language Acquisition in Computers (Megan Belzner - 31 May, 2012)
The first portion of our system was implemented in Java and is focused on understanding the morphology of language using bigrams. English and French texts were analyzed to determine a difference threshold of 55 before the texts are considered to be in different languages, and this threshold was verified using Spanish texts
Link: https://arxiv.org/abs/1206.0042
====================================================
Juppix: a Linux Live-CD for Undergraduate Students (Juliusz Chroboczek - 12 May, 2012)
Juppix is a Linux Live-CD with a comfortable programming environment for the Java, C and O'Caml programming languages that has been distributed to hundreds of undergaduate students at the University of Paris 7 over the last few years
Link: https://arxiv.org/abs/1205.2748
====================================================
One-dimensional collision carts computer model and its design ideas for productive experiential learning (Loo Kang Wee - 23 December, 2015)
We develop an Easy Java Simulation (EJS) model for students to experience the physics of idealized one-dimensional collision carts. In the field of designing computer simulations, we discuss briefly three pedagogical considerations such as 1) consistent simulation world view with pen paper representation, 2) data table, scientific graphs and symbolic mathematical representations for ease of data collection and multiple representational visualizations and 3) game for simple concept testing that can further support learning. 2015 Resources added: http://iwant2study.org/ospsg/index.php/interactive-resources/physics/02-newtonian-mechanics/02-dynamics/46-one-dimension-collision-js-model http://iwant2study.org/ospsg/index.php/interactive-resources/physics/02-newtonian-mechanics/02-dynamics/195-elastic-collision
Link: https://arxiv.org/abs/1204.4964
====================================================
Avian Influenza (H5N1) Warning System using Dempster-Shafer Theory and Web Mapping (Andino Maseleno - 19 April, 2012)
Geographically, Lampung province is located at 103040' to 105050' East Longitude and 6045' - 3045' South latitude, confined with: South Sumatera and Bengkulu on North Side, Sunda Strait on the Side, Java Sea on the East Side, Indonesia Ocean on the West Side
Link: https://arxiv.org/abs/1204.4307
====================================================
Solving the TTC 2011 Reengineering Case with MOLA and Higher-Order Transformations (Agris Sostaks - 21 November, 2011)
The Reengineering Case of the Transformation Tool Contest 2011 deals with automatic extraction of state machine from Java source code
Link: https://arxiv.org/abs/1111.4750
====================================================
Translating Nondeterministic Functional Language based on Attribute Grammars into Java (Masanobu Umeda - 3 September, 2011)
An experimental translator written in the language itself successfully generates Java code, while experimental results show that the generated code is over 25 times faster than that of Prolog Cafe for nondeterministic programs, and over 2 times faster for deterministic programs. The generated code is also over 2 times faster than B-Prolog for nondeterministic programs.
Link: https://arxiv.org/abs/1109.0638
====================================================
Using Java for distributed computing in the Gaia satellite data processing (William O&#39;Mullane - 1 August, 2011)
When we started using Java for astronomical applications around 1999 they were the first of their kind in astronomy
Link: https://arxiv.org/abs/1108.0355
====================================================
BioSimplify: an open source sentence simplification engine to improve recall in automatic biomedical information extraction (Siddhartha Jonnalagadda - 28 July, 2011)
BioSimplify is an open source tool written in Java that introduces and facilitates the use of a novel model for sentence simplification tuned for automatic discourse analysis and information extraction (as opposed to sentence simplification for improving human readability). We tested our tool on its impact to the task of PPI extraction and it improved the f-score of the PPI tool by around 7%, with an improvement in recall of around 20%
Link: https://arxiv.org/abs/1107.5744
====================================================
Combining Ontology Development Methodologies and Semantic Web Platforms for E-government Domain Ontology Development (Jean Vincent Fonou Dombeu - 26 April, 2011)
This research presents a case study combining an ontology building methodology and two state-of-the-art Semantic Web platforms namely Protege and Java Jena ontology API for semantic ontology development in e-government
Link: https://arxiv.org/abs/1104.4966
====================================================
Detect Related Bugs from Source Code Using Bug Information (Deqing Wang - 18 March, 2011)
We evaluate Rebug-Detector on an open source project: Apache Lucene-Java. Our tool totally detects 61 related bugs, including 21 real bugs and 10 suspected bugs, and it costs us about 15.5 minutes
Link: https://arxiv.org/abs/1103.3569
====================================================
A Study of Language Usage Evolution in Open Source Software (Siim Karus - 10 February, 2011)
The use of programming languages such as Java and C in Open Source Software (OSS) has been well studied. Based on the revision data of 22 OSS projects, we tracked the evolution of language usage and other artefacts such as documentation files, binaries and graphics files. In fact, a developer works with more than 5 different artefact types (or 4 different languages) in a project on average.
Link: https://arxiv.org/abs/1102.2262
====================================================
The SPIRE Photometer Interactive Analysis Package SPIA (Bernhard Schulz - 6 January, 2011)
2006) (Ott & Science Ground Segment Consortium 2010) is a substantial Java software package, accompanying the development of the Herschel Mission (Pilbratt et al. 2010), supporting all of its phases. 2009). 2010), breaking up the pipeline reduction into logical components, making all relevant processing parameters available in GUIs, and providing a more controlled and user-friendly access to the complexities of the system.
Link: https://arxiv.org/abs/1101.1284
====================================================
On the contribution of the horizontal sea-bed displacements into the tsunami generation process (Denys Dutykh - 12 July, 2012)
The methods proposed in this study are illustrated on the July 17, 2006 Java tsunami and some more recent events.
Link: https://arxiv.org/abs/1011.1741
====================================================
Three Controlled Experiments in Software Engineering with the Two-Tier Programming Toolkit: Final Report (Amnon H. Eden - 1 September, 2010)
Three controlled experiments testing the benefits that Java programmers gain from using the Two-Tier Programming Toolkit have recently been concluded. The first experiment offers statistically significant evidence (p-value: 0.02) that programmers who undertook only minimal (1-hour) training in using the current prototype exhibit 76% productivity gains in key tasks in software development and maintenance. The second experiment shows that the use of the TTP Toolkit is likely (p-value: 0.10) to almost triple the accuracy of programmers performing tasks associated with software quality. The third experiment shows that the TTP Toolkit does not offer significant productivity gains in performing very short (under 10 min.) tasks.
Link: https://arxiv.org/abs/1009.0152
====================================================
On the use of finite fault solution for tsunami generation problems (Denys Dutykh - 12 December, 2011)
The developments of the present study are illustrated on the 17 July 2006 Java event, where an underwater earthquake of magnitude 7.7 generated a tsunami that inundated the southern coast of Java.
Link: https://arxiv.org/abs/1008.2742
====================================================
Sawja: Static Analysis Workshop for Java (Laurent Hubert - 20 July, 2010)
This paper describes the Sawja library: a static analysis framework fully compliant with Java 6 which provides OCaml modules for efficiently manipulating Java bytecode programs
Link: https://arxiv.org/abs/1007.3353
====================================================
Enforcing Secure Object Initialization in Java (Laurent Hubert - 19 July, 2010)
Our experimental results show that our safe default policy allows to prove 91% of classes of java.lang, java.security and javax.security safe without any annotation and by adding 57 simple annotations we proved all classes but four safe
Link: https://arxiv.org/abs/1007.3133
====================================================
Sustainable growth in complex networks (Claudio J. Tessone - 8 July, 2010)
Based on the empirical analysis of the dependency network in 18 Java projects, we develop a novel model of network growth which considers both: an attachment mechanism and the addition of new nodes with a heterogeneous distribution of their initial degree, $k_0$. Empirically we find that the cumulative degree distributions of initial degrees and of the final network, follow power-law behaviors: $P(k_{0}) \propto k_{0}^{1-Î±}$, and $P(k)\propto k^{1-Î³}$, respectively. For the total number of links as a function of the network size, we find empirically $K(N)\propto N^Î²$, where $Î²$ is (at the beginning of the network evolution) between 1.25 and 2, while converging to $\sim 1$ for large $N$
Link: https://arxiv.org/abs/1007.1330
====================================================
Static and Dynamic Quality Assurance by Aspect Oriented Techniques (Christoph Knabe - 14 June, 2010)
The overall goal of the described research project was to create applicable quality assurance patterns for Java software systems using the aspect-oriented programming language extension AspectJ 5
Link: https://arxiv.org/abs/1006.5442
====================================================
On the Detection of High-Impact Refactoring Opportunities in Programs (Jens Dietrich - 15 March, 2011)
This technique is validated using an experiment where we analyse a set of 95 open-source Java programs for instances of four patterns representing modularisation problems
Link: https://arxiv.org/abs/1006.1747
====================================================
Gestion efficace de sÃ©ries temporelles en P2P: Application Ã  l'analyse technique et l'Ã©tude des objets mobiles (Georges Gardarin - 3 June, 2010)
The model has been implemented and tested in PHP, Java, and XQuery. We show benchmark results illustrating that the computing of 5000 series of over 100.000 entries in length - common requirements for both applications - is difficult on classical centralized PCs
Link: https://arxiv.org/abs/1006.0576
====================================================
Implementation of a Cloud Data Server (CDS) for Providing Secure Service in E-Business (D. Kesavaraja - 31 May, 2010)
With the help of which we can circumvent even the attacks, which are undefined by traditional Systems .we implement Cloud Data Sever using Java and Hash Code backup Management using My SQL. The efficiency ratio of our approach is 98.21% compared with similar approaches.
Link: https://arxiv.org/abs/1005.5606
====================================================
Watermarking Java Programs using Dummy Methods with Dynamically Opaque Predicates (Zaenal Akbar - 19 April, 2010)
In this thesis, we present a technique for watermarking Java programs by using a never-executed dummy method (Monden et.al., 2000) combined with opaque predicates (Collberg et.al., 1998; Arboit, 2002) and improved with dynamically opaque predicates (Palsberg et.al., 2000). Add a single watermark will increasing source code approximate 3.854 bytes with dummy method that cover up to 15 characters, two dynamic data structures, two threads and two opaque predicates. Application loading-time increase approximate 6108 milliseconds.
Link: https://arxiv.org/abs/1004.3250
====================================================
Cloud Process Execution Engine - Evaluation of the Core Concepts (Juergen Mangler - 17 March, 2010)
Instead of interpreting an XML based workflow description language like BPEL, the WEE uses a minimized but expressive set of statements that runs directly on to of a virtual machine that supports the Ruby language.Frameworks/Virtual Machines supporting supporting this language include Java, .NET and there exists also a standalone Virtual Machine. Using a DSL gives us the advantage of maintaining a very compact code base of under 400 lines of code, as the host programming language implements all the concepts like parallelism, threads, checking for syntactic correctness
Link: https://arxiv.org/abs/1003.3330
====================================================
Service-Oriented Architectures and Web Services: Course Tutorial and Lab Notes (Serguei A. Mokhov - 28 December, 2015)
This document presents a number of quick-step instructions to get started on writing mini-service-oriented web services-based applications using OpenESB 2.31, Tomcat 6, GlassFish 2.x/3.0.1 with BPEL support, and Java 1.6+ primarily in Scientific Linux 6.6 with user quota restrictions
Link: https://arxiv.org/abs/0907.2974
====================================================
Boussinesq systems in two space dimensions over a variable bottom for the generation and propagation of tsunami waves (Dimitrios Mitsotakis - 15 September, 2009)
Moreover, we study tsunami wave propagation in the case of the Java 2006 event, comparing the results of the Boussinesq model with those produced by the finite difference code MOST, that solves the shallow water wave equations.
Link: https://arxiv.org/abs/0906.2491
====================================================
Symbolic Script Programming for Java (Raphael Jolly - 14 June, 2009)
We present such an interface for Java computer algebra libraries, using scripts available in the JSR 223 framework
Link: https://arxiv.org/abs/0906.2315
====================================================
Comparison between CPBPV, ESC/Java, CBMC, Blast, EUREKA and Why for Bounded Program Verification (HÃ©lÃ¨ne Collavizza - 11 August, 2008)
It compares the capabilities of CPBVP "Constraint Programming framework for Bounded Program Verification" [4] with the following frameworks: ESC/Java, CBMC, Blast, EUREKA and Why.
Link: https://arxiv.org/abs/0808.1508
====================================================
Plat_Forms -- a contest: The web development platform comparison (Lutz Prechelt - 6 May, 2008)
"Plat_Forms" is a competition in which top-class teams of three programmers compete to implement the same requirements for a web-based system within 30 hours, each team using a different technology platform (Java EE, .NET, PHP, Perl, Python, or Ruby on Rails)
Link: https://arxiv.org/abs/0805.0650
====================================================
Software graphs and programmer awareness (G. J. Baxter - 15 February, 2008)
The model reproduces the two distributions, and compares reasonably well to those observed in 14 different type relationships across 12 different Java applications.
Link: https://arxiv.org/abs/0802.2306
====================================================
HoloTrap: Interactive hologram design for multiple dynamic optical trapping (E. Pleguezuelos - 9 January, 2007)
The software is written in Java, and uses random binary masks to generate the holograms. We give our experimental results from manipulating 5 micron-diametre microspheres using the program.
Link: https://arxiv.org/abs/physics/0611021
====================================================
Haskell's overlooked object system (Oleg Kiselyov - 10 September, 2005)
Haskell provides type-class-bounded and parametric polymorphism as opposed to subtype polymorphism of object-oriented languages such as Java and OCaml. It is a contentious question whether Haskell 98 without extensions, or with common extensions, or with new extensions can fully support conventional object-oriented programming with encapsulation, mutable state, inheritance, overriding, statically checked implicit and explicit subtyping, and so on. We systematically substantiate that Haskell 98, with some common extensions, supports all the conventional OO features plus more advanced ones, including first-class lexically scoped classes, implicitly polymorphic classes, flexible multiple inheritance, safe downcasts and safe co-variant arguments
Link: https://arxiv.org/abs/cs/0509027
====================================================
J2EE Deployment: The JOnAS Case Study (Francois Exertier - 17 November, 2004)
La specification J2EE (Java 2 platform Enterprise Edition) definit une architecture de serveur d'application Java. Jusqu'a J2EE 1.3, seuls les aspects de deploiement concernant le developpeur d'applications etaient adresses. Avec J2EE 1.4, les interfaces et les etapes de deploiement ont ete plus precisement specifiees dans la specification "J2EE Deployment"
Link: https://arxiv.org/abs/cs/0411054
====================================================
Power Law Signature in Indonesian Population (Ivan Mulianta - 2 September, 2004)
We analyzed that this fact could be caused by the equal or similar infrastructural development in all regions; nevertheless, we also note that the first 20 kabupatens are dominated in Java and Sumatera
Link: https://arxiv.org/abs/nlin/0409006
====================================================
Magda - Manager for grid-based data (Wensheng Deng - 13 June, 2003)
It makes use of the MySQL open source relational database, Perl, Java and C++ to provide file cataloging, retrieval and replication services. Magda currently catalogs 321K files with total size of 85.8 TB. It was successfully used in the Data Challenge 1 production for the Atlas experiment. It has been used to replicate more than 7 TB of data between BNL and CERN mass stores
Link: https://arxiv.org/abs/physics/0306105
====================================================
Java Physics Generator and Analysis Modules (Michael T. Ronan - 2 June, 2003)
Physics and detector Java analysis modules using prototype HEP class libraries provide high level OO study tools. Complete physics generation, parallel detector simulations and event analysis for full 500 fb$^{-1}$ simulated data samples are performed in single-pass batch jobs
Link: https://arxiv.org/abs/physics/0306019
====================================================
Development of a Java Package for Matrix Programming (Ngee-Peng Lim - 24 June, 2003)
The classes are matrix, matrix_operations, StrToMatrix, and MatrixToStr; all of which are inherited from java.lang.Object class. Class StrToMatrix contains methods necessary to parse a string representation (for example, [[2 3 4]-[5 6 7]]) of a matrix into a matrix definition, whereas class MatrixToStr does the reverse.
Link: https://arxiv.org/abs/cs/0306127
====================================================
Flavor: A Language for Media Representation (Alexandros Eleftheriadis - 7 January, 2003)
Flavor also comes with a translator that automatically generates standard C++ or Java code from the Flavor source code so that direct access to compressed multimedia information by application developers can be achieved with essentially zero programming. The software has been made into an open source project as of Version 4.1, and the latest downloadable Flavor package is available at http://flavor.sourceforge.net.
Link: https://arxiv.org/abs/cs/0301003
====================================================
Computing A Glimpse of Randomness (Cristian S. Calude - 10 February, 2002)
The aim of this paper is to describe a procedure, which combines Java programming and mathematical proofs, for computing the exact values of the first 64 bits of a Chaitin Omega: 0000001000000100000110001000011010001111110010111011101000010000
Link: https://arxiv.org/abs/nlin/0112022
====================================================
SNS Application Programming Plan (C. M. Chu - 5 December, 2001)
Primary components include an SNS global database and Java-based Application Toolkit, called XAL. A key element in the SNS application programs is time synchronization of data used in these applications, due to the short pulse length (1 ms), pulsed (60 Hz) nature of the device
Link: https://arxiv.org/abs/physics/0111158
====================================================
A Prototype of the UAL 2.0 Application Toolkit (N. Malitsky - 9 November, 2001)
The UAL 2.0 application toolkit has been developing on the top of the Java infrastructure for integrating it with distributed accelerator control systems
Link: https://arxiv.org/abs/physics/0111096
====================================================
New Abeans for TINE Java Control Applications (J. Dovc - 9 November, 2001)
Abeans [1] (wide-interface accelerator Java beans developed at JSI) have in the past been used with great success in control applications at ANKA and ESO and on test cases at the SLS and Riken. At DESY, TINE [2] is used as the principal control system for HERA as well as the intercommunication protocol among the HERA experiments. To date, most TINE-based client-side applications have been written using ACOP [3] (a narrow-interface accelerator component) in Visual Basic (VB), which has provided a remarkably powerful developing environment for generating professional control applications
Link: https://arxiv.org/abs/physics/0111089
====================================================
The National Ignition Facility: Status and Plans for Laser Fusion and High-Energy-Density Experimental Studies (E. I. Moses - 9 November, 2001)
The object-oriented software system is implemented in the Ada and Java languages and emphasizes CORBA distribution of reusable software objects. NIF is currently scheduled to provide first light in 2004 and will be completed in 2008.
Link: https://arxiv.org/abs/physics/0111063
====================================================
An XML Driven Graphical User Interface and Application Management Toolkit (Matthias Clausen - 11 December, 2001)
We present a graphical user interface builder based on Java Beans and XML, in which the graphical screens are described textually (in files or a database) in terms of their screen components. However the model allows us a powerful and generic system for adding new kinds of graphics, such as Matlab, data sources, such as EPICS, middleware, such as AIDA[1], and transport, such as XML and SOAP
Link: https://arxiv.org/abs/physics/0111057
====================================================
Preliminary Design of Muses Control System Based on RT-Corba and Java (Toshiya Tanabe - 8 November, 2001)
Software sharing with Jozef Stefan Institute (JSI) in Slovenia via CORBA/JavaBeans has been successfully demonstrated. Accelerator Beans (Abeans) [2] components developed in JDK1.2.2 have been ported to RIKEN's CORBA server. Due to the much larger number of controlled objects and more stringent timing requirement than the first-phase project, we contemplate using recently established real-time (RT) CORBA specification [3]
Link: https://arxiv.org/abs/physics/0111030
====================================================
Design of a Distributed Control System Based on CORBA and JAVA for a New RIB facility at LNL (Stefania Canella - 5 November, 2001)
In the context of this design study and tightly related to medium size of this facility the architecture of a distributed control system using the Common Object Request Broker Architecture (CORBA) [2] as middleware framework and JAVA [3] as main programming language was investigated for the core sub-systems (diagnostics, optics, RF-control) of the primary accelerator
Link: https://arxiv.org/abs/physics/0111012
====================================================
The Overview of the National Ignition Facility Distributed Computer Control System (L. J. Lagin - 16 November, 2001)
Software coding using a mixed language environment of Ada95 and Java is one-third complete at over 300 thousand source lines. Control system installation is currently under way for the first 8 beams, with project completion scheduled for 2008.
Link: https://arxiv.org/abs/cs/0111045
====================================================
Modernising the ESRF control system with GNU/Linux (A. Gotz - 9 November, 2001)
The new control system will be based on compact PCI, 100 MHz Ethernet, Linux, Windows, Solaris, CORBA/IIOP, C++, Java and Python
Link: https://arxiv.org/abs/cs/0111033
====================================================
A data capture and production management tool for the assembly and construction of the CMS detectors (J-M Le Goff - 18 May, 2001)
Distributed instances of Object databases linked via CORBA [2] and with WWW/Java-based query processing are the main technology aspects of CRISTAL.
Link: https://arxiv.org/abs/physics/0105057
====================================================
SATEN: An Object-Oriented Web-Based Revision and Extraction Engine (Mary-Anne Williams - 13 March, 2000)
It runs on any computer via a Java 1.1 enabled browser such as Netscape 4
Link: https://arxiv.org/abs/cs/0003059
====================================================
Secure Execution of Java Applets using a Remote Playground (Dahlia Malkhi - 12 August, 1999)
We introduce an approach for protecting machines and the resources they hold from mobile code, and describe a system based on our approach for protecting host machines from Java 1.1 applets. The paper presents the design and implementation of a playground for Java 1.1 applets, and discusses extensions of it for other forms of mobile code including Java 1.2.
Link: https://arxiv.org/abs/cs/9908009
====================================================
A Simple Java Code Generator for ACL2 Based on a Deep Embedding of ACL2 in Java (Alessandro Coglio - 9 October, 2018)
AIJ and ATJ enable possibly verified ACL2 code to run as, and interoperate with, Java code, without much of the ACL2 framework or any of the Lisp runtime. The current speed of the resulting Java code may be adequate to some applications.
Link: https://arxiv.org/abs/1810.04308
====================================================
Cognitive Architecture for a Connected World (Shaun C. D&#39;Souza - 26 September, 2018)
The Java virtual machine (JVM) derives from the stack architecture
Link: https://arxiv.org/abs/1810.03955
====================================================
Memory and Resource Leak Defects and their Repairs in Java Projects (Mohammadreza Ghanavati - 28 September, 2018)
Despite huge software engineering efforts and programming language support, resource and memory leaks are still a troublesome issue, even in memory-managed languages such as Java
Link: https://arxiv.org/abs/1810.00101
====================================================
Harvesting Time-Series Data from Service-Based Systems Hosted in MANETs (Petr Novotny - 22 September, 2018)
We implemented the method in Java~EE and present evaluation on a run-time dependence discovery method for Web Service applications hosted on MANETs, and comparison to other four methods demonstrating that our method performs significantly better in both data availability and network overhead.
Link: https://arxiv.org/abs/1809.08526
====================================================
Predicting the Programming Language of Questions and Snippets of StackOverflow Using Natural Language Processing (Kamel Alreshedy - 21 September, 2018)
We visualize the feature space of two programming languages Java and SQL in order to identify some special properties of information inside the questions in Stack Overflow corresponding to these languages.
Link: https://arxiv.org/abs/1809.07954
====================================================
A case study in formal verification of a Java program (Dmitry Brizhinev - 10 September, 2018)
We describe a successful attempt to formally verify a simple genetic algorithm written in Java. To this end, we compare several formal verification tools designed for Java, and select Krakatoa as the most appropriate for the task
Link: https://arxiv.org/abs/1809.03162
====================================================
Language Interoperability in Control Network Programming (Kostadin Kratchanov - 28 August, 2018)
Most popular and interesting programming languages have been addressed: Python, Java, and C
Link: https://arxiv.org/abs/1809.00976
====================================================
Data-Driven Debugging for Functional Side Channels (Saeid Tizpaz-Niari - 30 August, 2018)
Finally, we empirically evaluate the performance of our tool Fuschia on a series of micro-benchmarks, as well as on realistic Java programs with thousands of methods
Link: https://arxiv.org/abs/1808.10502
====================================================
Mapping Language to Code in Programmatic Context (Srinivasan Iyer - 28 August, 2018)
We introduce CONCODE, a new large dataset with over 100,000 examples consisting of Java classes from online code repositories, and develop a new encoder-decoder architecture that models the interaction between the method documentation and the class environment
Link: https://arxiv.org/abs/1808.09588
====================================================
Reference Type Logic Variables in Constraint-logic Object-oriented Programming (Jan C. DagefÃ¶rde - 24 August, 2018)
This includes invocations on free objects and constraints over object types, while taking arbitrary class hierarchies of a Java-based language into account
Link: https://arxiv.org/abs/1808.08185
====================================================
Formalisation of a frame stack semantics for a Java-like language (Aleksy Schubert - 16 August, 2018)
We present a Coq formalisation of the small-step operational semantics of Jafun, a small Java-like language with classes. In contrast to the Featherweight Java approach the semantics explicitly manipulates frame stack of method calls
Link: https://arxiv.org/abs/1808.05342
====================================================
A Scalable Data Science Platform for Healthcare and Precision Medicine Research (Jacob McPadden - 14 August, 2018)
Data acquisition workflows for Apache Storm and NiFi were developed in Java and Python to capture patient monitoring and laboratory data for downstream analytics
Link: https://arxiv.org/abs/1808.04849
====================================================
jLDADMM: A Java package for the LDA and DMM topic models (Dat Quoc Nguyen - 11 August, 2018)
In this technical report, we present jLDADMM---an easy-to-use Java toolkit for conventional topic models
Link: https://arxiv.org/abs/1808.03835
====================================================
Can Network Analysis Techniques help to Predict Design Dependencies? An Initial Study (J. AndrÃ©s DÃ­az-Pace - 8 August, 2018)
We conducted an evaluation on two Java projects across several versions, using link prediction and machine learning techniques, and assessed their performance for identifying new dependencies from a project version to the next one
Link: https://arxiv.org/abs/1808.02776
====================================================
RuntimeSearch: Ctrl+F for a Running Program (MatÃºÅ¡ SulÃ­r - 25 July, 2018)
The feasibility and usefulness of RuntimeSearch is demonstrated on a medium-sized Java project.
Link: https://arxiv.org/abs/1807.09679
====================================================
Rule Based Metadata Extraction Framework from Academic Articles (Jahongir Azimjonov - 24 July, 2018)
In this paper, a completely free and open source Java based high performance metadata extraction framework is proposed
Link: https://arxiv.org/abs/1807.09009
====================================================
Visualizing Design Erosion: How Big Balls of Mud are Made (David Baum - 16 July, 2018)
We present a visualisation that exposes the design of evolving Java programs, highlighting instances of selected antipatterns including their emergence and cancerous growth
Link: https://arxiv.org/abs/1807.06136
====================================================
Testing Global Constraints (AurÃ©lie Massart - 11 July, 2018)
We present a Java library allowing any JVM based solver to test that the implementations of the individual constraints are correct
Link: https://arxiv.org/abs/1807.03975
====================================================
A modelling language for the effective design of Java annotations (Irene CÃ³rdoba - 10 July, 2018)
Usually they are conceived as sets with dependency and integrity constraints within them; however, the native support provided by Java for expressing this design is very limited. The language has been tested using a real set of annotations from the Java Persistence API (JPA)
Link: https://arxiv.org/abs/1807.03566
====================================================
Treo: Textual Syntax for Reo Connectors (Kasper Dokter - 26 June, 2018)
Recent benchmarks show that compiling such high-level Reo specifications produces executable code that can compete with or even beat the performance of hand-crafted programs written in languages such as C or Java using conventional concurrency constructs.
Link: https://arxiv.org/abs/1806.09852
====================================================
Development of Slow Control Package for the Belle II Calorimeter Trigger System (C. H. Kim - 24 June, 2018)
Real-time results are stored in archiver server which is based on EPICS (The Experimental Physics and Industrial Control System) archiver appliances and tomcat which is open-source java servlet container
Link: https://arxiv.org/abs/1806.09272
====================================================
RIGORITYJ: Deployment-quality Detection of Java Cryptographic Vulnerabilities (Sazzadur Rahaman - 8 October, 2018)
Our goal in this work is to produce deployment-quality program analysis tools for automatically inspecting various cryptographic API uses in complex Java programs. Unfortunately, state-of-the-art solutions in this space were not designed to be deployment-grade and did not address this issue.
Link: https://arxiv.org/abs/1806.06881
====================================================
Selective Monitoring (Radu Grigore - 2 July, 2018)
We report on experiments where we compute these monitors for several open-source Java projects.
Link: https://arxiv.org/abs/1806.06143
====================================================
Badger: Complexity Analysis with Fuzzing and Symbolic Execution (Yannic Noller - 8 June, 2018)
We implemented our approach for the analysis of Java programs, based on Kelinci and Symbolic PathFinder. We evaluated Badger on Java applications, showing that our approach is significantly faster in generating worst-case executions compared to fuzzing or symbolic execution on their own.
Link: https://arxiv.org/abs/1806.03283
====================================================
MicroShare: Privacy-Preserved Medical Resource Sharing through MicroService Architecture (Yilong Yang - 7 June, 2018)
The implemented toolkit combines software engineering technologies such as Java EE, RESTful web services, JSON Web Tokens to allow exchanging medical data in an unidentifiable XML and JSON format as well as restricting users to the need-to-know principle
Link: https://arxiv.org/abs/1806.02134
====================================================
BPjs --- a framework for modeling reactive systems using a scripting language and BP (Michael Bar-Sinai - 3 June, 2018)
The model itself consists of a collection of small scripts written in JavaScript (hence "BPjs"). Additionally, as we learned from an experimental course we ran, the usage of JavaScript make practitioners more amenable to using this system and, thus, model checking and model driven engineering
Link: https://arxiv.org/abs/1806.00842
====================================================
Fast Random Integer Generation in an Interval (Daniel Lemire - 29 May, 2018)
Consequently, popular languages like Java, Python, C++, Swift and Go include ranged random integer generation functions as part of their runtime libraries.
Link: https://arxiv.org/abs/1805.10941
====================================================
Towards Taming Java Wildcards and Extending Java with Interval Types (Moez A. AbdelGawad - 15 July, 2018)
As demonstrated when adding closures (a.k.a., lambdas) and when extending type inference in Java, wildcard types and variance annotations make the development and progress of OO programming languages, and of their type systems in particular, a challenging and delicate task.
Link: https://arxiv.org/abs/1805.10931
====================================================
Evaluation of Static Analysis Tools for Finding Vulnerabilities in Java and C/C++ Source Code (Rahma Mahmood - 24 May, 2018)
This paper compares static analysis tools for Java and C/C++ source code, and explores their pros and cons.
Link: https://arxiv.org/abs/1805.09040
====================================================
Learning to Mine Aligned Code and Natural Language Pairs from Stack Overflow (Pengcheng Yin - 22 May, 2018)
Experiments using Python and Java as test beds show that the proposed method greatly expands coverage and accuracy over existing mining methods, even when using only a small number of labeled examples
Link: https://arxiv.org/abs/1805.08949
====================================================
On the Worst-Case Complexity of TimSort (Nicolas Auger - 31 May, 2018)
The approach we use in the analysis also applies to the Java version, although not without very involved technical details. As a byproduct of our study, we uncover a bug in the Java implementation that can cause the sorting method to fail during the execution
Link: https://arxiv.org/abs/1805.08612
====================================================
Adaptation and Abstract Runtime Models (Thomas Vogel - 17 May, 2018)
Our approach has been implemented for the broadly adopted Enterprise Java Beans component standard and its application is presented in a self-healing scenario requiring structural adaptation.
Link: https://arxiv.org/abs/1805.07397
====================================================
Java Subtyping as an Infinite Self-Similar Partial Graph Product (Moez A. AbdelGawad - 15 July, 2018)
Due to supporting variance annotations, such as wildcard types, the subtyping relation in Java and other generic nominally-typed OO programming languages is both interesting and intricate
Link: https://arxiv.org/abs/1805.06893
====================================================
Explicit Modelling of Physical Measures: From Event-B to Java (J Paul Gibson - 14 May, 2018)
We illustrate this by moving from Event-B models to Java implementations, via object oriented design.
Link: https://arxiv.org/abs/1805.05517
====================================================
DReAM: Dynamic Reconfigurable Architecture Modeling (full paper) (Rocco De Nicola - 9 May, 2018)
The DReAM framework is implemented in the form of a Java API bundled with an execution engine
Link: https://arxiv.org/abs/1805.03724
====================================================
On the Feasibility of Real-Time 3D Hand Tracking using Edge GPGPU Acceleration (Ammar Qammaz - 30 April, 2018)
By wrapping the C++ library in Java container and by capitalizing on a Java-based offloading infrastructure that supports both CPU and GPGPU computations, we are able to establish automatically the required server-client workflow that best addresses the resource allocation problem in the effort to execute from the weak workstation
Link: https://arxiv.org/abs/1804.11256
====================================================
Ticket Coverage: Putting Test Coverage into Context (Jakob Rott - 20 April, 2018)
We conducted an empirical study on an industrial system consisting of 650k lines of Java code and show that ticket coverage brings transparency into the test state of tickets and reveals relevant test gaps.
Link: https://arxiv.org/abs/1804.07599
====================================================
EBG: A Lazy Functional Programming Language Implemented on the Java Virtual Machine (Tony Clark - 17 April, 2018)
This technical report describes the implementation of a lazy functional programming language on the Java VM.
Link: https://arxiv.org/abs/1804.07271
====================================================
The Java Build Framework: Large Scale Compilation (Pedro Martins - 12 April, 2018)
We present the Java Build Framework, a method and tool capable of automatically compiling a large percentage of Java projects available in open source repositories like GitHub
Link: https://arxiv.org/abs/1804.04621
====================================================
Debugging Program Verification Proof Scripts (Tool Paper) (Bernhard Beckert - 12 April, 2018)
The tool is built on top of KeY, a system for deductive verification of Java programs
Link: https://arxiv.org/abs/1804.04402
====================================================
Flexible and Scalable Deep Learning with MMLSpark (Mark Hamilton - 11 April, 2018)
To achieve this, we have contributed Java Language bindings to the Cognitive Toolkit, and added several new components to the Spark ecosystem
Link: https://arxiv.org/abs/1804.04031
====================================================
Source Code Optimization using Equivalent Mutants (Jorge LÃ³pez - 2 July, 2018)
Experimental evaluation with Java and C programs demonstrates the applicability of the proposed approach
Link: https://arxiv.org/abs/1803.09571
====================================================
Analysis of Triplet Motifs in Biological Signed Oriented Graphs Suggests a Relationship Between Fine Topology and Function (Alberto Calderone - 20 March, 2018)
Availability: The triplets counter used for this work is available as a Cytoscape App and as a standalone command line Java application
Link: https://arxiv.org/abs/1803.06520
====================================================
Identifying Components from Object-Oriented APIs Based on Dynamic Analysis (Anas Shatnawi - 16 March, 2018)
We evaluate our approach by applying it to three Java APIs with eight client applications from the DaCapo benchmark
Link: https://arxiv.org/abs/1803.06235
====================================================
Information Security in Health Care Centre Using Cryptography and Steganography (A. O. Babatunde - 15 March, 2018)
Java programming language was used to develop a simulation program for the experiment
Link: https://arxiv.org/abs/1803.05593
====================================================
Identifying KDM Model of JSP Pages (Anas Shatnawi - 14 March, 2018)
The first one aims to reduce the problem space by translating JSP pages into Java Servlets where we can use existing tools to identify a KDM model
Link: https://arxiv.org/abs/1803.05270
====================================================
How to Implement Dependencies in Server Pages of JEE Web Applications (Anas Shatnawi - 14 March, 2018)
Examples of these communication mechanisms are HTTP requests, Remote Method Invocation (RMI), Java DateBase Connectivity (JDBC), etc. Also, we present how these technologies access the JavaBeans and Manage Beans components.
Link: https://arxiv.org/abs/1803.05253
====================================================
Co-occurrence of the Benford-like and Zipf Laws Arising from the Texts Representing Human and Artificial Languages (Evgeny Shulzinger - 6 March, 2018)
We demonstrate that large texts, representing human (English, Russian, Ukrainian) and artificial (C++, Java) languages, display quantitative patterns characterized by the Benford-like and Zipf laws. The calculated values of the moduli of slopes of double logarithmical plots for artificial languages (C++, Java) are markedly larger than those for human ones.
Link: https://arxiv.org/abs/1803.03667
====================================================
Generating Python Code From Object-Z Specifications (A. F. Al Azzawi - 17 February, 2018)
There are a number of existing works that mapped Object-Z to C++ and Java programming languages
Link: https://arxiv.org/abs/1802.06224
====================================================
PyFml - a Textual Language For Feature Modeling (A. F. Al-Azzawi - 17 February, 2018)
For that, most works automate feature model using a limited graphical notation represented by propositional logic and implemented by Prolog or Java programming languages
Link: https://arxiv.org/abs/1802.05022
====================================================
SNC: A Cloud Service Platform for Symbolic-Numeric Computation using Just-In-Time Compilation (Peng Zhang - 9 February, 2018)
SNC allows the Cloud users to describe tasks as symbolic expressions through C/C++, Python, Java APIs and SNC script
Link: https://arxiv.org/abs/1802.04766
====================================================
On a Java library to perform S-expansions of Lie algebras (Carlos Inostroza - 13 February, 2018)
Here we give a brief description of the S-expansion, its applications and the main motivations that lead us to elaborate a Java library, which automatizes this method and allows us to represent and to classify all possible S-expansions of a given Lie algebra.
Link: https://arxiv.org/abs/1802.04468
====================================================
Machine Learning and Evolutionary Computing for GUI-based Regression Testing (Daniel Kraus - 11 February, 2018)
ReTest is a novel testing tool for Java applications with a graphical user interface (GUI), combining monkey testing and difference testing
Link: https://arxiv.org/abs/1802.03768
====================================================
An Investigation of the Monitoring Activity in Self Adaptive Systems (Yousef Abuseta - 10 February, 2018)
This paper also presented a Java framework for the monitoring process for self adaptive systems.
Link: https://arxiv.org/abs/1802.03667
====================================================
Shadow Symbolic Execution with Java PathFinder (Yannic Noller - 5 February, 2018)
In this work, we apply the idea of shadow symbolic execution to Java programs and, hence, provide an extension of the Java PathFinder (JPF) project to perform shadow symbolic execution on Java bytecode
Link: https://arxiv.org/abs/1802.01714
====================================================
Enforcing Programming Guidelines with Region Types and Effects (Serdar Erbatur - 23 January, 2018)
We present in this paper a new type and effect system for Java which can be used to ensure adherence to guidelines for secure web programming
Link: https://arxiv.org/abs/1801.07647
====================================================
ChromaStarPy: A stellar atmosphere and spectrum modeling and visualization lab in python (C. Ian Short - 22 January, 2018)
ChromaStarPy is a direct port of the ChromaStarServer (CSServ) Java modeling code described in earlier papers in this series, and many of the associated JavaScript (JS) post-processing procedures have been ported and incorporated into CSPy so that students have access to ready-made "data products"
Link: https://arxiv.org/abs/1801.07208
====================================================
A Java Application to Characterize Biomolecules and Nanomaterials in Electrolyte Aqueous Solutions (Marcelo Marucho - 18 January, 2018)
In this article, we present a free, multi-platform, portable Java software, which provides experts and non-experts in the field an easy and efficient way to obtain an accurate molecular characterization of electrical and structural properties of aqueous electrolyte mixture solutions around both cylindrical- and spherical-like macroions under multiple conditions. The Java software does not require outstanding skills, and comes with detailed user-guide documentation
Link: https://arxiv.org/abs/1801.07201
====================================================
Challenges of the Dynamic Detection of Functionally Similar Code Fragments (Florian Deissenboeck - 18 January, 2018)
We found that such an approach faces several limitations in its application to diverse Java systems
Link: https://arxiv.org/abs/1801.06107
====================================================
DKVF: A Framework for Rapid Prototyping and Evaluating Distributed Key-value Stores (Mohammad Roohitavaf - 15 January, 2018)
Moreover, implementation of these protocols was much more natural as we only needed to translate the pseudocode into Java (and add the necessary error handling)
Link: https://arxiv.org/abs/1801.05064
====================================================
To Pool or Not To Pool? Revisiting an Old Pattern (Ioannis T. Christou - 10 January, 2018)
We revisit the well-known object-pool design pattern in Java
Link: https://arxiv.org/abs/1801.03763
====================================================
Exploring the constraints on cosmological models with CosmoEJS (Jacob Moldenhauer - 4 October, 2018)
While the results are in agreement with previous constraints for these models, here, we add an investigation into the statistical fits with CosmoEJS, an interactive Java package of simulations that allow the user to explore the ramifications of choosing various values for the cosmological parameters of a particular model
Link: https://arxiv.org/abs/1801.01781
====================================================
Understanding Android Obfuscation Techniques: A Large-Scale Investigation in the Wild (Shuaike Dong - 5 January, 2018)
In particular, we focus on four popular obfuscation approaches: identifier renaming, string encryption, Java reflection, and packing
Link: https://arxiv.org/abs/1801.01633
====================================================
VnCoreNLP: A Vietnamese Natural Language Processing Toolkit (Thanh Vu - 1 April, 2018)
We present an easy-to-use and fast toolkit, namely VnCoreNLP---a Java NLP annotation pipeline for Vietnamese. Our VnCoreNLP supports key natural language processing (NLP) tasks including word segmentation, part-of-speech (POS) tagging, named entity recognition (NER) and dependency parsing, and obtains state-of-the-art (SOTA) results for these tasks
Link: https://arxiv.org/abs/1801.01331
====================================================
Enhancing Symbolic Execution of Heap-based Programs with Separation Logic for Test Input Generation (Long H. Pham - 21 May, 2018)
We have implemented our approach in a prototype tool, called Java StarFinder, and evaluated it on a set of programs with complex heap inputs
Link: https://arxiv.org/abs/1712.06025
====================================================
Open Evaluation Tool for Layout Analysis of Document Images (Michele Alberti - 23 November, 2017)
We introduce a new evaluation tool that is both available as a standalone Java application and as a RESTful web service
Link: https://arxiv.org/abs/1712.01656
====================================================
A tool for visualizing the execution of programs and stack traces especially suited for novice programmers (Stanislav Litvinov - 30 November, 2017)
The solution is able to overcome major drawbacks of existing tools and suites well for analysis of programs written in Java and C/C++.
Link: https://arxiv.org/abs/1711.11377
====================================================
Software Metric Framework (Charles Hathaway - 16 November, 2017)
Because it is only a prototype, the framework has been limited to the analysis of Java applications that utilize Maven, a build system which greatly simplifies the task of compiling source code.
Link: https://arxiv.org/abs/1711.06322
====================================================
Linking Types for Multi-Language Software: Have Your Cake and Eat It Too (Daniel Patterson - 13 November, 2017)
A business-logic component may be written in Java or OCaml, a resource-intensive component in C or Rust, and a high-assurance component in Coq
Link: https://arxiv.org/abs/1711.04559
====================================================
Differential Performance Debugging with Discriminant Regression Trees (Saeid Tizpaz-Niari - 28 November, 2017)
We evaluate our approach on benchmarks consisting of Java programs where we are interested in debugging performance
Link: https://arxiv.org/abs/1711.04076
====================================================
TCPSnitch: Dissecting the Usage of the Socket API (Gregory Vander Schueren - 2 November, 2017)
On Android, many applications use various socket options even if the Java API does not expose them directly
Link: https://arxiv.org/abs/1711.00674
====================================================
Espresso: Brewing Java For More Non-Volatility with Non-volatile Memory (Mingyu Wu - 26 October, 2017)
It then provides a new abstraction called Persistent Java Object (PJO) to provide an easy-to-use but safe persistent programming model for programmers to persist application data. The evaluation confirms that Espresso significantly outperforms state-of-art NVM support for Java (i.e., JPA and PCJ) while being compatible to existing data structures in Java programs.
Link: https://arxiv.org/abs/1710.09968
====================================================
Self-adaptive static analysis (Eric Bodden - 20 October, 2017)
We argue that this is mainly due to the fact that current static analyses are implemented fully manually, often in general-purpose programming languages such as Java or C, or in declarative languages such as Datalog
Link: https://arxiv.org/abs/1710.07430
====================================================
Big Data Analytics and Its Applications (Mashooque Ahmed Memon - 9 October, 2017)
Apache Hadoop open source technology created in Java and keeps running on Linux working framework was used
Link: https://arxiv.org/abs/1710.04135
====================================================
CrySL: Validating Correct Usage of Cryptographic APIs (Stefan KrÃ¼ger - 2 October, 2017)
Various studies have empirically shown that the majority of Java and Android apps misuse cryptographic libraries, causing devastating breaches of data security
Link: https://arxiv.org/abs/1710.00564
====================================================
Secure Coding Practices in Java: Challenges and Vulnerabilities (Na Meng - 28 September, 2017)
Prior research was focused on the misuse of cryptography and SSL APIs, but did not explore the key fundamental research question: what are the biggest challenges and vulnerabilities in secure coding practices? In this paper, we conducted a comprehensive empirical study on StackOverflow posts to understand developers' concerns on Java secure coding, their programming obstacles, and potential vulnerabilities in their code. Multiple programming challenges are related to APIs or libraries, including the complicated cross-language data handling of cryptography APIs, and the complex Java-based or XML-based approaches to configure Spring security
Link: https://arxiv.org/abs/1709.09970
====================================================
A Benchmark Environment Motivated by Industrial Control Problems (Daniel Hein - 6 February, 2018)
The resulting industrial benchmark (IB) has been made publicly available to the RL community by publishing its Java and Python code, including an OpenAI Gym wrapper, on Github
Link: https://arxiv.org/abs/1709.09480
====================================================
A Preliminary Study for Building an Arabic Corpus of Pair Questions-Texts from the Web: AQA-Webcorp (Wided Bakari - 27 September, 2017)
To do this, we had to develop a java script that can extract from a given query a list of html pages
Link: https://arxiv.org/abs/1709.09404
====================================================
Modularity-based Dynamic Community Detection (Di Zhuang - 25 September, 2017)
In this project, we designed a modularity-based dynamic community detection method, which keeps tracking the community structure of a dynamic network with very low computing complexity in updating the community structure while the network changing dynamically, and we implemented our algorithm using Java
Link: https://arxiv.org/abs/1709.08350
====================================================
Novel Uses of Category Theory in Modeling OOP (Moez A. AbdelGawad - 29 December, 2017)
These include (1) the use of operads to model Java subtyping, (2) the use of Yoneda's lemma and representable functors in the modeling of generic types in generic nominally-typed OOP, (3) using a combination of category presentations and cartesian closed categories to model structurally-typed OOP, and (4) the use of adjoint functors to model Java erasure.
Link: https://arxiv.org/abs/1709.08056
====================================================
Mobile-D: An Agile Approach for Mobile Application Development (Pekka Abrahamsson - 20 September, 2017)
The change brought by open platform technologies such as the Symbian operating system and Java technologies has opened up a significant business opportunity for anyone to develop application software such as games for mobile terminals
Link: https://arxiv.org/abs/1709.06820
====================================================
Getting Virtualized Wireless Sensor Networks IaaS Ready for PaaS (Imran Khan - 19 September, 2017)
We built a prototype using Java Sunspot as the WSN tool kit and made early performance measurements.
Link: https://arxiv.org/abs/1709.06486
====================================================
Deadlock detection of Java Bytecode (Abel Garcia - 13 September, 2017)
The technique uses typing rules for extracting infinite-state abstract models of the dependencies among the components of the Java intermediate language -- the Java bytecode. Our technique is complemented by a prototype verifier that also covers most of the Java features.
Link: https://arxiv.org/abs/1709.04152
====================================================
Chisio: A Compound Graph Editing and Layout Framework (Cihan Kucukkececi - 25 August, 2017)
We introduce a new free, open-source compound graph editing and layout framework named Chisio, based on the Eclipse Graph Editing Framework (GEF) and written in Java
Link: https://arxiv.org/abs/1708.07762
====================================================
Control and Data Flow Execution of Java Programs (Safeeullah Soomro - 27 July, 2017)
The idea provided for building visualization tool is extracting data and control analysis from execution of Java programs. We presented case studies to prove that our idea is most important for better understanding of Java programs which may help towards static analysis, software debugging and software maintenance.
Link: https://arxiv.org/abs/1708.07393
====================================================
A Story of Parametric Trace Slicing, Garbage and Static Analysis (Giles Reger - 23 August, 2017)
This paper presents a proposal (story) of how statically detecting unreachable objects (in Java) could be used to improve a particular runtime verification approach (for Java), namely parametric trace slicing
Link: https://arxiv.org/abs/1708.07228
====================================================
DARVIZ: Deep Abstract Representation, Visualization, and Verification of Deep Learning Models (Anush Sankaran - 16 August, 2017)
Further, for deep learning development there are many libraries in multiple programming languages such as TensorFlow (Python), CAFFE (C++), Theano (Python), Torch (Lua), and Deeplearning4j (Java), driving a huge need for interoperability across libraries.
Link: https://arxiv.org/abs/1708.04915
====================================================
A Heuristic Method for Scheduling Band Concert Tours (Linh Nghiem - 13 June, 2017)
We developed and implemented a heuristic algorithm in Java, which was based on simulated annealing, to automatically generate good tours that both satisfied the above constraints and improved objectives significantly when compared to the best manual tour created by the client
Link: https://arxiv.org/abs/1708.04873
====================================================
Monadic Remote Invocation (Raphael Jolly - 13 August, 2017)
In order to achieve Separation of Concerns in the domain of remote method invocation, a small functional adapter is added atop Java RMI, eliminating the need for every remote object to implement java.rmi.Remote and making it possible to remotely access existing code, unchanged
Link: https://arxiv.org/abs/1708.03882
====================================================
OpenML Benchmarking Suites and the OpenML100 (Bernd Bischl - 11 August, 2017)
We advocate the use of curated, comprehensive benchmark suites of machine learning datasets, backed by standardized OpenML-based interfaces and complementary software toolkits written in Python, Java and R
Link: https://arxiv.org/abs/1708.03731
====================================================
Safety Verification of Phaser Programs (Zeinab Ganjei - 9 August, 2017)
Implementations %of these recent and dynamic synchronization are found in modern languages such as X10 or Habanero Java
Link: https://arxiv.org/abs/1708.02801
====================================================
CodeSum: Translate Program Language to Natural Language (Xing Hu - 31 January, 2018)
We conduct experiments on three large-scale corpora in different program languages, i.e., Java, C#, and SQL, in which Java corpus is our new proposed industry code extracted from Github. Experimental results show that our method CodeSum outperforms the state-of-the-art significantly.
Link: https://arxiv.org/abs/1708.01837
====================================================
Confidentiality enforcement by hybrid control of information flows (Joachim Biskup - 26 July, 2017)
Our framework expands on and combines established concepts for confidentiality enforcement and its verification and is instantiated in a Java environment
Link: https://arxiv.org/abs/1707.08482
====================================================
An Exploration of Approaches to Integrating Neural Reranking Models in Multi-Stage Ranking Architectures (Zhucheng Tu - 25 July, 2017)
This has the advantage that the entire end-to-end system can be implemented in Java. Experiments show that feedforward evaluation of the convolutional neural network is significantly slower in Java, while the performance of the compiled C++ network does not consistently beat the PyTorch implementation.
Link: https://arxiv.org/abs/1707.08275
====================================================
One Tool, Many Languages: Language-Parametric Transformation with Incremental Parametric Syntax (James Koppel - 1 October, 2018)
We implement this approach in Haskell in our Cubix system, and construct incremental parametric syntaxes for C, Java, JavaScript, Lua, and Python
Link: https://arxiv.org/abs/1707.04600
====================================================
TOPCAT: Desktop Exploration of Tabular Data for Astronomy and Beyond (Mark Taylor - 7 July, 2017)
The software, which is free and open source, is written in Java, and the underlying high-performance visualisation library is suitable for re-use in other applications.
Link: https://arxiv.org/abs/1707.02160
====================================================
LittleDarwin: a Feature-Rich and Extensible Mutation Testing Framework for Large and Complex Java Systems (Ali Parsai - 4 July, 2017)
We designed LittleDarwin as a mutation testing framework able to cope with large and complex Java software systems, while still being easily extensible with new experimental components
Link: https://arxiv.org/abs/1707.01123
====================================================
Attribution Required: Stack Overflow Code Snippets in GitHub Projects (Sebastian Baltes - 3 July, 2017)
For Java, at least two thirds of the copied snippets were not attributed.
Link: https://arxiv.org/abs/1707.00452
====================================================
Complex Networks Analysis for Software Architecture: an Hibernate Call Graph Study (Daniel Henrique MourÃ£o Falci - 29 June, 2017)
In this paper, we analyzed the topological properties of Hibernate library, a well-known Java-based software through the extraction of its static call graph
Link: https://arxiv.org/abs/1706.09859
====================================================
Linking Sketches and Diagrams to Source Code Artifacts (Sebastian Baltes - 29 June, 2017)
We also implemented a plugin for a Java IDE that embeds the links in Javadoc comments and visualizes them in situ in the source code editor as graphical icons.
Link: https://arxiv.org/abs/1706.09700
====================================================
Qualitative and Quantitative Monitoring of Spatio-Temporal Properties with SSTL (L. Nenzi - 3 August, 2018)
The monitoring algorithms are implemented in an open source Java tool
Link: https://arxiv.org/abs/1706.09334
====================================================
JaTeCS an open-source JAva TExt Categorization System (Andrea Esuli - 21 June, 2017)
JaTeCS is an open source Java library that supports research on automatic text categorization and other related problems, such as ordinal regression and quantification, which are of special interest in opinion mining applications
Link: https://arxiv.org/abs/1706.06802
====================================================
pyRecLab: A Software Library for Quick Prototyping of Recommender Systems (Gabriel Sepulveda - 11 July, 2017)
Among the few libraries that have all these features, they are available in languages such as Java, Scala or C#, what is a disadvantage for less experienced programmers more used to the popular Python programming language. We benchmark it against the popular Java-based library LibRec, showing similar results
Link: https://arxiv.org/abs/1706.06291
====================================================
A Coq-based synthesis of Scala programs which are correct-by-construction (Youssef El Bakouny - 16 June, 2017)
A typical workflow features a user implementing a Coq functional program, proving this program's correctness with regards to its specification and making use of Scala-of-Coq to synthesize a Scala program that can seamlessly be integrated into an existing industrial Scala or Java application.
Link: https://arxiv.org/abs/1706.05271
====================================================
Understanding and Analyzing Java Reflection (Yue Li - 14 June, 2017)
We have implemented our reflection analysis in an open-source tool, called SOLAR, and evaluated its effectiveness extensively with large Java programs and libraries. Our experimental results demonstrate that SOLAR is able to (1) resolve reflection more soundly than the state-of-the-art reflection analysis; (2) automatically and accurately identify the parts of the program where reflection is resolved unsoundly or imprecisely; and (3) guide users to iteratively refine the analysis results by using lightweight annotations until their specific requirements are satisfied.
Link: https://arxiv.org/abs/1706.04567
====================================================
Computational Thinking in Patch (Hasan M. Jamil - 10 June, 2017)
Patch is closer to high level procedural languages such as C++ or Java than Scratch or Snap! but similar to them in ease of use and combines simplicity and expressive power in one single platform.
Link: https://arxiv.org/abs/1706.03272
====================================================
Towards a Java Subtyping Operad (Moez A. AbdelGawad - 29 December, 2017)
In this paper we explore defining an operad to model the construction of the subtyping relation in Java and in similar generic nominally-typed OO programming languages. The Java subtyping operad, we hope, will shed more light on understanding the type systems of generic nominally-typed OO languages.
Link: https://arxiv.org/abs/1706.00274
====================================================
A Co-contextual Type Checker for Featherweight Java (incl. Proofs) (Edlira Kuci - 23 May, 2018)
This yields a novel formulation of Igarashi et al.'s Featherweight Java (FJ) type system, where we replace class tables by the dual concept of class table requirements and class table operations by dual operations on class table requirements. Based on our formulation, we implemented an incremental FJ type checker and compared its performance against javac on a number of realistic example programs.
Link: https://arxiv.org/abs/1705.05828
====================================================
GQ($Î»$) Quick Reference and Implementation Guide (Adam White - 10 May, 2017)
If you questions or concerns about the content in this document or the attached java code please email Adam White (adam.white@ualberta.ca).
Link: https://arxiv.org/abs/1705.03967
====================================================
Smart Assessment of and Tutoring for Computational Thinking MOOC Assignments using MindReader (Hasan M. Jamil - 17 April, 2017)
In this paper, we introduce the core idea behind the MindReader online assessment system that is able to understand a wide variety of elementary algorithms students learn in their entry level programming classes such as Java, C++ and Python
Link: https://arxiv.org/abs/1705.00959
====================================================
MLC Toolbox: A MATLAB/OCTAVE Library for Multi-Label Classification (Keigo Kimura - 9 April, 2017)
There exists a few Java libraries for MLC, but no MATLAB/OCTAVE library that covers various methods
Link: https://arxiv.org/abs/1704.02592
====================================================
Does Python Smell Like Java? Tool Support for Design Defect Discovery in Python (Nicole VavrovÃ¡ - 31 March, 2017)
We have also designed the experiment in such a way that it aligned with prior research on design defect detection in Java in order to ease the comparison if we treat our own actions as a replication. Thus, the importance of the work is both in the unique open Python grammar of highest quality, tested on millions of lines of code, and in the design defect detection tool which works on something else than Java.
Link: https://arxiv.org/abs/1703.10882
====================================================
User-Defined Operators Including Name Binding for New Language Constructs (Kazuhiro Ichikawa - 31 March, 2017)
A contribution of this paper is that we reveal we can integrate a system for managing names and their scopes with a module and type system of an object-oriented language like Java. We have implemented ProteaJ2, which is a programming language based on Java and it supports our proposal
Link: https://arxiv.org/abs/1703.10861
====================================================
Profunctor Optics: Modular Data Accessors (Matthew Pickering - 31 March, 2017)
We use Haskell as a vehicle in which to present our constructions, but languages such as Java, C#, or Scala that provide the necessary features should work just as well
Link: https://arxiv.org/abs/1703.10857
====================================================
On the Interplay between Non-Functional Requirements and Builds on Continuous Integration (KlÃ©risson V. R. PaixÃ£o - 29 March, 2017)
Our results suggest that more planned schedule for maintainability for Ruby, and for functionality and reliability for Java would decrease delays related to broken builds.
Link: https://arxiv.org/abs/1703.09602
====================================================
Model-based Testing of the Java Network API (Cyrille Artho - 20 March, 2017)
We present a solution using tool "Modbat" that generates test cases for Java's network library java.nio, where we test both blocking and non-blocking network functions
Link: https://arxiv.org/abs/1703.07034
====================================================
A Model-Derivation Framework for Software Analysis (Bugra M. Yildiz - 19 March, 2017)
This paper presents a framework that automatically derives behavioral models from real-sized Java programs. Our framework builds on the EMF/ECore technology and provides a tool that creates an initial model from Java bytecode, as well as a series of transformations that simplify the model and eventually output a timed-automata model that can be processed by a model checker such as UPPAAL
Link: https://arxiv.org/abs/1703.06576
====================================================
Neural Sketch Learning for Conditional Program Generation (Vijayaraghavan Murali - 12 April, 2018)
We study the problem of generating source code in a strongly typed, Java-like programming language, given a label (for example a set of API calls or types) carrying a small amount of information about the code that is desired
Link: https://arxiv.org/abs/1703.05698
====================================================
A cubic-time algorithm for computing the trinet distance between level-1 networks (Vincent Moulton - 15 March, 2017)
The algorithms described in this paper have been implemented in JAVA and are freely available at https://www.uea.ac.uk/computing/TriLoNet.
Link: https://arxiv.org/abs/1703.05097
====================================================
A Java library to perform S-expansions of Lie algebras (C. Inostroza - 11 April, 2017)
After giving a description of the main ingredients used in this paper, we present a Java library that automatizes the S-expansion procedure. They are presented so that any user can easily modify them to perform his own calculations, without being necessarily an expert in Java
Link: https://arxiv.org/abs/1703.04036
====================================================
XamForumDB: a dataset for studying Q&A about cross-platform mobile applications development (Matias Martinez - 10 March, 2017)
A traditional way is to build two different apps, one in Java for Android, the other in Objective-C for iOS
Link: https://arxiv.org/abs/1703.03631
====================================================
Cellulyzer - Automated analysis and interactive visualization/simulation of select cellular processes (Aliakbar Jafarpour - 6 March, 2017)
The collection of programs is primarily developed for the common bio-image analysis software ImageJ (as a single Java Plugin). Some programs are also available in other languages (C++ and Javascript) and may be run simply with a web-browser; even on a low-end Tablet or Smartphone
Link: https://arxiv.org/abs/1703.02611
====================================================
Live Visualization of GUI Application Code Coverage with GUITracer (Arthur-Jozsef Molnar - 26 February, 2017)
The current implementation of the tool can be used with any Java-based target application that employs one of the AWT, Swing or SWT toolkits
Link: https://arxiv.org/abs/1702.08013
====================================================
JETracer - A Framework for Java GUI Event Tracing (Arthur-Jozsef Molnar - 26 February, 2017)
The present paper introduces the open-source Java Event Tracer (JETracer) framework for real-time tracing of GUI events within applications based on the AWT, Swing or SWT graphical toolkits
Link: https://arxiv.org/abs/1702.08008
====================================================
Discriminating Traces with Time (Saeid Tizpaz-Niari - 23 February, 2017)
On a set of Java benchmarks, we find that compactly-represented decision trees scalably discriminate with high accuracy---more scalably than maximum likelihood discriminants and with comparable accuracy
Link: https://arxiv.org/abs/1702.07103
====================================================
jSET - The Java Software Evolution Tracker (Arthur-Jozsef Molnar - 22 February, 2017)
This paper introduces the Java Software Evolution Tracker, a visualization and analysis tool that provides practitioners the means to examine the evolution of a software system from a top to bottom perspective, starting with changes in the graphical user interface all the way to source code modifications.
Link: https://arxiv.org/abs/1702.06973
====================================================
liquidSVM: A Fast and Versatile SVM package (Ingo Steinwart - 22 February, 2017)
Besides the C++ API and a command line interface, bindings to R, MATLAB, Java, Python, and Spark are available
Link: https://arxiv.org/abs/1702.06899
====================================================
Java Code Analysis and Transformation into AWS Lambda Functions (Josef Spillner - 17 February, 2017)
In this paper, we outline the design and runtime characteristics of Podilizer, a tool which implements the pipeline specifically for Java source code as input and AWS Lambda as output. We contribute technical and economic metrics about this concrete 'FaaSification' process by observing the behaviour of Podilizer with two representative Java software projects.
Link: https://arxiv.org/abs/1702.05510
====================================================
A Performance Analysis of Simple Runtime System for Actor Programming in C++ (Sergey Vostokin - 17 February, 2017)
The practical significance of the Templet was examined by comparative study on the performance of three applications: the reference code in C++, managed by the OpenMP; the actor code in C++, managed by the Templet; the actor code in Java, managed by the Akka
Link: https://arxiv.org/abs/1702.05463
====================================================
3DNA Printer: A Tool for Automated DNA Origami (Amay Agrawal - 14 February, 2017)
In this work, we present a truly open source software '3dnaprinter' based on Java (without MATLAB) that can do the same work.
Link: https://arxiv.org/abs/1702.04343
====================================================
Data Warehouse Benchmarking with DWEB (JÃ©rÃ´me Darmont - 27 January, 2017)
A Java implementation of DWEB is freely available on-line, which can be interfaced with most existing relational DMBSs
Link: https://arxiv.org/abs/1701.08053
====================================================
Fuzzy Ontology-Based Sentiment Analysis of Transportation and City Feature Reviews for Safe Traveling (Farman Ali - 19 January, 2017)
A fuzzy ontology and an intelligent system prototype are developed by using ProtÃ©gÃ© OWL and Java, respectively.
Link: https://arxiv.org/abs/1701.05334
====================================================
AstroImageJ: Image Processing and Photometric Extraction for Ultra-Precise Astronomical Light Curves (Expanded Edition) (Karen A. Collins - 17 January, 2017)
ImageJ is a graphical user interface (GUI) driven, public domain, Java-based, software package for general image processing traditionally used mainly in life sciences fields
Link: https://arxiv.org/abs/1701.04817
====================================================
A Practical Study of Control in Objected-Oriented--Functional--Logic Programming with Paisley (Baltasar TrancÃ³n y Widemann - 3 January, 2017)
 Using simple APIs and programming idioms, it brings the power of functional-logic processing of arbitrary data objects to the Java platform, without constraining the underlying object-oriented semantics.  It exploits recent additions to the Java language, namely functional interfaces and lambda expressions, for an explicit and transparent continuation-passing style approach to control
Link: https://arxiv.org/abs/1701.00634
====================================================
On the Interaction of Relational Database Access Technologies in Open Source Java Projects (Alexandre Decan - 2 January, 2017)
We selected 2,457 Java projects on GitHub using the low-level JDBC technology and higher-level object relational mappings such as Hibernate XML configuration files and JPA annotations. We also explored how the introduction of a new database technology in a Java project impacts the use of existing ones
Link: https://arxiv.org/abs/1701.00416
====================================================
Benchmarking data warehouses (JÃ©rÃ´me Darmont - 2 January, 2017)
DWEB is implemented as a Java free software that can be interfaced with most existing relational database management systems
Link: https://arxiv.org/abs/1701.00399
====================================================
Parichayana: An Eclipse Plugin for Detecting Exception Handling Anti-Patterns and Code Smells in Java Programs (Ashish Sureka - 31 December, 2016)
In this paper, we present an Eclipse plug-in (called as Parichayana) for detecting exception handling anti-patterns and code smells in Java programs. We used Parichyana on several large open-source Java based projects and detected presence of exception handling anti-patterns
Link: https://arxiv.org/abs/1701.00108
====================================================
A Rigorous Framework for Specification, Analysis and Enforcement of Access Control Policies (Andrea Margheri - 29 December, 2016)
The framework is supported by Java-based tools, among which an Eclipse- based IDE offering a tailored development and analysis environment for FACPL policies and a Java library for policy enforcement
Link: https://arxiv.org/abs/1612.09339
====================================================
Distributed Real-Time Sentiment Analysis for Big Data Social Streams (Amir Hossein Akhavan Rahnama - 27 December, 2016)
Sentinel is a distributed system written in Java that aims to solve this challenge by enforcing both the processing and learning process to be done in distributed form
Link: https://arxiv.org/abs/1612.08543
====================================================
REPPlab: An R package for detecting clusters and outliers using exploratory projection pursuit (Daniel Fischer - 20 December, 2016)
REPPlab is an R interface for the Java program EPPlab that implements four projection indices and three biologically inspired optimization algorithms
Link: https://arxiv.org/abs/1612.06518
====================================================
SimTensor: A synthetic tensor data generator (Hadi Fanaee-T - 9 December, 2016)
It also has this facility to export generated data to universal formats such as CSV and HDF5, which can be imported via a wide range of programming languages (C, C++, Java, R, Fortran, MATLAB, Perl, Python, and many more)
Link: https://arxiv.org/abs/1612.03772
====================================================
Generating Code Summaries Using the Power of the Crowd (Sahar Badihi - 12 December, 2016)
To mitigate this problem, in this article, we introduce CrowdSummarizer, a code summarization platform that benefits from the concepts of crowdsourcing, gamification, and natural language processing to automatically generate a high level summary for the methods of a Java program
Link: https://arxiv.org/abs/1612.03618
====================================================
Real-time Collision Handling in Railway Network:An Agent-based Approach (Poulami Dalapati - 5 December, 2016)
We implement the proposed mechanism in Java Agent DEvelopment Framework (JADE)
Link: https://arxiv.org/abs/1612.01260
====================================================
"Model and Run" Constraint Networks with a MILP Engine (Thierry Petit - 27 November, 2016)
In this paper, we introduce MICE, a complete Java CP modeler that can use any Mixed Integer Linear Programming (MILP) solver as a solution technique
Link: https://arxiv.org/abs/1611.08908
====================================================
At Ease with Your Warnings: The Principles of the Salutogenesis Model Applied to Automatic Static Analysis (Jan-Peter Ostberg - 23 November, 2016)
In this paper, we will present an idea on how to transfer this model into a triage and recommendation model for static analysis tools and give an example of how this can be implemented in FindBugs, a static analysis tool for Java.
Link: https://arxiv.org/abs/1611.08004
====================================================
Will My Tests Tell Me If I Break This Code? (Rainer Niedermayr - 22 November, 2016)
To do so, we conducted an empirical study in which we applied an extreme mutation testing approach to analyze the tests of open-source projects written in Java
Link: https://arxiv.org/abs/1611.07163
====================================================
Integration Checker of JAVA P2P distributed System with Auto Source Code Composition (Lican Huang - 28 October, 2016)
This paper presents an integrity checker of JAVA P2P distributed system with auto source code composition. JAVA distributed system must guarantee the integrity of program itself and the system components of JAVA virtual machine against attackers, hackers, spies, cheaters, conspirators, etc
Link: https://arxiv.org/abs/1610.09231
====================================================
Multiactive objects and their applications (Ludovic Henrio - 20 November, 2017)
We present it through ProActive, the Java library that offers multi-active objects, and through MultiASP, the programming language that allows the formalisation of our developments
Link: https://arxiv.org/abs/1610.09183
====================================================
RSA algorithm with a new approach encryption and decryption message text by ascii (Ahmad Steef - 9 January, 2016)
In many research works, there has been an orientation to studying and developing many of the applications of public-key cryptography to secure the data while transmitting in the systems, In this paper we present an approach to encrypt and decrypt the message text according to the ASCII(American Standard Code for Information Interchange) and RSA algorithm by converting the message text into binary representation and dividing this representation to bytes(8s of 0s and 1s) and applying a bijective function between the group of those bytes and the group of characters of ASCII and then using this mechanism to be compatible with using RSA algorithm, finally, Java application was built to apply this approach directly.
Link: https://arxiv.org/abs/1610.08832
====================================================
Towards an Accurate Mathematical Model of Generic Nominally-Typed OOP (Moez A. AbdelGawad - 30 October, 2016)
The presented concepts and suggestions are particularly geared towards enabling GNOOP to offer a precise and simple view of so-far-hard-to-analyze features of generic OOP such as variance annotations (e.g., Java wildcard types) and erased generics (e.g., Java type erasure).
Link: https://arxiv.org/abs/1610.05114
====================================================
Prioritized Garbage Collection: Explicit GC Support for Software Caches (Diogenes Nunez - 15 October, 2016)
In managed languages like Java or JavaScript, however, this space-time tradeoff is complex
Link: https://arxiv.org/abs/1610.04790
====================================================
Persistent Contextual Values as Inter-Process Layers (Markus Raab - 14 October, 2016)
Our implementation, called Elektra, permits development in several languages including C++ and Java
Link: https://arxiv.org/abs/1610.04461
====================================================
MatLM: a Matrix Formulation for Probabilistic Language Models (Yanshan Wang - 3 October, 2016)
We release a Java software package--MatLM--implementing the proposed models
Link: https://arxiv.org/abs/1610.00735
====================================================
Automated Enterprise Applications Generation from Requirement Model (Yilong Yang - 30 September, 2016)
Moreover, the generated off-the-shelf code is adopted the same multi-layer structure as Java EE and .NET platforms which are robust, scalable, and widely used in enterprise application developments
Link: https://arxiv.org/abs/1609.09656
====================================================
J-Viz: Sibling-First Recursive Graph Drawing for Visualizing Java Bytecode (Md. Jawaherul Alam - 31 August, 2016)
The particular graphs we consider are derived from applying Shiver's k-CFA framework to Java bytecode, and our visualizer includes helpful links between the nodes of an input graph and the Java bytecode that produced it, as well as a decompiled version of that Java bytecode. We show through several case studies that the canonical drawing paradigm used in J-Viz is effective for identifying potential security vulnerabilities and repeated use of the same code in Java applications.
Link: https://arxiv.org/abs/1608.08970
====================================================
Collective Intelligence for Smarter API Recommendations in Python (Andrea Renika D&#39;Souza - 31 August, 2016)
A fair amount of work has been done recently to improve the relevance of these code completion results, especially for statically typed languages like Java
Link: https://arxiv.org/abs/1608.08736
====================================================
Multi-Threaded Actors (Keyvan Azadbakht - 10 August, 2016)
We provide a formal operational semantics, and a description of a Java-based implementation for the basic programming abstractions describing multi-threaded  actors
Link: https://arxiv.org/abs/1608.03322
====================================================
A deep language model for software code (Hoa Khanh Dam - 9 August, 2016)
Results from our intrinsic evaluation on a corpus of Java projects have demonstrated the effectiveness of our language model
Link: https://arxiv.org/abs/1608.02715
====================================================
Fast and Lean Immutable Multi-Maps on the JVM based on Heterogeneous Hash-Array Mapped Tries (Michael J. Steindorfer - 2 August, 2016)
Motivated by reuse and type-safety, libraries for Java, Scala and Clojure typically implement immutable multi-maps by nesting sets as the values with the keys of a trie map
Link: https://arxiv.org/abs/1608.01036
====================================================
Comparing the Performance of Graphical Structure Learning Algorithms with TETRAD (Joseph D. Ramsey - 24 October, 2017)
Currently the tool is available as package in the TETRAD source code (written in Java), which can be loaded up in an Integrated Development Environment (IDE) such as IntelliJ IDEA
Link: https://arxiv.org/abs/1607.08110
====================================================
Discovering, quantifying, and displaying attacks (Roberto Vigo - 19 October, 2016)
The usefulness of the framework is demonstrated on a national-scale authentication system, studied through a Java implementation of the framework.
Link: https://arxiv.org/abs/1607.07720
====================================================
Knowledge Representation on the Web revisited: Tools for Prototype Based Ontologies (Michael Cochez - 16 July, 2016)
These implementations are written in Java and can be extended by using the implementation as a library
Link: https://arxiv.org/abs/1607.04809
====================================================
Shesop Healthcare: Android application to monitor heart rate variance, display influenza and stress condition using Polar H7 (Andrien Ivander Wijaya - 16 July, 2016)
The application use Android studio, XML and Java
Link: https://arxiv.org/abs/1607.04771
====================================================
Design of an intermediate representation for query languages (Romain Vernoux - 14 July, 2016)
Data oriented applications, usually written in a high-level, general-purpose programming language (such as Java) interact with database through a coarse interface
Link: https://arxiv.org/abs/1607.04197
====================================================
Real-time Rescheduling in Distributed Railway Network: An Agent-Based Approach (Poulami Dalapati - 12 July, 2016)
The proposed approach is evaluated on the actual schedule of the Eastern Railways, India by constructing vari- ous disaster scenarios using the Java Agent DEvelopment Framework (JADE)
Link: https://arxiv.org/abs/1607.03340
====================================================
Garbage Collection in JyNI - How to bridge Mark/Sweep and Reference Counting GC (Stefan Richthofer - 1 July, 2016)
It enables Python code to leverage Java's multithreading features and utilizes Java's built-in garbage collection (GC). JyNI is implemented using the Java Native Interface (JNI) and its native part is designed to be binary compatible with existing extension builds [...].
Link: https://arxiv.org/abs/1607.00825
====================================================
Future-based Static Analysis of Message Passing Programs (Wytse Oortwijn - 19 June, 2016)
We focus on the modular verification of MPI programs by statically verifying concrete Java code
Link: https://arxiv.org/abs/1606.05942
====================================================
DiSquawk: 512 cores, 512 memories, 1 JVM (Foivos S. Zakkak - 14 June, 2016)
On the contrary, high productivity languages, like Java, are designed to abstract away the hardware details and allow developers to focus on the implementation of their algorithm
Link: https://arxiv.org/abs/1606.04296
====================================================
Automated Space/Time Scaling of Streaming Task Graph (Hossein Omidian - 12 June, 2016)
Similar to Ambric tools, our HLS tool accepts a STG as input written in a subset of Java and a structural language in the style of a Kahn Processing Network (KPN). Unlike the Ambric tools, our HLS tool analyzes the parallelism internal to each Java "node" and evaluates the throughput and area of several possible implementations
Link: https://arxiv.org/abs/1606.03717
====================================================
Formal Semantics and Soundness of a Translation from Event-B Actions to SQL Statements (Tim Wahls - 8 June, 2016)
The EventB2SQL tool translates Event-B models to persistent Java applications that store the state of the model in a relational database
Link: https://arxiv.org/abs/1606.02669
====================================================
SCJ-Circus: a refinement-oriented formal notation for Safety-Critical Java (Alvaro Miyazawa - 7 June, 2016)
Safety-Critical Java (SCJ) is a version of Java whose goal is to support the development of real-time, embedded, safety-critical software
Link: https://arxiv.org/abs/1606.02021
====================================================
GrayStarServer: Server-side spectrum synthesis with a browser-based client-side user interface (C. Ian Short - 30 May, 2016)
Unlike GS3, GSS carries out the physical modeling on the server side in Java, and communicates with the JavaScript and HTML client via an asynchronous HTTP request. I also present LineListServer, a Java code for converting custom ASCII line lists in NIST format to the byte data type file format required by GSS so that users can prepare their own custom line lists
Link: https://arxiv.org/abs/1605.09368
====================================================
The bitwise operations in relation to obtaining Latin squares (Krasimir Yordzhev - 8 July, 2016)
The main thrust of the article is to provide interesting example, useful for students of using bitwise operations in the programming languages C ++ and Java
Link: https://arxiv.org/abs/1605.07171
====================================================
Isotropic Dynamic Hierarchical Clustering (Victor Sadikov - 23 May, 2016)
The system is implemented as a library of Java classes representing Points, Sets of points with aggregated statistical information, B-tree, and Nodes with a support of serialization and storage in a MySQL database.
Link: https://arxiv.org/abs/1605.07030
====================================================
Evolutionary Demographic Algorithms (Marco AR Erra - 21 May, 2016)
Our purpose was to develop a Java-JINI distributed library that implements Genetic Algorithms with sub-populations (coarse grain) and a graphical interface in order to configure and follow the evolution of the search
Link: https://arxiv.org/abs/1605.06714
====================================================
Availability Aware Continuous Replica Placement Problem (Abdullah Yousafzai - 13 May, 2016)
In this effort we use modified greedy heuristics from the CRPP and investigated the proposed mechanism using a trace driven java based simulation.
Link: https://arxiv.org/abs/1605.04069
====================================================
Machine Learning Techniques with Ontology for Subjective Answer Evaluation (M. Syamala Devi - 9 May, 2016)
The software used for implementation includes Java Programming Language and tools such as MATLAB, ProtÃ©gÃ©, etc
Link: https://arxiv.org/abs/1605.02442
====================================================
A declarative Language for Rapid Business Development (Nabarun Mondal - 11 May, 2018)
It's philosophy is to expose the existing Java echo system in a declarative fashion for the purpose of System Integration and software validation
Link: https://arxiv.org/abs/1604.05903
====================================================
DISTEA: Efficient Dynamic Impact Analysis for Distributed Systems (Haipeng Cai - 15 April, 2016)
We implemented DISTEA for Java and applied it to four distributed programs of various types and sizes, including two enterprise systems
Link: https://arxiv.org/abs/1604.04638
====================================================
An Interference-Free Programming Model for Network Objects (Mischael Schill - 15 April, 2016)
We present our pathway to fusing these contrasting but complementary ideas, and evaluate the performance overhead of the automatic synchronization in D-SCOOP, finding that it comes close to---or outperforms---explicit locking-based synchronization in Java RMI.
Link: https://arxiv.org/abs/1604.04591
====================================================
Refactoring Delta-Oriented Product Lines to achieve Monotonicity (Ferruccio Damiani - 1 April, 2016)
These operations can add, remove or modify named elements in a program (e.g., classes, methods and fields in a Java program). The algorithms are formalized by means of a core calculus for DOP of product lines of Java programs and their correctness and complexity are given.
Link: https://arxiv.org/abs/1604.00346
====================================================
A Comparison of NOOP to Structural Domain-Theoretic Models of OOP (Moez A. AbdelGawad - 29 December, 2017)
Mainstream object-oriented programming languages such as Java, C#, C++ and Scala are all almost entirely nominally-typed
Link: https://arxiv.org/abs/1603.08648
====================================================
Deriving Application Level Relationships by Analysing the Run Time Behaviour of Simple and Complex SQL Queries (Girish Sundaram - 26 March, 2016)
We have also implemented the idea using JAVA and presented experimental results in Demo Section.This paper introduces a unique approach to predict the possible application level relationships in databases with the help of the application relationship analysis of simple and complex SQL queries
Link: https://arxiv.org/abs/1603.08514
====================================================
Automatic Theorem Proving in Walnut (Hamoon Mousavi - 18 March, 2016)
Walnut is written in Java and is open source
Link: https://arxiv.org/abs/1603.06017
====================================================
Code Generation for Event-B (Victor Rivera - 5 February, 2016)
Additionally, we compared EventB2Java against two other tools for Event-B code generation. EventB2Java enables users to start the software development process in Event-B, where users can model the system and prove its consistency, to then transition to JML-annotated Java code, where users can continue the development process.
Link: https://arxiv.org/abs/1602.02004
====================================================
Marvin: Semantic annotation using multiple knowledge sources (Nikola Milosevic - 2 February, 2016)
In this report we present Marvin, a text annotator written in Java, which can be used as a command line tool and as a Java library
Link: https://arxiv.org/abs/1602.00515
====================================================
JADE, TraSMAPI and SUMO: A tool-chain for simulating traffic light control (Tiago Azevedo - 29 January, 2016)
This tool-chain consists in combining JADE (Java Agent DEvelopment Framework), for the implementation of multi-agent systems, with SUMO (Simulation of Urban MObility), for the microscopic simulation of traffic interactions
Link: https://arxiv.org/abs/1601.08154
====================================================
Analysis of Distributed Snapshot Algorithms (Sharath Srivatsa - 29 January, 2016)
Simulations were achieved using SimGrid Java API.
Link: https://arxiv.org/abs/1601.08039
====================================================
BUbiNG: Massive Crawling for the Masses (Paolo Boldi - 26 January, 2016)
BUbiNG is an opensource Java fully distributed crawler; a single BUbiNG agent, using sizeable hardware, can crawl several thousands pages per second respecting strict politeness constraints, both host- and IP-based
Link: https://arxiv.org/abs/1601.06919
====================================================
AstroImageJ: Image Processing and Photometric Extraction for Ultra-Precise Astronomical Light Curves (Karen A. Collins - 17 January, 2017)
ImageJ is a graphical user interface (GUI) driven, public domain, Java-based, software package for general image processing traditionally used mainly in life sciences fields
Link: https://arxiv.org/abs/1601.02622
====================================================
JikesRVM: Internal Mechanisms Study and Garbage Collection with MMTk (Pradeeban Kathiravelu - 11 January, 2016)
We have also implemented a micro-benchmark for the GC algorithms in Java, named "XPDBench", for benchmarking the implementations.
Link: https://arxiv.org/abs/1601.02536
====================================================
The Impact of Technical Domain Expertise on Search Behavior and Task Outcome (Julia Kiseleva - 22 December, 2015)
We focus on Java and Javascript, yet we believe that our study and results are applicable for other expertise-sensitive search tasks
Link: https://arxiv.org/abs/1512.07051
====================================================
SIREN Cytoscape plugin: Interaction Type Discrimination in Gene Regulatory Networks (Jason Montojo - 16 December, 2015)
Signing of Regulatory Networks (SIREN) plugin for Cytoscape is an open-source Java tool for discrimination of interaction type (activatory or inhibitory) in gene regulatory networks. The SIREN Cytoscape plugin is implemented in Java and is freely available at http://baderlab.org/Software/SIRENplugin and via the Cytoscape app manager.
Link: https://arxiv.org/abs/1512.05067
====================================================
Creating Electronic Books-Chapters for Computers and Tablets Using Easy Java/JavaScript Simulations, EjsS Modeling Tool (Loo Kang Wee - 16 May, 2016)
This paper shares my journey (tools used, design principles derived and modeling pedagogy implemented) when creating electronic books-chapters (epub3 format) for computers and tablets using Easy Java/JavaScript Simulations, (old name EJS, new EjsS) Modeling Tool
Link: https://arxiv.org/abs/1512.02295
====================================================
Visualization in teaching and learning mathematics in elementary, secondary and higher education (Branko Malesevic - 22 November, 2015)
The education program deals with modern techniques of visualization by using technologies such as GeoGegebra, JAVA and HTML.
Link: https://arxiv.org/abs/1511.07087
====================================================
Blade Runner -What kind objects are there in the JVO ALMA Archive?- (Satoshi Eguchi - 20 November, 2015)
We developed a tiny Java application named ``Blade Runner'' for this purpose
Link: https://arxiv.org/abs/1511.06533
====================================================
Simulating central forces in the classroom (Juan M. Aguirregabiria - 20 November, 2015)
We describe the easy to customize and extend open source Java program Central force workbench that can be used in the classroom to simulate the motion of a particle (or a two-body system) under central forces
Link: https://arxiv.org/abs/1511.06527
====================================================
ARMageddon: Cache Attacks on Mobile Devices (Moritz Lipp - 19 June, 2016)
Eventually, we are the first to attack cryptographic primitives implemented in Java
Link: https://arxiv.org/abs/1511.04897
====================================================
Abstraction Refinement Guided by a Learnt Probabilistic Model (Radu Grigore - 10 November, 2015)
We evaluate our approach on an object sensitive pointer analysis for Java programs, with two client analyses (PolySite and Downcast).
Link: https://arxiv.org/abs/1511.01874
====================================================
Why Is Dual-Pivot Quicksort Fast? (Sebastian Wild - 28 September, 2016)
I discuss the new dual-pivot Quicksort that is nowadays used to sort arrays of primitive types in Java
Link: https://arxiv.org/abs/1511.01138
====================================================
There is no fast lunch: an examination of the running speed of evolutionary algorithms in several languages (Juan-J. Merelo - 3 November, 2015)
It is quite usual when an evolutionary algorithm tool or library uses a language other than C, C++, Java or Matlab that a reviewer or the audience questions its usefulness based on the speed of those other languages, purportedly slower than the aforementioned ones. Despite speed being not everything needed to design a useful evolutionary algorithm application, in this paper we will measure the speed for several very basic evolutionary algorithm operations in several languages which use different virtual machines and approaches, and prove that, in fact, there is no big difference in speed between interpreted and compiled languages, and that in some cases, interpreted languages such as JavaScript or Python can be faster than compiled languages such as Scala, making them worthy of use for evolutionary algorithm experimentation.
Link: https://arxiv.org/abs/1511.01088
====================================================
A Formal Model for Direct-style Asynchronous Observables (Philipp Haller - 2 November, 2015)
Reactive Extensions are best-known from the .NET platform, and widely-used implementations of its programming model exist also for Java, Ruby, and other languages
Link: https://arxiv.org/abs/1511.00511
====================================================
DignitÃ© - DIGital Network Information & Traces Extraction (Thomas Marcel Ender - 27 October, 2015)
To do so, we have learned to use the Scala Programming Language and its integration with Java code
Link: https://arxiv.org/abs/1510.07864
====================================================
Cross-platform validation and analysis environment for particle physics (S. V. Chekanov - 27 July, 2017)
The front-end of this framework uses the Python programming language, while the back-end is written in Java, which provides a multi-platform environment that can be run from a web browser and can easily be deployed at the grid sites
Link: https://arxiv.org/abs/1510.06638
====================================================
Analysis of Intelligent Classifiers and Enhancing the Detection Accuracy for Intrusion Detection System (Mohanad Albayati - 28 September, 2015)
Then we will discuss and experiment some of the hybrid AI (Artificial Intelligence) classifiers that can be used for IDS, and finally we developed a Java software with three most efficient classifiers and compared it with other options
Link: https://arxiv.org/abs/1509.08239
====================================================
A vulnerability in Google AdSense: Automatic extraction of links to ads (Manuel BlÃ¡zquez Ochando - 25 September, 2015)
Such method involves obtaining the source code built for the Google java applet for publishing and handling ads and for the final link retrieval
Link: https://arxiv.org/abs/1509.07741
====================================================
Frequency Distribution of Error Messages (David Pritchard - 24 September, 2015)
We consider large data sets in Python and Java that include both syntax and run-time errors
Link: https://arxiv.org/abs/1509.07238
====================================================
IllinoisSL: A JAVA Library for Structured Prediction (Kai-Wei Chang - 23 September, 2015)
IllinoisSL is a Java library for learning structured prediction models
Link: https://arxiv.org/abs/1509.07179
====================================================
Architecture and Behavior Modeling of Cyber-Physical Systems with MontiArcAutomaton (Jan Oliver Ringert - 15 September, 2015)
Available tools include a textual editor with syntax highlighting and code completion as well as a graphical editor and a powerful and extensible code generation framework for target languages including EMF, Java, Mona, and Python.
Link: https://arxiv.org/abs/1509.04505
====================================================
Building a Truly Distributed Constraint Solver with JADE (Ibrahim Adeyanju - 3 September, 2015)
The main contribution of our work is the design and implementation of a truly distributed constraint solver based on a local search algorithm using Java Agent DEvelopment framework (JADE) to enable communication between agents on different machines
Link: https://arxiv.org/abs/1509.01040
====================================================
A Big Data Analyzer for Large Trace Logs (Alkida Balliu - 2 September, 2015)
This paper presents BiDAl, a prototype Java tool for log-data analysis that incorporates several Big Data technologies in order to simplify the task of extracting information from data traces produced by large clusters and server farms
Link: https://arxiv.org/abs/1509.00773
====================================================
Transparent hardware synthesis of Java for predictable large-scale distributed systems (Ian Gray - 28 August, 2015)
Part of this work involves the automatic implementation of input Java code on FPGAs, both for speed and predictability. Initial results show that the use of Java does not hamper hardware generation, and provides tight execution time estimates
Link: https://arxiv.org/abs/1508.07142
====================================================
Boosting Java Performance using GPGPUs (James Clarkson - 27 August, 2015)
In this paper we describe Jacc, an experimental framework which allows developers to program GPGPUs directly from Java
Link: https://arxiv.org/abs/1508.06791
====================================================
On Social and Economic Spheres: An Observation of the 'gantangan' Indonesian tradition (Hokky Situngkir - 19 August, 2015)
There are wide variations of the traditions across the archipelago, and we revisit an observation to one in Subang, West Java, Indonesia
Link: https://arxiv.org/abs/1508.05352
====================================================
Cold Object Identification in the Java Virtual Machine (Kim T. Briggs - 18 August, 2015)
Many Java applications instantiate objects within the Java heap that are persistent but seldom if ever referenced by the application
Link: https://arxiv.org/abs/1508.04753
====================================================
Towards Enabling Overture as a Platform for Formal Notation IDEs (LuÃ­s Diogo Couto - 16 August, 2015)
Formal Methods tools will never have as many users as tools for popular programming languages and so the effort spent on constructing Integrated Development Environments (IDEs) will be orders of magnitudes lower than that of programming languages such as Java
Link: https://arxiv.org/abs/1508.03893
====================================================
An Integrated Mobile Application for Enhancing Management of Nutrition Information in Arusha Tanzania (Neema Mduma - 14 August, 2015)
Using XML and Java, we have built an application interface that provides easy interactive view.
Link: https://arxiv.org/abs/1508.03441
====================================================
Can JSP Code be Generated Using XML Tags? (Neha Bothra - 11 August, 2015)
Over the years, a variety of web services have started using server-side scripting to deliver results back to a client as a paid or free service; one such server-side scripting language is Java Server Pages (JSP)
Link: https://arxiv.org/abs/1508.02557
====================================================
A High-Level Modeling Language for the Efficient Design, Implementation, and Testing of Android Applications (John Abou-Jaoudeh - 10 August, 2015)
MoDroid provides Android programmers with the following advantages: (1) Models are built using high-level primitives that abstract away several implementation details; (2) It allows the definition of interfaces between models to automatically compose them; (3) Java native android can be automatically generated along with the required permissions; (4) It supports efficient model-based testing that operates on models
Link: https://arxiv.org/abs/1508.02153
====================================================
Featherweight VeriFast (Bart Jacobs - 21 September, 2015)
VeriFast is a leading research prototype tool for the sound modular verification of safety and correctness properties of single-threaded and multithreaded C and Java programs
Link: https://arxiv.org/abs/1507.07697
====================================================
Teaching natural deduction in the right order with Natural Deduction Planner (Jeremy Seligman - 13 July, 2015)
We describe a strategy-based approach to teaching natural deduction using a notation that emphasises the order in which deductions are constructed, together with a {\LaTeX} package and Java app to aid in the production of teaching resources and classroom demonstrations
Link: https://arxiv.org/abs/1507.03681
====================================================
JSKETCH: Sketching for Java (Jinseong Jeon - 13 July, 2015)
JSKETCH's input is a partial Java program that may include holes, which are unknown constants, expression generators, which range over sets of expressions, and class generators, which are partial classes. Finally, JSKETCH synthesizes an executable Java program by interpreting the output of SKETCH.
Link: https://arxiv.org/abs/1507.03577
====================================================
Java Implementation of a Parameter-less Evolutionary Portfolio (JosÃ© C. Pereira - 26 June, 2015)
The Java implementation of a portfolio of parameter-less evolutionary algorithms is presented
Link: https://arxiv.org/abs/1506.08867
====================================================
A Java Implementation of Parameter-less Evolutionary Algorithms (JosÃ© C. Pereira - 26 June, 2015)
This report describes a Java implementation, Parameter-less Evolutionary Algorithm (P-EAJava), that integrates several parameter-less evolutionary algorithms into a single platform. Along with a brief description of P-EAJava, we also provide detailed instructions on how to use it, how to implement new problems, and how to generate new parameter-less versions of evolutionary algorithms.
Link: https://arxiv.org/abs/1506.08694
====================================================
moco: Fast Motion Correction for Calcium Imaging (Alexander Dubbs - 19 June, 2015)
It is programmed in Java and is compatible with ImageJ.
Link: https://arxiv.org/abs/1506.06039
====================================================
Knowledge representation and processing methods in Semantic Web (JarosÅaw Waliszko - 17 June, 2015)
A working prototype of ontology-driven application, written in Java, has been developed within the scope of this thesis
Link: https://arxiv.org/abs/1506.05312
====================================================
jUCM: Universal Class Morphing (position paper) (Aggelos Biboudis - 17 June, 2015)
We present informal examples of the functionality and discuss a design for adding universal morphing to Java.
Link: https://arxiv.org/abs/1506.05270
====================================================
Review on the Design of Web Based SCADA Systems Based on OPC DA Protocol (Hosny A. Abbas - 15 June, 2015)
To achieve this goal they used diverse of modern IT technologies like XML, Web services, Java and AJAX
Link: https://arxiv.org/abs/1506.05069
====================================================
Implementation of Training Convolutional Neural Networks (Tianyi Liu - 3 June, 2015)
Then we applied the particular convolutional neural network to implement the typical face recognition problem by java
Link: https://arxiv.org/abs/1506.01195
====================================================
Robust and Efficient Elimination of Cache and Timing Side Channels (Benjamin A. Braun - 31 August, 2015)
We report the experimental results of applying our solution to protect several C, C++, and Java programs
Link: https://arxiv.org/abs/1506.00189
====================================================
BACOM2: a Java tool for detecting normal cell contamination of copy number in heterogeneous tumor (Yi Fu - 16 May, 2015)
We develop a cross-platform open-source Java application (BACOM2) with graphic user interface (GUI), and users also can use a XML file to set the parameters of algorithm model, file paths and the dataset of paired samples
Link: https://arxiv.org/abs/1505.04295
====================================================
SFAMSS: a secure framework for atm machines via secret sharing (Zeinab Ghafari - 12 May, 2015)
Our framework is implemented with Java and the software architecture, and its components are studied in detailed.
Link: https://arxiv.org/abs/1505.03078
====================================================
FPGA-Based Bandwidth Selection for Kernel Density Estimation Using High Level Synthesis Approach (Artur Gramacki - 29 September, 2015)
Unfortunately, programming for FPGA (using ha\-rdware description languages, HDL) is a difficult and not-trivial task and is not intuitive for C/C++/Java programmers
Link: https://arxiv.org/abs/1505.02100
====================================================
SparkCL: A Unified Programming Framework for Accelerators on Heterogeneous Clusters (Oren Segal - 5 May, 2015)
We introduce SparkCL, an open source unified programming framework based on Java, OpenCL and the Apache Spark framework. The new framework is seamlessly integrated into the standard Spark framework via a Java-OpenCL device programming layer which is based on Aparapi and a Spark programming layer that includes new kernel function types and modified Spark transformations and actions
Link: https://arxiv.org/abs/1505.01120
====================================================
Server component installation and testing of the university information and educational environment on the Moodle LMS platform (Irina Erjomina - 3 May, 2015)
We analyse the technical capabilities that have provided users with IEE services such as the Apache web server with connected modules PHP, MySQL, the Java virtual machine and the Red5 server
Link: https://arxiv.org/abs/1505.00422
====================================================
Implementing a Case Management Modeling and Notation (CMMN) System using a Content Management Interoperability Services (CMIS) compliant repository (Mike A. Marin - 25 April, 2015)
Extensive Java pseudocode is provided as an example of how a CMMN implementation can use a CMIS repository to implement the CMMN information model
Link: https://arxiv.org/abs/1504.06778
====================================================
Impact assessment for vulnerabilities in open-source software libraries (Henrik Plate - 21 April, 2015)
This paper proposes a pragmatic approach to facilitate the impact assessment, describes a proof-of-concept for Java, and examines one example vulnerability as case study
Link: https://arxiv.org/abs/1504.04971
====================================================
Formal Certification of Android Bytecode (Hendra Gunadi - 6 October, 2016)
More precisely, we show that if the Java bytecode is typable in Barthe et al's type system (which guarantees non-interference) then its translation is typable in our type system. This result opens up the possibility to leverage existing bytecode verifiers for Java to certify non-interference properties of Android bytecode.
Link: https://arxiv.org/abs/1504.01842
====================================================
Security Toolbox for Detecting Novel and Sophisticated Android Malware (Benjamin Holland - 7 April, 2015)
Our research group, a Blue team in the DARPA APAC program, proposed a "human-in-the-loop program analysis" approach to detect malware given the source or Java bytecode for an Android app
Link: https://arxiv.org/abs/1504.01693
====================================================
A Complete Worst-Case Analysis of Heapsort with Experimental Verification of Its Results, A manuscript (MS) (Marek A. Suchenek - 6 April, 2015)
The algorithm has been implemented in Java, runs in $O( N \log N )$ time, and allows for precise experimental verification of the above formula.
Link: https://arxiv.org/abs/1504.01459
====================================================
Comparative Studies of Six Programming Languages (Zakaria Alomari - 2 April, 2015)
In this paper we present a comparative study between six programming languages: C++, PHP, C#, Java, Python, VB ; These languages are compared under the characteristics of reusability, reliability, portability, availability of compilers and tools, readability, efficiency, familiarity and expressiveness.
Link: https://arxiv.org/abs/1504.00693
====================================================
Model Checking AORTA: Verification of Organization-Aware Agents (Andreas Schmidt Jensen - 18 March, 2015)
We show how agents using AORTA, a framework for making agents organization-aware, can be formally verified using an extended version of the Agent Java PathFinder (AJPF), a model checking system designed specifically for agent programming languages
Link: https://arxiv.org/abs/1503.05317
====================================================
Variability Abstractions: Trading Precision for Speed in Family-Based Analyses (Extended Version) (Aleksandar S. Dimovski - 16 March, 2015)
We implement the transformation in a tool, reconfigurator that works on Object-Oriented Java program families, and evaluate the practicality of this approach on three Java SPL benchmarks.
Link: https://arxiv.org/abs/1503.04608
====================================================
Undergraduate Signal Processing Laboratories for the Android Operating System (Suhas Ranganath - 24 February, 2015)
The development of Android JDSP (A-JDSP) is carried out using the Android SDK, which is a Java-based open source development platform
Link: https://arxiv.org/abs/1502.07026
====================================================
StarL: Towards a Unified Framework for Programming, Simulating and Verifying Distributed Robotic Systems (Yixiao Lin - 22 February, 2015)
The primitives have (i) abstract, nondeterministic specifications in terms of invariants, and assume-guarantee style progress properties, (ii) implementations in Java/Android that always satisfy the invariants and attempt progress using best effort strategies
Link: https://arxiv.org/abs/1502.06286
====================================================
On the Lexical Distinguishability of Source Code (Martin Velez - 27 June, 2018)
To quantify the extent to which we can separate code into "wheat" and "chaff", we study a large (100M LOC), diverse corpus of real-world projects in Java. Since methods represent natural, likely distinct units of code, we use the ~9M Java methods in the corpus to approximate a universe of "sentences." We extract their wheat by computing the function's minimal distinguishing subset (Minset)
Link: https://arxiv.org/abs/1502.01410
====================================================
Photometric redshift estimation based on data mining with PhotoRApToR (Stefano Cavuoti - 26 January, 2015)
In this paper we present PhotoRApToR (Photometric Research Application To Redshift): a Java/C++ based desktop application capable to solve non-linear regression and multi-variate classification problems, in particular specialized for photo-z estimation
Link: https://arxiv.org/abs/1501.06506
====================================================
Anonymously Analyzing Clinical Datasets (Nafees Qamar - 19 November, 2014)
The implemented toolkit combines software engineering technologies such as Java EE and RESTful web services, to allow exchanging medical data in an unidentifiable XML format as well as restricting users to the need-to-know principle
Link: https://arxiv.org/abs/1501.05916
====================================================
Semantics for Locking Specifications (Michael Ernst - 15 November, 2015)
Annotations that specify that discipline, such as Java's @GuardedBy, are already widely used. This article highlights such ambiguities and formalizes the semantics of @GuardedBy in two alternative ways, building on an operational semantics for a small concurrent fragment of a Java-like language
Link: https://arxiv.org/abs/1501.05338
====================================================
A Direct Symbolic Execution of SQL Code for Testing of Data-Oriented Applications (MichaÃ«l Marcozzi - 21 January, 2015)
An algorithm based on these principles is presented for the symbolic execution of Java methods that implement business use cases by reading and writing in a relational database, the latter subject to data integrity constraints
Link: https://arxiv.org/abs/1501.05265
====================================================
Secure and trustworthy file sharing over cloud storage using eID tokens (Eduardo Duarte - 13 January, 2015)
We have implemented a prototype in Java that is agnostic relatively to cloud storage providers; it only manages local folders, one of them being the local image of a cloud folder
Link: https://arxiv.org/abs/1501.03139
====================================================
SpecSatisfiabilityTool: A tool for testing the satisfiability of specifications on XML documents (Javier Albors - 8 January, 2015)
The implementation of the algorithm has been written in Prolog but the prototype has a Java interface for an easy and friendly use
Link: https://arxiv.org/abs/1501.02032
====================================================
A study of the interface usability issues of mobile learning applications for smart phones from the users perspective (Abdalha Ali - 8 January, 2015)
This prototype has been developed, using Java language and the Android Software Development Kit, based on the recommended guidelines of the proposed conceptual framework
Link: https://arxiv.org/abs/1501.01875
====================================================
LeoTask: a fast, flexible and reliable framework for computational research (Changwang Zhang - 7 January, 2015)
LeoTask is a Java library for computation-intensive and time-consuming research tasks
Link: https://arxiv.org/abs/1501.01678
====================================================
Understanding resonance graphs using Easy Java Simulations (EJS) and why we use EJS (Loo Kang Wee - 28 December, 2015)
This paper reports a computer model- simulation created using Easy Java Simulation (EJS) for learners to visualize how the steady-state amplitude of a driven oscillating system varies with the frequency of the periodic driving force
Link: https://arxiv.org/abs/1501.01535
====================================================
Jif: Language-based Information-flow Security in Java (Kyle Pullicino - 30 December, 2014)
In this report, we examine Jif, a Java extension which augments the language with features related to security. Jif adds support for security labels to Java's type system such that the developer can specify confidentiality and integrity policies to the various variables used in their program
Link: https://arxiv.org/abs/1412.8639
====================================================
Wavefronts and Light Cones for Kerr Spacetimes (Francisco Frutos-Alfaro - 27 December, 2014)
To generate these visualizations, an interactive computer program with a graphical user interface, called JWFront, was written in Java.
Link: https://arxiv.org/abs/1412.8068
====================================================
Towards Refactoring of DMARF and GIPSY Case Studies -- A Team 5 SOEN6471-S14 Project Report (Pavan Kumar Polu - 23 December, 2014)
This paper presents an analysis of the architectural design of two distributed open source systems (OSS) developed in Java: Distributed Modular Audio Recognition Framework (DMARF) and General Intensional Programming System (GIPSY)
Link: https://arxiv.org/abs/1412.7533
====================================================
Toward Refactoring of DMARF and GIPSY Case Studies -- a Team 10 SOEN6471-S14 Project Report (Osama Yawar - 23 December, 2014)
DMARF (Distributed Modular Audio Recognition Framework) is a Java based research platform that acts as a library in applications
Link: https://arxiv.org/abs/1412.7531
====================================================
Toward Refactoring of DMARF and GIPSY Case Studies -- a Team 12 SOEN6471-S14 Project Report (Dipesh Walia - 23 December, 2014)
This mainly highlights security aspects in a distributed system, the Java data security framework (JDSF) in DMARF
Link: https://arxiv.org/abs/1412.7530
====================================================
DMARF AND GIPSY High Level Architecture and Requirements Analysis (Akhilesh Masna - 23 December, 2014)
Initially we represent our work by analyzing the two open source case studies which are (1) Distributed Modular Audio Recognition Framework (DMARF) is an open-source framework which consists of Natural Language Processing (NLP) implemented using Java which facilitates extensibility by adding new algorithms, (2) General Intensional Programming System (GIPSY) is a platform designed to support intensional programming languages which are built using intensional logic and their imperative counter-parts for the intensional execution model. Among the metrics, we identified the number of the java classes and methods using SonarQube
Link: https://arxiv.org/abs/1412.7528
====================================================
Performance comparison between Java and JNI for optimal implementation of computational micro-kernels (Nassim A. Halli - 21 December, 2014)
Java enables to call native code from dynamic libraries through the Java Native Interface (JNI). Nevertheless, JNI methods are not inlined and require an additional cost to be invoked compared to Java ones
Link: https://arxiv.org/abs/1412.6765
====================================================
Toward Refactoring of DMARF and GIPSY Case Studies a Team 7 SOEN6471-S14 Project Report (Abdulrhman Albeladi - 18 December, 2014)
In this work, we start with analysis and investigation of two open source software (OSS) platforms DMARF and GIPSY, predominantly implemented in Java
Link: https://arxiv.org/abs/1412.6494
====================================================
An Empirical Study on Refactoring Activity (Mohammad Iftekharul Hoque - 17 December, 2014)
This paper reports an empirical study on refactoring activity in three Java software systems
Link: https://arxiv.org/abs/1412.6359
====================================================
Replacing ANSI C with other modern programming languages (Lidia Dobrescu - 18 December, 2014)
Replacing ANSI C language with other modern programming languages such as Python or Java may be an actual debate topic in technical universities
Link: https://arxiv.org/abs/1412.5867
====================================================
Knowledge Discovery in the SCADA Databases Used for the Municipal Power Supply System (Valery Kamaev - 7 December, 2014)
The KDD tools are developed using Java Enterprise Edition platform and Spring and ORM Hiber-nate technologies.
Link: https://arxiv.org/abs/1412.2385
====================================================
Templet: a Markup Language for Concurrent Programming (Sergey Vostokin - 2 December, 2014)
Using libraries in C++, Java, C#, and other languages is more practical way of concurrent programming
Link: https://arxiv.org/abs/1412.0981
====================================================
A Tool to Automate the Sizing of Application Process for SOA based Platform (Debajyoti Mukhopadhyay - 25 November, 2014)
A web based Sizing Tool prototype is developed using Java Application Programming Interfaces to automate the process of sizing the applications deployed on SOA platform that not only scales the performance of the system but also predicts its business growth in the future.
Link: https://arxiv.org/abs/1411.6762
====================================================
Subtyping in Java is a Fractal (Moez A. AbdelGawad - 29 December, 2017)
The goal of this paper is to present an observation about the graph of the subtyping relation in Java, namely the observation that, after the addition of generics---and of wildcards, in particular---to Java, the graph of the subtyping relation is no longer a simple directed-acyclic graph (DAG), as in pre-generics Java, but is rather a fractal
Link: https://arxiv.org/abs/1411.5166
====================================================
